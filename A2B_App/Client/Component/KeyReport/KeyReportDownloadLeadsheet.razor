@using A2B_App.Client.Services
@using Newtonsoft.Json
@using System.Text
@using System.IO
@using A2B_App.Shared.Sox
@inject IToastService toastService
@inject Task<ClientSettings> _getSettings
@inject HttpClient Http
@inject NavigationManager NavManager

<h3>Key Report Leadsheet Download</h3>

<div class="columns">

    <div class="column is-half">

        @*Q1 FY*@
        <div class="row">
            <div class="col-10">
                <div class="form-group">
                    <label for="Question1"><span class="has-text-weight-bold">1. </span> For what year is the Key Report for?</label>
                    <select class="form-control" id="Question1" @bind="Q1Answer">
                        <option value="">Select Year</option>
                        @if (listFy != null && listFy.Count > 0)
                        {
                            @foreach (var item in listFy)
                            {
                                <option value="@item">@item</option>
                            }
                        }

                    </select>
                </div>
            </div>
        </div>

        @if (listClient != null && listClient.Count > 0)
        {
            @*Q2 Client*@
            <div class="row">
                <div class="col-10">
                    <div class="form-group">
                        <label for="Q2Client"><span class="has-text-weight-bold">2. </span> What is the Client Name</label>
                        <select class="form-control" id="Q2Client" @bind="Q2Answer">
                            <option value="">Select Option</option>

                            @foreach (var item in listClient)
                            {
                                <option value="@item">@item</option>
                            }

                        </select>
                    </div>
                </div>
            </div>
        }


        @*Q3 Key Report Name*@
        @if (client != string.Empty)
        {
            <div class="row">
                <div class="col-10">
                    <div class="form-group">
                        <label for="Q3Client"><span class="has-text-weight-bold">3. </span> Unique Key Report</label>
                        <select class="form-control" id="Q3Unique" @bind="Q3Answer">
                            <option value="">Select Option</option>
                            <option value="All">All</option>
                            <option value="Yes">Yes</option>
                        </select>
                    </div>
                </div>
            </div>
        }

    </div>


</div>

<div class="columns">

    <div class="column is-full">
        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <table class="table is-striped is-hoverable is-bordered">
                        <tbody>

                            @if (listKeyReportName != null && listKeyReportName.Count > 0)
                            {
                                foreach (var item in listKeyReportName)
                                {

                                    <tr>
                                        <td>
                                            <span class="is-pulled-left">Name: @item.KeyReportName</span>

                                            @if (item.FileName != string.Empty)
                                            {
                                                //<button class="button is-pulled-right" @onclick="@((e) => { NavigateSF(item.SharefileLink); })">
                                                <button class="button is-pulled-right" @onclick="@((e) => { NavigateSF(item.FileName); })">
                                                    <span class="icon is-small">
                                                        <i class="oi oi-share"></i>
                                                    </span>
                                                    <span>LeadSheet SF</span>
                                                </button>
                                                @*
                                                    < a class="button is-pulled-right" target="_top" download="@(item.FileName)" href="@DownloadFile(item.FileName)">
                                                        <span class="icon is-small">
                                                            <i class="oi oi-share"></i>
                                                        </span>
                                                        <span>Leadsheet</span>
                                                    </a>
                                                *@
                                            }
                                            <a class="button is-pulled-right" target="_blank" href="/keyreport/leadsheet/@(item.FY)/@(item.ClientName)/@(item.KeyReportName)">
                                                <span class="icon is-small">
                                                    <i class="oi oi-magnifying-glass"></i>
                                                </span>
                                                <span>View Leadsheet</span>
                                            </a>

                                            <button class="button is-primary is-pulled-right mr-2 @(item.LoadingStatus)" @onclick="@((e) => { GenerateKeyReportOutput(item); })">Generate</button>
                                            <button class="button is-primary is-pulled-right mr-3 @(item.LoadingStatus)" @onclick="@((e) => { GenerateKeyReportOutputPWC(item); })">Generate PWC</button>
                                        </td>
                                    </tr>

                                }

                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

</div>


@code {

    private List<string> listFy = new List<string>();
    private List<string> listClient = new List<string>();
    private List<KeyReportFileProperties> listKeyReportName;
    private string fy { get; set; } = string.Empty;
    private string client { get; set; } = string.Empty;
    private string reportName { get; set; } = string.Empty;
    private string uniqueKeyReport { get; set; } = string.Empty;
    private ClientSettings settings;
    private KeyReportService KeyReportService;
    private KeyReportFilter reportFilter;
    KeyReportScreenshot keyrepScreenshot { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Http.Timeout = TimeSpan.FromMinutes(30);
        settings = await _getSettings;
        KeyReportService = new KeyReportService(settings);
        reportFilter = new KeyReportFilter();
        keyrepScreenshot = new KeyReportScreenshot();
        GetFY();
        //return base.OnInitializedAsync();
    }

    private string Q1Answer
    {
        get
        {
            return fy;
        }
        set
        {
            ChangeEventArgs eventArgs = new ChangeEventArgs();
            eventArgs.Value = value;
            EventQ1Selected(eventArgs);
        }
    }
    private void EventQ1Selected(ChangeEventArgs e)
    {

        if (e.Value.ToString() != string.Empty)
        {
            System.Diagnostics.Debug.WriteLine($"FY: {e.Value}");
            fy = e.Value.ToString();
            reportFilter.FY = e.Value.ToString();
            if (fy != string.Empty)
            {
                GetClient();
            }
        }

    }

    private string Q2Answer
    {
        get
        {
            return client;
        }
        set
        {
            ChangeEventArgs eventArgs = new ChangeEventArgs();
            eventArgs.Value = value;
            EventQ2Selected(eventArgs);
        }
    }
    private void EventQ2Selected(ChangeEventArgs e)
    {

        if (e.Value.ToString() != string.Empty)
        {
            System.Diagnostics.Debug.WriteLine($"ClientName: {e.Value}");
            client =  e.Value.ToString();
            reportFilter.ClientName = e.Value.ToString();
            if (reportFilter.UniqueKey != string.Empty && reportFilter.ClientName != string.Empty && reportFilter.FY != string.Empty)
            {
                GetReportName();
            }
        }
        else
        {
            client = string.Empty;
        }

    }

    private string Q3Answer
    {
        get
        {
            return uniqueKeyReport;
        }
        set
        {
            ChangeEventArgs eventArgs = new ChangeEventArgs();
            eventArgs.Value = value;
            EventQ3Selected(eventArgs);
        }
    }
    private void EventQ3Selected(ChangeEventArgs e)
    {

        if (e.Value.ToString() != string.Empty)
        {
            System.Diagnostics.Debug.WriteLine($"Unqiue Key: {e.Value}");
            uniqueKeyReport = e.Value.ToString();
            reportFilter.UniqueKey = e.Value.ToString();
            if (reportFilter.UniqueKey != string.Empty && reportFilter.ClientName != string.Empty && reportFilter.FY != string.Empty)
            {
                GetReportName();
            }
        }
        else
        {
            uniqueKeyReport = string.Empty;
        }

    }


    private async void GetFY()
    {
        //listFy = await KeyReportService.GetFy(Http);
        //this.StateHasChanged();
        var response = await KeyReportService.GetFy(Http);

        if (response.StatusCode.ToString() == "OK")
        {
            string result = response.Content.ReadAsStringAsync().Result.ToString();
            listFy = JsonConvert.DeserializeObject<List<string>>(result);
            this.StateHasChanged();
        }

    }

    private async void GetClient()
    {

        var response = await KeyReportService.GetClient(reportFilter, Http);

        if (response.StatusCode.ToString() == "OK")
        {
            string result = response.Content.ReadAsStringAsync().Result.ToString();
            listClient = JsonConvert.DeserializeObject<List<string>>(result);
            this.StateHasChanged();
        }
    }

    private async void GetReportName()
    {
        reportFilter.KeyReportName = string.Empty;
        listKeyReportName = new List<KeyReportFileProperties>();
        var response = await KeyReportService.GetReportName(reportFilter, Http);

        if (response.StatusCode.ToString() == "OK")
        {
            string result = response.Content.ReadAsStringAsync().Result.ToString();
            var listRepNameRaw = JsonConvert.DeserializeObject<List<string>>(result);
            if(listRepNameRaw != null && listRepNameRaw.Count > 0)
            {

                foreach (var item in listRepNameRaw)
                {
                    KeyReportFileProperties repProps = new KeyReportFileProperties();
                    repProps.FY = fy;
                    repProps.ClientName = client;
                    repProps.KeyReportName = item;
                    repProps.FileName = string.Empty;
                    listKeyReportName.Add(repProps);
                }

            }
        }
        this.StateHasChanged();
    }

    private async void GenerateKeyReportOutput(KeyReportFileProperties reportFile)
    {
        System.Diagnostics.Debug.WriteLine($"Reportname: {reportFile.KeyReportName}");

        reportFilter.ClientName = client;
        reportFilter.KeyReportName = reportFile.KeyReportName;
        reportFile.FileName = string.Empty;
        reportFile.LoadingStatus = "is-loading";
        this.StateHasChanged();

        ////download screenshot image in sharefile
        //var responseSf = await KeyReportService.GetSharefileScreenshot(reportFilter, Http);
        //switch (responseSf.StatusCode.ToString())
        //{
        //    case "OK":
        //        string result = responseSf.Content.ReadAsStringAsync().Result.ToString();
        //        keyrepScreenshot = result != string.Empty ? JsonConvert.DeserializeObject<KeyReportScreenshot>(result) : null;
        //        toastService.ShowSuccess($"Successfully downloaded screenshot in SF");
        //        break;


        //    case "NoContent":
        //        toastService.ShowInfo($"No screenshot found in SF");
        //        keyrepScreenshot = new KeyReportScreenshot();
        //        keyrepScreenshot.Filter = reportFilter;
        //        break;
        //    default:
        //        toastService.ShowError($"Failed to downloaded screenshot in SF");
        //        break;
        //}


        keyrepScreenshot.Filter = reportFilter;

        //generate the file
        var response = await KeyReportService.GenerateLeadsheetOutputFile(keyrepScreenshot, Http);
        switch (response.StatusCode.ToString())
        {
            case "OK":
                string result = response.Content.ReadAsStringAsync().Result.ToString();
                reportFile.FileName = result;
                toastService.ShowSuccess($"Successfully created key report leadsheet file");
                //upload tosharefile 031421
                {
                    SharefileItem sfItem = new SharefileItem();
                    sfItem.FileName = reportFile.FileName;
                    sfItem.FilePath = string.Empty;
                    sfItem.Directory = "SoxKeyReportLeadSheetFolder";

                    var uploadRes = await KeyReportService.UploadToSharefile(sfItem, Http);
                    if (uploadRes.StatusCode.ToString() == "OK")
                    {
                        string resultUpload = uploadRes.Content.ReadAsStringAsync().Result.ToString();
                        //reportFile.FileName = resultUpload;

                        //033021
                        if (resultUpload!=string.Empty)
                            reportFile.FileName = resultUpload;
                        //

                        toastService.ShowSuccess($"Successfully uploaded in Sharefile");
                    }
                    else
                    {
                        toastService.ShowError($"Failed to upload in Sharefile");
                    }
                }
                //
                break;
            case "NoContent":
                toastService.ShowInfo($"No unique key found for this report name");
                break;
            default:
                toastService.ShowError($"Failed to create key report leadsheet file");
                break;
        }


        //rcmOutput.FileName = $"test.xlsx";
        //await Task.Delay(5000);

        reportFile.LoadingStatus = string.Empty;

        this.StateHasChanged();
    }

    //================================062721
    private async void GenerateKeyReportOutputPWC(KeyReportFileProperties reportFile)
    {
        System.Diagnostics.Debug.WriteLine($"Reportname: {reportFile.KeyReportName}");

        reportFilter.ClientName = client;
        reportFilter.KeyReportName = reportFile.KeyReportName;
        reportFile.FileName = string.Empty;
        reportFile.LoadingStatus = "is-loading";
        this.StateHasChanged();

        //download screenshot image in sharefile
        var responseSf = await KeyReportService.GetSharefileScreenshot(reportFilter, Http);

        switch (responseSf.StatusCode.ToString())
        {
            case "OK":
                string result = responseSf.Content.ReadAsStringAsync().Result.ToString();
                keyrepScreenshot = result != string.Empty ? JsonConvert.DeserializeObject<KeyReportScreenshot>(result) : null;
                toastService.ShowSuccess($"Successfully downloaded screenshot in SF");
                break;


            case "NoContent":
                toastService.ShowInfo($"No screenshot found in SF");
                keyrepScreenshot = new KeyReportScreenshot();
                keyrepScreenshot.Filter = reportFilter;
                break;
            default:
                toastService.ShowError($"Failed to downloaded screenshot in SF");
                break;
        }



        //generate the file
        var response = await KeyReportService.GenerateLeadsheetOutputFilePWC(keyrepScreenshot, Http);
        switch (response.StatusCode.ToString())
        {
            case "OK":
                string result = response.Content.ReadAsStringAsync().Result.ToString();
                reportFile.FileName = result;
                toastService.ShowSuccess($"Successfully created key report PWC  file");
                //upload tosharefile 031421
                {
                    SharefileItem sfItem = new SharefileItem();
                    sfItem.FileName = reportFile.FileName;
                    sfItem.FilePath = string.Empty;
                    sfItem.Directory = "SoxKeyReportLeadSheetFolderPWC"; //062921

                    var uploadRes = await KeyReportService.UploadToSharefile(sfItem, Http);
                    if (uploadRes.StatusCode.ToString() == "OK")
                    {
                        string resultUpload = uploadRes.Content.ReadAsStringAsync().Result.ToString();

                        if (resultUpload != string.Empty)
                            reportFile.FileName = resultUpload;
                        //

                        toastService.ShowSuccess($"Successfully uploaded PWC in Sharefile");
                    }
                    else
                    {
                        toastService.ShowError($"Failed to upload PWC in Sharefile");
                    }
                }
                //
                break;
            case "NoContent":
                toastService.ShowInfo($"No unique key found for this report name");
                break;
            default:
                toastService.ShowError($"Failed to create key report PWC file");
                break;
        }


        //rcmOutput.FileName = $"test.xlsx";
        //await Task.Delay(5000);

        reportFile.LoadingStatus = string.Empty;

        this.StateHasChanged();
    }
    //================================062721



    private void NavigateSF(string link)
    {
        NavManager.NavigateTo($"{link}", forceLoad: true);
    }



    private string DownloadFile(string fileName)
    {
        System.Diagnostics.Debug.WriteLine($"{NavManager.BaseUri}api/KeyReport/download/{fileName}");
        return $"{NavManager.BaseUri}api/KeyReport/download/{fileName}";
    }


}
