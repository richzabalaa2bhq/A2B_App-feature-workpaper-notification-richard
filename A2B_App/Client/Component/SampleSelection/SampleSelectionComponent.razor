@using BlazorDateRangePicker
@using System
@using System.IO
@using Newtonsoft.Json
@using BlazorInputFile
@using System.Text;
@using A2B_App.Shared.Sox
@using System.Linq;
@using A2B_App.Client.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using A2B_App.Shared.Utilities
@using A2B_App.Client.Component.Utilities

@inject IJSRuntime JSRuntime
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject Task<ClientSettings> _getSettings
@attribute [Authorize]
@inject HttpClient Http

@if (display)
{

    <div class="modal is-active" style="width: auto !important">
        <div class="modal-background"></div>
        <div class="modal-card" style="width: 95%">
            <header class="modal-card-head">
                <p class="modal-card-title">Sample Selection @roundName @roundId</p>
                <button class="delete" aria-label="close" @onclick="Close"></button>
            </header>
            <section class="modal-card-body">
                <div class="simple-form">

                    <EditForm Model="sampleSelection">

                        <div class="row">

                            @*field client name selection*@
                            <div class="col">
                                <div class="form-group">
                                    <label for="client">Client</label>
                                    <select class="form-control" id="client" @onchange="SetCategoryClient" disabled="@(rcm.PodioItemId != 0 ? true : false)">
                                        @if (ListClient != null)
                                        {
                                            foreach (var item in ListClient)
                                            {
                                                <option value="@item.ClientName">@item.ClientName</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>

                            @*field external auditor*@
                            <div class="col">
                                <label for="externalAuditor">External Auditor</label>
                                <input class="form-control" type="text" placeholder="" readonly id="externalAuditor" @bind-value="sampleSelection.ExternalAuditor">
                            </div>

                            @*field Q4 R3 is required selection*@
                            <div class="col">
                                <div class="form-group">
                                    <label for="sampleRequired">Q4 (R3) Sample Required?</label>
                                    <select class="form-control" id="sampleRequired" @onchange="SetQ4R3Required">
                                        @if (ListQ4R3 != null)
                                        {
                                            foreach (var item in ListQ4R3)
                                            {
                                                <option value="@item">@item</option>
                                            }
                                        }

                                    </select>
                                </div>
                            </div>

                            @*condition if yes required Q4 R3*@
                            @if (sampleSelection.Q4R3SampleRequired == "Yes")
                            {
                                <div class="col">
                                    <div class="form-group">
                                        <label for="sampleQ4R3">How many samples to be tested in Q4?</label>
                                        <input type="text" class="form-control" id="sampleQ4R3" @bind-value="sampleSelection.CountSampleQ4R3">
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col"></div>
                            }

                        </div>

                        <div class="row">

                            @*field risk selection*@
                            <div class="col">
                                <div class="form-group">
                                    <label for="risk">Risk</label>
                                    <select class="form-control" id="risk" @onchange="SetRisk" disabled="@(rcm.PodioItemId != 0 ? true : false)">
                                        @if (ListRisk != null)
                                        {
                                            foreach (var item in ListRisk)
                                            {
                                                <option value="@item">@item</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>

                            @*field frequency selection*@
                            <div class="col">
                                <div class="form-group">
                                    <label for="frequency">Frequency</label>
                                    <select class="form-control" id="frequency" disabled="@(version == "3" || rcm.PodioItemId != 0 ? true : false)" @onchange="SetCategoryFrequency">
                                        @if (ListFrequency != null)
                                        {
                                            foreach (var item in ListFrequency)
                                            {
                                                <option value="@item.Freq">@item.Freq</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>

                            @*field annual population*@
                            <div class="col">
                                <label for="annualPop">Annual Population</label>
                                <input class="form-control" type="text" placeholder="" id="annualPop" readonly @bind-value="sampleSelection.AnnualPopulation">
                            </div>

                            @*field annual sample size*@
                            <div class="col">
                                <label for="annualSamp">Annual Sample Size</label>
                                <input class="form-control" type="text" placeholder="" id="annualSamp" readonly @bind-value="sampleSelection.AnnualSampleSize">
                            </div>

                        </div>

                        @*Load download population template button*@
                        <DownloadPopulationTemplate version="@version"></DownloadPopulationTemplate>

                        @*file upload field for population*@
                        <div class="row @(version == "3" ? "" : "hidden-field")">
                            <div class="col form-group">
                            @*<InputFile OnChange="HandleFileSelected" />*@
                                <A2B_App.Client.Component.Rcm.DragDropFile ReturnFiles="@((e) => { HandleFileSelected(e); })" enableRemove="isEnableRemoveFile" title="Upload Population File" fileFormatAccepted="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel"></A2B_App.Client.Component.Rcm.DragDropFile>
                            </div>
                            <div class="col"></div>
                            <div class="col"></div>
                            <div class="col"></div>
                            <div class="col"></div>
                        </div>

                        @*transactional and materiality fields*@
                        <div class="row @(version == "3" ? "" : "hidden-field")">

                            @*field materiality*@
                            <div class="col">
                                <div class="form-group">
                                    <label for="materialityreq">Is Materiality Required?</label>
                                    <select class="form-control" id="materialityreq" @onchange="SetMaterialityValue" disabled="@isDisableMateriality">
                                        <option value=""></option>
                                        <option value="Yes">Yes</option>
                                        <option value="No">No</option>
                                    </select>

                                </div>
                            </div>

                            <div class="col">

                                <div class="form-group @(sampleSelection.IsMateriality == "Yes" && activeMateriality == 1? "" : "hidden-field")">
                                    <label for="materialityround1">Materiality to Consider</label>
                                    <select class="form-control" id="materialityround1" @onchange="SetSelectedMaterialityToConsider1" disabled="@isDisableMateriality">
                                        @if (activeMateriality == 1)
                                        {
                                            @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                            {
                                                <option value=""></option>
                                                foreach (var item in listDropdownPop1)
                                                {
                                                    <option value="@item">@item</option>
                                                }
                                            }
                                        }
                                    </select>
                                </div>

                                <div class="form-group @(sampleSelection.IsMateriality == "Yes" && activeMateriality == 2 ? "" : "hidden-field")">
                                    <label for="materialityround2">Materiality to Consider</label>
                                    <select class="form-control" id="materialityround2" @onchange="SetSelectedMaterialityToConsider2" disabled="@isDisableMateriality">
                                        @if (activeMateriality == 2)
                                        {
                                            @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                            {
                                                <option value=""></option>
                                                foreach (var item in listDropdownPop2)
                                                {
                                                    <option value="@item">@item</option>
                                                }
                                            }
                                        }
                                    </select>
                                </div>

                                <div class="form-group @(sampleSelection.IsMateriality == "Yes" && activeMateriality == 3 ? "" : "hidden-field")">
                                    <label for="materialityround3">Materiality to Consider</label>
                                    <select class="form-control" id="materialityround3" @onchange="SetSelectedMaterialityToConsider3" disabled="@isDisableMateriality">
                                        @if (activeMateriality == 3)
                                        {
                                            @if (activeMateriality == 3)
                                            {
                                                <option value=""></option>
                                                foreach (var item in listDropdownPop3)
                                                {
                                                    <option value="@item">@item</option>
                                                }
                                            }
                                        }
                                    </select>
                                </div>

                            </div>

                            <div class="col"></div>
                            <div class="col"></div>
                            <div class="col"></div>

                        </div>

                        @*field materiality display header round 1*@
                        <div class="row @(version == "3" && activeMateriality == 1 ? "" : "hidden-field")">
                            @if (questions != null)
                            {
                                @for (int i = 0; i < questions.Count; i++)
                                {
                                    var func_on_change = "SetSelectedHeader" + (i + 1);
                                    var id = "headerDisplay" + ((i + 1).ToString());

                                    @if (i == 0)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader1" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 1)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader2" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 2)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader3" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 3)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader4" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 4)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader5" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 5)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader6" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 6)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader7" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 7)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader8" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 8)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader9" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 9)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader10" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>

                                    }
                                    @if (i == 10)
                                    {
                                        break;
                                    }



                                }
                            }


                        </div>
                        <div class="row @(version == "3" && activeMateriality == 1 ? "" : "hidden-field")">
                            @if (questions != null)
                            {
                                @for (int i = 0; i < questions.Count; i++)
                                {
                                    var func_on_change = "SetSelectedHeader" + (i + 1);
                                    var id = "headerDisplay" + ((i + 1).ToString());
                                    @if (i < 10)
                                    {
                                        continue;
                                    }
                                    @if (i == 10)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader11" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 11)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader12" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 12)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader13" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 13)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader14" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 14)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader15" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 15)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader16" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 16)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader17" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 17)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader18" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 18)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader19" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 19)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader20" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 1)
                                                    {
                                                        @if (listDropdownPop1 != null && listDropdownPop1.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop1)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>

                                    }
                                   



                                }
                            }


                        </div>

                        @*field materiality display header round 2*@
                        <div class="row @(version == "3" && activeMateriality == 2 ? "" : "hidden-field")">
                            @if (questions != null)
                            {
                                @for (int i = 0; i < questions.Count; i++)
                                {
                                    var func_on_change = "SetSelectedHeader" + (i + 1);
                                    var id = "headerDisplayR2" + ((i + 1).ToString());

                                    @if (i == 0)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader1" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 1)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader2" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 2)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader3" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 3)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader4" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 4)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader5" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 5)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader6" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 6)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader7" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 7)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader8" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 8)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader9" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 9)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader10" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>

                                    }
                                    @if (i == 10)
                                    {
                                        break;
                                    }



                                }
                            }


                        </div>
                        <div class="row @(version == "3" && activeMateriality == 2 ? "" : "hidden-field")">
                            @if (questions != null)
                            {
                                @for (int i = 0; i < questions.Count; i++)
                                {
                                    var func_on_change = "SetSelectedHeader" + (i + 1);
                                    var id = "headerDisplayR2" + ((i + 1).ToString());
                                    @if (i < 10)
                                    {
                                        continue;
                                    }
                                    @if (i == 10)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader11" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 11)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader12" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 12)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader13" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 13)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader14" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 14)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader15" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 15)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader16" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 16)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader17" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 17)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader18" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 18)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader19" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 19)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader20" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 2)
                                                    {
                                                        @if (listDropdownPop2 != null && listDropdownPop2.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop2)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>

                                    }
                                   



                                }
                            }


                        </div>

                        @*field materiality display header round 3*@
                        <div class="row @(version == "3" && activeMateriality == 3 ? "" : "hidden-field")">
                            @if (questions != null)
                            {
                                @for (int i = 0; i < questions.Count; i++)
                                {
                                    var func_on_change = "SetSelectedHeader" + (i + 1);
                                    var id = "headerDisplayR3" + ((i + 1).ToString());

                                    @if (i == 0)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader1" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 1)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader2" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 2)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader3" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 3)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader4" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 4)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader5" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 5)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader6" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 6)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader7" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 7)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader8" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 8)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader9" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 9)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader10" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>

                                    }
                                    @if (i == 10)
                                    {
                                        break;
                                    }



                                }
                            }


                        </div>
                        <div class="row @(version == "3" && activeMateriality == 3 ? "" : "hidden-field")">
                            @if (questions != null)
                            {
                                @for (int i = 0; i < questions.Count; i++)
                                {
                                    var func_on_change = "SetSelectedHeader" + (i + 1);
                                    var id = "headerDisplayR3" + ((i + 1).ToString());
                                    @if (i < 10)
                                    {
                                        continue;
                                    }
                                    @if (i == 10)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader11" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 11)
                                    {
                                        <div class="col ">
                                            <div class="form-group ">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader12" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 12)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader13" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 13)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader14" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 14)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader15" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 15)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader16" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 16)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader17" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 17)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader18" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 18)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader19" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>
                                    }
                                    @if (i == 19)
                                    {
                                        <div class="col ">
                                            <div class="form-group">
                                                <label for="@id">Header to Display</label>
                                                <select class="form-control mb-3" id="@id" @onchange="SetSelectedHeader20" disabled="@isDisableMateriality">
                                                    @if (activeMateriality == 3)
                                                    {
                                                        @if (listDropdownPop3 != null && listDropdownPop3.Count > 0)
                                                        {
                                                            <option value=""></option>
                                                            foreach (var item in listDropdownPop3)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                <label for="questionString">Question String</label>
                                                <label>@questions[i].Question</label>
                                            </div>
                                        </div>

                                    }
                                   



                                }
                            }


                        </div>
                        

                        
                        @*Walkthrough sample tested*@
                        <div class="row @(version == "3" && roundName == "Round 1" ? "" : "hidden-field")">

                            @*field materiality*@
                            <div class="col">
                                <div class="form-group">
                                    <label for="iswtsampletested">Is walkthrough sample tested?</label>
                                    <select class="form-control" id="iswtsampletested" @onchange="SetWtSampleTestedValue">
                                        <option value=""></option>
                                        <option value="Yes">Yes</option>
                                        <option value="No">No</option>
                                    </select>
                                </div>
                            </div>

                            <div class="col">
                                <div class="form-group @(sampleSelection.IsWTSampleTested == "Yes" ? "" : "hidden-field")">
                                    <label for="wtSampleTested">How many walkthrough sample tested?</label>
                                    <input class="form-control" type="number" placeholder="" id="wtSampleTested" @bind-value="sampleSelection.WTSampleTested">
                                </div>
                            </div>
                            <div class="col"></div>
                            <div class="col"></div>
                            <div class="col"></div>

                        </div>


                        @*date selection*@
                        <br />
                        <div class="row ">
                            <div class="col">
                                <h6>Population Date Range</h6>
                            </div>
                        </div>

                        <div class="row ">

                            <div class="col-3 @(roundName == "Round 1" || roundName == "All"? "" : "hidden-field")">
                                <div class="form-group">
                                    <label for="round1Range">Round 1 </label>
                                    @*<DateRangePicker OnRangeSelect="OnRangeSelect1" @bind-StartDate="StartDate1" @bind-EndDate="EndDate1" id="round1range" class="form-control bg-white" readonly />*@
                                    <DateSelection OnDateChanged="@((e)=> { GetDate(e, 1); })" isDateRange="@isSingleDateRange"></DateSelection>
                                </div>
                            </div>

                            @*field round 2 date range selection*@
                            <div class="col-3 @(roundName == "Round 2" || roundName == "All"? "" : "hidden-field")">
                                <div class="form-group">
                                    <label for="round2Range">Round 2 </label>
                                    @*<DateRangePicker OnRangeSelect="OnRangeSelect2" @bind-StartDate="StartDate2" @bind-EndDate="EndDate2" id="round2Range" class="form-control bg-white" readonly />*@
                                    <DateSelection OnDateChanged="@((e)=> { GetDate(e, 2); })" isDateRange="@isSingleDateRange"></DateSelection>
                                </div>
                            </div>

                            @*field round 3 date range selection*@
                            <div class="col-3 @(roundName == "Round 3" || roundName == "All"? "" : "hidden-field")">
                                <div class="form-group">
                                    <label for="round3Range">Round 3 </label>
                                    @*<DateRangePicker OnRangeSelect="OnRangeSelect3" @bind-StartDate="StartDate3" @bind-EndDate="EndDate3" id="round3Range" class="form-control bg-white" readonly />*@
                                    <DateSelection OnDateChanged="@((e)=> { GetDate(e, 3); })" isDateRange="@isSingleDateRange"></DateSelection>
                                </div>
                            </div>

                            <div class="col-3">
                                <div class="form-group @(version == "3" ? "" : "hidden-field")">
                                    <label for="totalPeriodDays">Total Days Period</label>
                                    <input class="form-control" type="text" placeholder="" id="totalPeriodDays" readonly @bind-value="sampleSelection.DaysPeriodRoundTot">
                                </div>
                            </div>

                        </div>

                        <br />

                        @*Load test round compute table*@
                        <TestRoundComputeTable2 sampleSelection="@(roundName == "Round 1" ? sampleSelection : sampleSelection1)"
                                                sampleSelection1="@(roundName == "Round 2" ? sampleSelection : sampleSelection2)"
                                                sampleSelection2="@(roundName == "Round 3" ? sampleSelection : sampleSelection3)"></TestRoundComputeTable2>

                        <div class="row">
                            <div class="col-6">
                                <div class="form-group">
                                    <button class="btn btn-success @(isGenerated ? "" : "hidden-field")" @onclick="SaveData">Save</button>
                                    @*<button class="btn btn-primary @(fileName != "" ? "" : "hidden-field")" @onclick="DownloadExcelFile">Download Excel File</button>*@
                                    <a class="btn btn-primary has-text-white @(fileName != "" ? "" : "hidden-field")" target="_top" download="@fileName" href="@DownloadExcelFile2(fileName)">Download Excel File</a>
                                    @if (rcm.PodioItemId != 0)
                                    {
                                        <button class="btn btn-primary @(sampleSelection.PodioItemId > 0 ? "" : "hidden-field")" @onclick="@(() => { BackToQuestionnaire(sampleSelection); })">Done</button>
                                    }
                                </div>
                            </div>
                        </div>


                        @* test field to display custom output*@
                        <p>@randomValue</p>


                        @*Load Test Round Result Table*@
                        <TestRoundTable3 sampleSelection="@(roundName == "Round 1" ? sampleSelection : sampleSelection1)"
                                         roundName="@roundName"
                                         ReturnRegenData="ReturnRegenData">

                        </TestRoundTable3>

                        <TestRoundTable3 sampleSelection="@(roundName == "Round 2" ? sampleSelection : sampleSelection2)"
                                         roundName="@roundName"
                                         ReturnRegenData="ReturnRegenData">

                        </TestRoundTable3>

                        <TestRoundTable3 sampleSelection="@(roundName == "Round 3" ? sampleSelection : sampleSelection3)"
                                         roundName="@roundName"
                                         ReturnRegenData="ReturnRegenData">

                        </TestRoundTable3>

                    </EditForm>

                </div>
            </section>
            <footer class="modal-card-foot">
                @*<button class="button is-success" @onclick="Close">Save changes</button>
                    <button class="button" @onclick="Close">Cancel</button>*@
            </footer>
        </div>
    </div>

}

@code {

    [Parameter] public string version { get; set; }
    [Parameter] public List<RoundQA> questions { get; set; }
    [Parameter] public SampleSelection sampleSelection1 { get; set; }    //sample selection for round 1
    [Parameter] public SampleSelection sampleSelection2 { get; set; }   //sample selection for round 2
    [Parameter] public SampleSelection sampleSelection3 { get; set; }   //sample selection for round 3
    [Parameter] public Rcm rcm { get; set; }
    [Parameter] public EventCallback<SampleSelection> ReturnSampleSelection { get; set; }
    [Parameter] public string roundName { get; set; }
    [Parameter] public string selectedRisk { get; set; }
    [Parameter] public string selectedFrequency2 { get; set; }
    [Parameter] public string roundId { get; set; }
    private SampleSelection sampleSelection { get; set; }


    public string title { get; set; }
    //SampleSelection sampleSelection = new SampleSelection();
    //Rcm rcm;

    SampleSelectionService SelectionService;
    RcmService RcmService;
    ClientSettings settings;

    List<ClientSs> ListClient { get; set; }
    List<Frequency> ListFrequency { get; set; }
    List<string> ListRisk { get; set; }
    List<string> ListQ4R3 { get; set; }
    bool isSingleDateRange { get; set; } = false;

    //list sample size
    List<SampleSize> listSampleSize = new List<SampleSize>();

    //list dropdown
    List<DropDown> listDropDown = new List<DropDown>();

    //list population for transactional and materiality
    //private List<Population> listPopulation1, listPopulation2, listPopulation3;
    List<List<string>> listPopulation1, listPopulation2, listPopulation3;
    List<List<string>> listPopulationContent1, listPopulationContent2, listPopulationContent3;
    List<string> listDropdownPop1, listDropdownPop2, listDropdownPop3;
    //List<StringIndex> listUnique1, listUnique2, listUnique3;

    int[] indexConsiderMat = new int[] { -1, -1, -1 };
    int[] indexSelectedHeaderR1 = new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };

    int[] indexSelectedHeaderR2 = new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
    int[] indexSelectedHeaderR3 = new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };

    //addtional string for custom value and excel variables
    string randomValue = string.Empty;
    string fileName = string.Empty;

    //boolean toggle for round test geneartion, set to true if generated successfully
    bool isGenerated, isDisableMateriality, isEnableRemoveFile;

    int roundSelected, activeMateriality;


    protected override async Task OnInitializedAsync()
    {
        //Initialize();
        settings = await _getSettings;
        RcmService = new RcmService(settings);
        SelectionService = new SampleSelectionService(settings);

    }

    protected override void OnParametersSet()
    {
        //Initialize();
        switch (roundName)
        {
            case "Round 1":
                sampleSelection = sampleSelection1;
                sampleSelection.Version = version;
                break;
            case "Round 2":
                sampleSelection = sampleSelection2;
                sampleSelection.Version = version;
                break;
            case "Round 3":
                sampleSelection = sampleSelection3;
                sampleSelection.Version = version;
                break;
        }
        this.StateHasChanged();
    }

    private void SetActiveMateriality()
    {
        if (sampleSelection.IsMateriality == "Yes" || sampleSelection.IsMateriality == "No")
        {
            if (StartDate1 == null && StartDate2 == null && StartDate3 == null && listPopulationContent1 != null && listPopulationContent1.Count > 0)
            {
                activeMateriality = 1;
            }
            else if (StartDate1 == null && StartDate2 == null && StartDate3 == null && listPopulationContent2 != null && listPopulationContent2.Count > 0)
            {
                activeMateriality = 2;
            }
            else if (StartDate1 == null && StartDate2 == null && StartDate3 == null && listPopulationContent3 != null && listPopulationContent3.Count > 0)
            {
                activeMateriality = 3;
            }
            else if (StartDate1 != null && StartDate2 == null && StartDate3 == null && listPopulationContent2 != null && listPopulationContent2.Count > 0)
            {
                activeMateriality = 2;
            }
            else if (StartDate1 != null && StartDate2 != null && StartDate3 == null && listPopulationContent3 != null && listPopulationContent3.Count > 0)
            {
                activeMateriality = 3;
            }
            else if (StartDate1 == null && StartDate2 != null && StartDate3 == null && listPopulationContent3 != null && listPopulationContent3.Count > 0)
            {
                activeMateriality = 3;
            }
            else
            {
                activeMateriality = 0;
            }
        }
    }

    private void SetTitle()
    {
        switch (version)
        {
            case "1":
                title = "Sample Selection Full";
                break;
            case "2":
                title = "Sample Selection Adjusted";
                break;
            case "3":
                title = "Sample Selection Transactional and Materiality";
                break;
        }
        this.StateHasChanged();
    }

    //handles selected client field change
    private void SetCategoryClient(ChangeEventArgs e)
    {

        if (e.Value.ToString() != string.Empty)
        {
            List<ClientSs> selectedClient = new List<ClientSs>();
            selectedClient = ListClient.Where(x => x.ClientName == e.Value.ToString()).ToList();
            if (selectedClient != null)
            {
                foreach (var item in selectedClient)
                {
                    sampleSelection.ClientName = item.ClientName;
                    sampleSelection.ExternalAuditor = item.ExternalAuditor;
                    sampleSelection.ClientId = item.ItemId.Value;
                    ComputeRound(false, 0);
                }

            }
        }

    }

    //handles selected Q4 R3 required field change
    private void SetQ4R3Required(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            sampleSelection.Q4R3SampleRequired = ListQ4R3.Where(x => x == e.Value.ToString()).FirstOrDefault();
            if (sampleSelection.Q4R3SampleRequired == "No")
            {
                sampleSelection.CountSampleQ4R3 = 0;
            }
            ComputeRound(false, 0);
        }
    }

    //handles selected frequency field change
    private void SetCategoryFrequency(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {
            if (version != "3")
            {
                List<Frequency> selectedFrequency = new List<Frequency>();
                selectedFrequency = ListFrequency.Where(x => x.Freq == e.Value.ToString()).ToList();
                if (selectedFrequency != null)
                {
                    foreach (var item in selectedFrequency)
                    {
                        //sampleSelection.Frequency = item.Freq;
                        sampleSelection.AnnualPopulation = item.IntValue.Value;
                    }
                }

                ComputeRound(false, 0);
            }

        }

    }

    //handles selected risk field change
    private void SetRisk(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            sampleSelection.Risk = ListRisk.Where(x => x == e.Value.ToString()).FirstOrDefault();
            ComputeRound(false, 0);
        }
    }

    //handles selected materiality field change
    private void SetMaterialityValue(ChangeEventArgs e)
    {
        sampleSelection.IsMateriality = e.Value.ToString();
        SetActiveMateriality();
    }

    private void SetWtSampleTestedValue(ChangeEventArgs e)
    {
        sampleSelection.IsWTSampleTested = e.Value.ToString();
        if (sampleSelection.IsWTSampleTested != "Yes")
        {
            sampleSelection.WTSampleTested = 0;
        }
    }

    //handles selected materiality round 1 field change
    private void SetSelectedMaterialityToConsider1(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty && sampleSelection.IsMateriality == "Yes" && listDropdownPop1 != null)
        {
            sampleSelection.ConsiderMateriality1 = e.Value.ToString();
            indexConsiderMat[0] = listDropdownPop1.FindIndex(x => x.Contains(e.Value.ToString()));
            System.Diagnostics.Debug.WriteLine($"SetSelectedMaterialityToConsider1 indexConsiderMat1: {indexConsiderMat[0]}");
        }
        else
        {
            indexConsiderMat[0] = -1;
            sampleSelection.ConsiderMateriality1 = string.Empty;
        }
    }

    //handles selected materiality round 2 field change
    private void SetSelectedMaterialityToConsider2(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty && sampleSelection.IsMateriality == "Yes" && listDropdownPop2 != null)
        {
            sampleSelection.ConsiderMateriality2 = e.Value.ToString();
            indexConsiderMat[1] = listDropdownPop2.FindIndex(x => x.Contains(e.Value.ToString()));
            System.Diagnostics.Debug.WriteLine($"SetSelectedMaterialityToConsider2 indexConsiderMat2: {indexConsiderMat[1]}");
        }
        else
        {
            indexConsiderMat[1] = -1;
            sampleSelection.ConsiderMateriality2 = string.Empty;
        }
    }

    //handles selected materiality round 3 field change
    private void SetSelectedMaterialityToConsider3(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty && sampleSelection.IsMateriality == "Yes" && listDropdownPop3 != null)
        {
            sampleSelection.ConsiderMateriality3 = e.Value.ToString();
            indexConsiderMat[2] = listDropdownPop3.FindIndex(x => x.Contains(e.Value.ToString()));
            System.Diagnostics.Debug.WriteLine($"SetSelectedMaterialityToConsider3 indexConsiderMat3: {indexConsiderMat[2]}");
        }
        else
        {
            indexConsiderMat[2] = -1;
            sampleSelection.ConsiderMateriality3 = string.Empty;
        }
    }

    //handles selected materiality field 1 change
    private void SetSelectedHeader1(ChangeEventArgs e)
    {

        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[0] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR11 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader1 Index: {indexSelectedHeaderR1[0]} - Value: {sampleSelection.DisplayHeaderR11}");
            }
            else
            {
                indexSelectedHeaderR1[0] = -1;
                sampleSelection.DisplayHeaderR11 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[0] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR21 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader1 Index: {indexSelectedHeaderR2[0]} - Value: {sampleSelection.DisplayHeaderR21}");
            }
            else
            {
                indexSelectedHeaderR2[0] = -1;
                sampleSelection.DisplayHeaderR21 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[0] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR31 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader1 Index: {indexSelectedHeaderR3[0]} - Value: {sampleSelection.DisplayHeaderR31}");
            }
            else
            {
                indexSelectedHeaderR3[0] = -1;
                sampleSelection.DisplayHeaderR31 = string.Empty;
            }
        }
    }

    //handles selected materiality field 2 change
    private void SetSelectedHeader2(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[1] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR12 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader2 Index: {indexSelectedHeaderR1[1]} - Value: {sampleSelection.DisplayHeaderR12}");
            }
            else
            {
                indexSelectedHeaderR1[1] = -1;
                sampleSelection.DisplayHeaderR12 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[1] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR22 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader2 Index: {indexSelectedHeaderR2[1]} - Value: {sampleSelection.DisplayHeaderR22}");
            }
            else
            {
                indexSelectedHeaderR2[1] = -1;
                sampleSelection.DisplayHeaderR22 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[1] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR32 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader2 Index: {indexSelectedHeaderR3[1]} - Value: {sampleSelection.DisplayHeaderR32}");
            }
            else
            {
                indexSelectedHeaderR3[1] = -1;
                sampleSelection.DisplayHeaderR32 = string.Empty;
            }
        }

    }

    //handles selected materiality field 3 change
    private void SetSelectedHeader3(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[2] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR13 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader3 Index: {indexSelectedHeaderR1[2]} - Value: {sampleSelection.DisplayHeaderR13}");
            }
            else
            {
                indexSelectedHeaderR1[2] = -1;
                sampleSelection.DisplayHeaderR13 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[2] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR23 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader3 Index: {indexSelectedHeaderR2[2]} - Value: {sampleSelection.DisplayHeaderR23}");
            }
            else
            {
                indexSelectedHeaderR2[2] = -1;
                sampleSelection.DisplayHeaderR23 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[2] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR33 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader3 Index: {indexSelectedHeaderR3[2]} - Value: {sampleSelection.DisplayHeaderR33}");
            }
            else
            {
                indexSelectedHeaderR3[2] = -1;
                sampleSelection.DisplayHeaderR33 = string.Empty;
            }
        }
    }

    //handles selected materiality field 4 change
    private void SetSelectedHeader4(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[3] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR14 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader4 Index: {indexSelectedHeaderR1[3]} - Value: {sampleSelection.DisplayHeaderR14}");
            }
            else
            {
                indexSelectedHeaderR1[3] = -1;
                sampleSelection.DisplayHeaderR14 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[3] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR24 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader4 Index: {indexSelectedHeaderR2[3]} - Value: {sampleSelection.DisplayHeaderR24}");
            }
            else
            {
                indexSelectedHeaderR2[3] = -1;
                sampleSelection.DisplayHeaderR24 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[3] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR34 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader4 Index: {indexSelectedHeaderR3[3]} - Value: {sampleSelection.DisplayHeaderR34}");
            }
            else
            {
                indexSelectedHeaderR3[3] = -1;
                sampleSelection.DisplayHeaderR34 = string.Empty;
            }
        }
    }

    //handles selected materiality field 5 change
    private void SetSelectedHeader5(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[4] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR15 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader5 Index: {indexSelectedHeaderR1[4]} - Value: {sampleSelection.DisplayHeaderR15}");
            }
            else
            {
                indexSelectedHeaderR1[4] = -1;
                sampleSelection.DisplayHeaderR15 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[4] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR25 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader5 Index: {indexSelectedHeaderR2[4]} - Value: {sampleSelection.DisplayHeaderR25}");
            }
            else
            {
                indexSelectedHeaderR2[4] = -1;
                sampleSelection.DisplayHeaderR25 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[4] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR35 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeade5 Index: {indexSelectedHeaderR3[4]} - Value: {sampleSelection.DisplayHeaderR35}");
            }
            else
            {
                indexSelectedHeaderR3[4] = -1;
                sampleSelection.DisplayHeaderR35 = string.Empty;
            }
        }
    }

    //handles selected materiality field 6 change
    private void SetSelectedHeader6(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[5] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR16 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader6 Index: {indexSelectedHeaderR1[5]} - Value: {sampleSelection.DisplayHeaderR16}");
            }
            else
            {
                indexSelectedHeaderR1[5] = -1;
                sampleSelection.DisplayHeaderR16 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[5] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR26 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader6 Index: {indexSelectedHeaderR2[5]} - Value: {sampleSelection.DisplayHeaderR26}");
            }
            else
            {
                indexSelectedHeaderR2[5] = -1;
                sampleSelection.DisplayHeaderR26 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[5] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR36 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader6 Index: {indexSelectedHeaderR3[5]} - Value: {sampleSelection.DisplayHeaderR36}");
            }
            else
            {
                indexSelectedHeaderR3[5] = -1;
                sampleSelection.DisplayHeaderR36 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader7(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[6] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR17 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader7 Index: {indexSelectedHeaderR1[6]} - Value: {sampleSelection.DisplayHeaderR17}");
            }
            else
            {
                indexSelectedHeaderR1[6] = -1;
                sampleSelection.DisplayHeaderR17 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[6] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR27 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader7 Index: {indexSelectedHeaderR2[6]} - Value: {sampleSelection.DisplayHeaderR27}");
            }
            else
            {
                indexSelectedHeaderR2[6] = -1;
                sampleSelection.DisplayHeaderR27 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[6] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR37 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader7 Index: {indexSelectedHeaderR3[6]} - Value: {sampleSelection.DisplayHeaderR37}");
            }
            else
            {
                indexSelectedHeaderR3[6] = -1;
                sampleSelection.DisplayHeaderR37 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader8(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[7] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR18 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader8 Index: {indexSelectedHeaderR1[7]} - Value: {sampleSelection.DisplayHeaderR18}");
            }
            else
            {
                indexSelectedHeaderR1[7] = -1;
                sampleSelection.DisplayHeaderR18 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[7] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR28 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader8 Index: {indexSelectedHeaderR2[7]} - Value: {sampleSelection.DisplayHeaderR28}");
            }
            else
            {
                indexSelectedHeaderR2[7] = -1;
                sampleSelection.DisplayHeaderR28 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[7] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR38 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader8 Index: {indexSelectedHeaderR3[4]} - Value: {sampleSelection.DisplayHeaderR38}");
            }
            else
            {
                indexSelectedHeaderR3[7] = -1;
                sampleSelection.DisplayHeaderR38 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader9(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[8] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR19 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader9 Index: {indexSelectedHeaderR1[8]} - Value: {sampleSelection.DisplayHeaderR19}");
            }
            else
            {
                indexSelectedHeaderR1[8] = -1;
                sampleSelection.DisplayHeaderR19 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[8] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR29 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader9 Index: {indexSelectedHeaderR2[8]} - Value: {sampleSelection.DisplayHeaderR29}");
            }
            else
            {
                indexSelectedHeaderR2[8] = -1;
                sampleSelection.DisplayHeaderR29 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[8] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR39 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader9 Index: {indexSelectedHeaderR3[8]} - Value: {sampleSelection.DisplayHeaderR39}");
            }
            else
            {
                indexSelectedHeaderR3[8] = -1;
                sampleSelection.DisplayHeaderR39 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader10(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[9] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR110 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader10 Index: {indexSelectedHeaderR1[9]} - Value: {sampleSelection.DisplayHeaderR110}");
            }
            else
            {
                indexSelectedHeaderR1[9] = -1;
                sampleSelection.DisplayHeaderR110 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[9] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR210 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader10 Index: {indexSelectedHeaderR2[9]} - Value: {sampleSelection.DisplayHeaderR210}");
            }
            else
            {
                indexSelectedHeaderR2[9] = -1;
                sampleSelection.DisplayHeaderR210 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[9] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR310 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader10 Index: {indexSelectedHeaderR3[9]} - Value: {sampleSelection.DisplayHeaderR310}");
            }
            else
            {
                indexSelectedHeaderR3[9] = -1;
                sampleSelection.DisplayHeaderR310 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader11(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[10] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR111 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader11 Index: {indexSelectedHeaderR1[10]} - Value: {sampleSelection.DisplayHeaderR111}");
            }
            else
            {
                indexSelectedHeaderR1[10] = -1;
                sampleSelection.DisplayHeaderR111 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[10] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR211 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader11 Index: {indexSelectedHeaderR2[10]} - Value: {sampleSelection.DisplayHeaderR211}");
            }
            else
            {
                indexSelectedHeaderR2[10] = -1;
                sampleSelection.DisplayHeaderR211 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[10] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR311 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader11 Index: {indexSelectedHeaderR3[10]} - Value: {sampleSelection.DisplayHeaderR311}");
            }
            else
            {
                indexSelectedHeaderR3[10] = -1;
                sampleSelection.DisplayHeaderR311 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader12(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[11] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR112 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader12 Index: {indexSelectedHeaderR1[11]} - Value: {sampleSelection.DisplayHeaderR112}");
            }
            else
            {
                indexSelectedHeaderR1[11] = -1;
                sampleSelection.DisplayHeaderR112 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[11] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR212 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader12 Index: {indexSelectedHeaderR2[11]} - Value: {sampleSelection.DisplayHeaderR212}");
            }
            else
            {
                indexSelectedHeaderR2[11] = -1;
                sampleSelection.DisplayHeaderR212 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[11] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR312 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader12 Index: {indexSelectedHeaderR3[11]} - Value: {sampleSelection.DisplayHeaderR312}");
            }
            else
            {
                indexSelectedHeaderR3[11] = -1;
                sampleSelection.DisplayHeaderR312 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader13(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[12] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR113 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader13 Index: {indexSelectedHeaderR1[12]} - Value: {sampleSelection.DisplayHeaderR113}");
            }
            else
            {
                indexSelectedHeaderR1[12] = -1;
                sampleSelection.DisplayHeaderR113 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[12] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR213 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader13 Index: {indexSelectedHeaderR2[12]} - Value: {sampleSelection.DisplayHeaderR213}");
            }
            else
            {
                indexSelectedHeaderR2[12] = -1;
                sampleSelection.DisplayHeaderR213 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[12] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR313 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader13 Index: {indexSelectedHeaderR3[12]} - Value: {sampleSelection.DisplayHeaderR313}");
            }
            else
            {
                indexSelectedHeaderR3[12] = -1;
                sampleSelection.DisplayHeaderR313 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader14(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[13] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR114 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader14 Index: {indexSelectedHeaderR1[13]} - Value: {sampleSelection.DisplayHeaderR114}");
            }
            else
            {
                indexSelectedHeaderR1[13] = -1;
                sampleSelection.DisplayHeaderR114 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[13] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR214 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader14 Index: {indexSelectedHeaderR2[13]} - Value: {sampleSelection.DisplayHeaderR214}");
            }
            else
            {
                indexSelectedHeaderR2[13] = -1;
                sampleSelection.DisplayHeaderR214 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[13] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR314 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader14 Index: {indexSelectedHeaderR3[13]} - Value: {sampleSelection.DisplayHeaderR314}");
            }
            else
            {
                indexSelectedHeaderR3[13] = -1;
                sampleSelection.DisplayHeaderR314 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader15(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[14] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR115 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader15 Index: {indexSelectedHeaderR1[14]} - Value: {sampleSelection.DisplayHeaderR115}");
            }
            else
            {
                indexSelectedHeaderR1[14] = -1;
                sampleSelection.DisplayHeaderR115 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[14] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR215 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader15 Index: {indexSelectedHeaderR2[14]} - Value: {sampleSelection.DisplayHeaderR215}");
            }
            else
            {
                indexSelectedHeaderR2[14] = -1;
                sampleSelection.DisplayHeaderR215 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[14] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR315 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader15 Index: {indexSelectedHeaderR3[14]} - Value: {sampleSelection.DisplayHeaderR315}");
            }
            else
            {
                indexSelectedHeaderR3[14] = -1;
                sampleSelection.DisplayHeaderR315 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader16(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[15] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR116 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader16 Index: {indexSelectedHeaderR1[15]} - Value: {sampleSelection.DisplayHeaderR116}");
            }
            else
            {
                indexSelectedHeaderR1[15] = -1;
                sampleSelection.DisplayHeaderR116 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[15] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR216 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader16 Index: {indexSelectedHeaderR2[15]} - Value: {sampleSelection.DisplayHeaderR216}");
            }
            else
            {
                indexSelectedHeaderR2[15] = -1;
                sampleSelection.DisplayHeaderR216 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[15] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR316 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader16 Index: {indexSelectedHeaderR3[15]} - Value: {sampleSelection.DisplayHeaderR316}");
            }
            else
            {
                indexSelectedHeaderR3[15] = -1;
                sampleSelection.DisplayHeaderR316 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader17(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[16] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR117 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader17 Index: {indexSelectedHeaderR1[16]} - Value: {sampleSelection.DisplayHeaderR117}");
            }
            else
            {
                indexSelectedHeaderR1[16] = -1;
                sampleSelection.DisplayHeaderR117 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[16] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR217 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader17 Index: {indexSelectedHeaderR2[16]} - Value: {sampleSelection.DisplayHeaderR217}");
            }
            else
            {
                indexSelectedHeaderR2[16] = -1;
                sampleSelection.DisplayHeaderR217 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[16] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR317 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader17 Index: {indexSelectedHeaderR3[16]} - Value: {sampleSelection.DisplayHeaderR317}");
            }
            else
            {
                indexSelectedHeaderR3[16] = -1;
                sampleSelection.DisplayHeaderR317 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader18(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[17] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR118 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader18 Index: {indexSelectedHeaderR1[17]} - Value: {sampleSelection.DisplayHeaderR118}");
            }
            else
            {
                indexSelectedHeaderR1[17] = -1;
                sampleSelection.DisplayHeaderR118 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[17] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR218 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader18 Index: {indexSelectedHeaderR2[17]} - Value: {sampleSelection.DisplayHeaderR218}");
            }
            else
            {
                indexSelectedHeaderR2[17] = -1;
                sampleSelection.DisplayHeaderR218 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[17] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR318 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader18 Index: {indexSelectedHeaderR3[17]} - Value: {sampleSelection.DisplayHeaderR318}");
            }
            else
            {
                indexSelectedHeaderR3[17] = -1;
                sampleSelection.DisplayHeaderR318 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader19(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[18] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR119 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader19 Index: {indexSelectedHeaderR1[18]} - Value: {sampleSelection.DisplayHeaderR119}");
            }
            else
            {
                indexSelectedHeaderR1[18] = -1;
                sampleSelection.DisplayHeaderR119 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[18] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR219 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader19 Index: {indexSelectedHeaderR2[18]} - Value: {sampleSelection.DisplayHeaderR219}");
            }
            else
            {
                indexSelectedHeaderR2[18] = -1;
                sampleSelection.DisplayHeaderR219 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[18] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR319 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader19 Index: {indexSelectedHeaderR3[18]} - Value: {sampleSelection.DisplayHeaderR319}");
            }
            else
            {
                indexSelectedHeaderR3[18] = -1;
                sampleSelection.DisplayHeaderR319 = string.Empty;
            }
        }
    }
    private void SetSelectedHeader20(ChangeEventArgs e)
    {
        if (e.Value.ToString() != string.Empty)
        {

            if (activeMateriality == 1)
            {
                indexSelectedHeaderR1[19] = listDropdownPop1.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR120 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader20 Index: {indexSelectedHeaderR1[19]} - Value: {sampleSelection.DisplayHeaderR120}");
            }
            else
            {
                indexSelectedHeaderR1[19] = -1;
                sampleSelection.DisplayHeaderR120 = string.Empty;

            }

            if (activeMateriality == 2)
            {
                indexSelectedHeaderR2[19] = listDropdownPop2.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR220 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader20 Index: {indexSelectedHeaderR2[19]} - Value: {sampleSelection.DisplayHeaderR220}");
            }
            else
            {
                indexSelectedHeaderR2[19] = -1;
                sampleSelection.DisplayHeaderR220 = string.Empty;
            }

            if (activeMateriality == 3)
            {
                indexSelectedHeaderR3[19] = listDropdownPop3.FindIndex(x => x.Equals(e.Value.ToString()));
                sampleSelection.DisplayHeaderR320 = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"Trigger SetSelectedHeader20 Index: {indexSelectedHeaderR3[19]} - Value: {sampleSelection.DisplayHeaderR320}");
            }
            else
            {
                indexSelectedHeaderR3[19] = -1;
                sampleSelection.DisplayHeaderR320 = string.Empty;
            }
        }
    }

    //handles transactional and materiality uploading file population
    private async void HandleFileSelected(FileUpload fileUpload) //IFileListEntry[] files
    {

        ResetTM();
        isEnableRemoveFile = false;
        //string newFileName = string.Empty;
        //var file = files.FirstOrDefault();
        if (fileUpload != null && fileUpload.IFileEntry != null)
        {
            isDisableMateriality = true;
            var ms = new MemoryStream();
            //await file.Data.CopyToAsync(ms);
            await fileUpload.IFileEntry.Data.CopyToAsync(ms);

            //upload file and get response
            var response = await SelectionService.UploadFileAsync(ms, fileUpload.IFileEntry.Name, Http);

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {

                //return filename
                sampleSelection.PopulationFile = response.Content.ReadAsStringAsync().Result.ToString();
                toastService.ShowInfo($"Successfully uploaded Population File {sampleSelection.PopulationFile}");

                //listPopulation1 = new List<List<string>>();
                //listDropdownPop1 = new List<string>();
                //listPopulationContent1 = new List<List<string>>();

                listPopulation1 = await SelectionService.SetPopulationTM2Async(sampleSelection.PopulationFile, 1, Http);
                if (listPopulation1 != null && listPopulation1.Count > 0)
                {
                    listPopulationContent1 = SelectionService.GetListPopulationContentUniqueAsync(listPopulation1);
                    listDropdownPop1 = await SelectionService.SetDropDownPopulationAsync2(listPopulation1);
                    sampleSelection.PopulationByRound1 = listPopulationContent1.Count;
                }


                //listPopulation2 = new List<List<string>>();
                //listPopulationContent2 = new List<List<string>>();
                //listDropdownPop2 = new List<string>();

                listPopulation2 = await SelectionService.SetPopulationTM2Async(sampleSelection.PopulationFile, 2, Http);
                if (listPopulation2 != null && listPopulation2.Count > 0)
                {
                    listPopulationContent2 = SelectionService.GetListPopulationContentUniqueAsync(listPopulation2);
                    listDropdownPop2 = await SelectionService.SetDropDownPopulationAsync2(listPopulation2);
                    sampleSelection.PopulationByRound2 = listPopulationContent2.Count;
                }


                //listPopulation3 = new List<List<string>>();
                //listDropdownPop3 = new List<string>();
                //listPopulationContent3 = new List<List<string>>();

                listPopulation3 = await SelectionService.SetPopulationTM2Async(sampleSelection.PopulationFile, 3, Http);
                if (listPopulation3 != null && listPopulation3.Count > 0)
                {
                    listPopulationContent3 = SelectionService.GetListPopulationContentUniqueAsync(listPopulation3);
                    listDropdownPop3 = await SelectionService.SetDropDownPopulationAsync2(listPopulation3);
                    sampleSelection.PopulationByRound3 = listPopulationContent3.Count;
                }


                ComputeRound(false, 0);
                isDisableMateriality = false;
                SetActiveMateriality();
                isEnableRemoveFile = true;


            }
            else
            {

                ResetTM();
                isDisableMateriality = true;
                SetActiveMateriality();

                toastService.ShowError($"Failed to upload file {fileUpload.IFileEntry.Name.ToString()}");
            }

        }
        else
        {

            ResetTM();
            isDisableMateriality = true;
        }


        this.StateHasChanged();

    }

    //this function will compute annual sample size
    private void ComputeRound(bool isSpecificRow, int index)
    {
        try
        {
            if (version != "3")
            {
                if (sampleSelection.Risk != string.Empty
                    && sampleSelection.Frequency != string.Empty
                    && sampleSelection.ExternalAuditor != string.Empty
                    && sampleSelection.Risk != null
                    && sampleSelection.Frequency != null
                    && sampleSelection.ExternalAuditor != null
                    )
                {

                    //daily, weekly, monthly computation
                    var sizeValue = listSampleSize.Where(
                        x => x.Risk == sampleSelection.Risk &&
                        x.Frequency == sampleSelection.Frequency &&
                        x.ExternalAuditor == sampleSelection.ExternalAuditor).Select(size => size.SizeValue);
                    sampleSelection.AnnualSampleSize = sizeValue.First();

                    GenerateTestRound(isSpecificRow, index);
                }
            }
            else
            {
                if (sampleSelection.Risk != string.Empty
                    && sampleSelection.ExternalAuditor != string.Empty
                    && sampleSelection.Risk != null
                    && sampleSelection.ExternalAuditor != null
                    )
                {


                    GenerateTestRound(isSpecificRow, index);


                }



            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.ToString());
            //throw;
        }


        this.StateHasChanged();
    }

    #region Date range variable and events for round 1, round 2 and round 3

    //Set default value
    //DateTimeOffset? StartDate1 { get; set; } = DateTime.Today;
    //DateTimeOffset? StartDate2 { get; set; } = DateTime.Today.AddMonths(2);
    //DateTimeOffset? StartDate3 { get; set; } = DateTime.Today.AddMonths(4);
    //DateTimeOffset? EndDate1 { get; set; } = DateTime.Today.AddMonths(1);
    //DateTimeOffset? EndDate2 { get; set; } = DateTime.Today.AddMonths(3);
    //DateTimeOffset? EndDate3 { get; set; } = DateTime.Today.AddMonths(5);

    //Set null value

    DateTimeOffset? StartDate1 { get; set; }
    DateTimeOffset? StartDate2 { get; set; }
    DateTimeOffset? StartDate3 { get; set; }

    DateTimeOffset? EndDate1 { get; set; }
    DateTimeOffset? EndDate2 { get; set; }
    DateTimeOffset? EndDate3 { get; set; }

    List<string> events { get; set; } = new List<string>();

    public void OnRangeSelect1(DateRange range)
    {
        //Use range.Start and range.End here
        events.Add($"Range {range.Start} - {range.End} selected");
        sampleSelection.Round1Start = range.Start;
        sampleSelection.Round1End = range.End;
        roundSelected = 1;
        ComputeRound(false, 0);

    }

    public void OnRangeSelect2(DateRange range)
    {
        //Use range.Start and range.End here

        events.Add($"Range {range.Start} - {range.End} selected");
        sampleSelection.Round2Start = range.Start.Date;
        sampleSelection.Round2End = range.End.Date;
        roundSelected = 2;
        ComputeRound(false, 0);
        //GenerateTestRound();
    }

    public void OnRangeSelect3(DateRange range)
    {
        //Use range.Start and range.End here
        events.Add($"Range {range.Start} - {range.End} selected");
        sampleSelection.Round3Start = range.Start.Date;
        sampleSelection.Round3End = range.End.Date;
        roundSelected = 3;
        ComputeRound(false, 0);
        //GenerateTestRound();
    }

    #endregion

    public void GenerateTestRound(bool isSpecificRow, int index)
    {

        //check fields
        if (sampleSelection.ExternalAuditor != null
            && sampleSelection.Risk != string.Empty
            && sampleSelection.Q4R3SampleRequired != string.Empty)
        {

            sampleSelection.ListTestRound = new List<TestRound>();

            //computation if version is 2 or adjusted
            if (version == "2")
            {
                int startMonth = 13;
                int remainingMonth = 0;
                if (StartDate1 != null && StartDate1.Value.DateTime.Month <= startMonth)
                {
                    startMonth = StartDate1.Value.DateTime.Month;
                }
                else if (StartDate2 != null && StartDate2.Value.DateTime.Month <= startMonth)
                {
                    startMonth = StartDate2.Value.DateTime.Month;
                }
                else if (StartDate2 != null && StartDate3.Value.DateTime.Month <= startMonth)
                {
                    startMonth = StartDate3.Value.DateTime.Month;
                }

                if (startMonth < 13 && sampleSelection.AnnualSampleSize != null)
                {
                    remainingMonth = (12 - startMonth) + 1;
                    decimal size = (decimal)sampleSelection.AnnualSampleSize / 12;

                    sampleSelection.AnnualSampleSize = (int)(Math.Round(size * remainingMonth, MidpointRounding.ToEven));
                }

            }

            if (StartDate1 != null && EndDate1 != null)
            {
                if (version != "3")
                {
                    SetPopulation1();
                }
                else
                {
                    sampleSelection.DaysPeriodRound1 = (int)(sampleSelection.Round1End - sampleSelection.Round1Start).Value.TotalDays + 1;
                    SetPopulationTM();
                }
                SampleRound1();
            }

            if (StartDate2 != null && EndDate2 != null)
            {
                if (version != "3")
                {
                    SetPopulation2();

                }
                else
                {
                    sampleSelection.DaysPeriodRound2 = (int)(sampleSelection.Round2End - sampleSelection.Round2Start).Value.TotalDays + 1;
                    SetPopulationTM();
                }
                SampleRound2();
            }

            if (StartDate3 != null && EndDate3 != null)
            {
                if (version != "3")
                {
                    SetPopulation3();
                }
                else
                {
                    sampleSelection.DaysPeriodRound3 = (int)(sampleSelection.Round3End - sampleSelection.Round3Start).Value.TotalDays + 1;
                    SetPopulationTM();
                }
                SampleRound3();
            }


            //Generate Test Round
            switch (roundSelected)
            {
                case 1:
                    GenerateRound1(isSpecificRow, index);
                    break;
                case 2:
                    GenerateRound2(isSpecificRow, index);
                    break;
                case 3:
                    GenerateRound3(isSpecificRow, index);
                    break;
            }

            SetActiveMateriality();
        }
    }

    //set population for transactional and materiality
    private void SetPopulationTM()
    {
        sampleSelection.PopulationByRoundTot = sampleSelection.PopulationByRound1
               + sampleSelection.PopulationByRound2
               + sampleSelection.PopulationByRound3;

        sampleSelection.DaysPeriodRoundTot = sampleSelection.DaysPeriodRound1
            + sampleSelection.DaysPeriodRound2
            + sampleSelection.DaysPeriodRound3;

        if (sampleSelection.PopulationByRoundTot != 0 && sampleSelection.DaysPeriodRoundTot != 0)
        {

            double roundPerPeriod = (double)(sampleSelection.PopulationByRoundTot) / (double)(sampleSelection.DaysPeriodRoundTot);
            System.Diagnostics.Debug.WriteLine($"Round Per Period: {roundPerPeriod}");

            if (StartDate1 != null)
            {
                if (Mod(StartDate1.Value.Year, 400) == 0 || (Mod(StartDate1.Value.Year, 4) == 0 && Mod(StartDate1.Value.Year, 100) != 0))
                {
                    double tempAnnual = (Math.Round(roundPerPeriod * 366, MidpointRounding.ToEven));
                    sampleSelection.AnnualPopulation = (int)(Math.Round(roundPerPeriod * 366, MidpointRounding.ToEven));
                    System.Diagnostics.Debug.WriteLine($"Temp Annual: {tempAnnual}");
                }
                else
                {
                    double tempAnnual = (Math.Round(roundPerPeriod * 365, MidpointRounding.ToEven));
                    sampleSelection.AnnualPopulation = (int)(Math.Round(roundPerPeriod * 365, MidpointRounding.ToEven));
                    System.Diagnostics.Debug.WriteLine($"Temp Annual: {tempAnnual}");
                }
            }
            else
            {
                double tempAnnual = (Math.Round(roundPerPeriod * 365, MidpointRounding.ToEven));
                sampleSelection.AnnualPopulation = (int)(Math.Round(roundPerPeriod * 365, MidpointRounding.ToEven));
                System.Diagnostics.Debug.WriteLine($"Temp Annual: {tempAnnual}");
            }

        }

        System.Diagnostics.Debug.WriteLine($"Ext Editor: {sampleSelection.ExternalAuditor}");
        System.Diagnostics.Debug.WriteLine($"Risk: {sampleSelection.Risk}");
        System.Diagnostics.Debug.WriteLine($"Annual Population: {sampleSelection.AnnualPopulation}");


        //materiality and transactional computation
        var sizeValue = listSampleSize.Where(x =>
        sampleSelection.AnnualPopulation >= x.StartPopulation &&
        sampleSelection.AnnualPopulation <= x.EndPopulation &&
        x.ExternalAuditor == sampleSelection.ExternalAuditor &&
        x.Risk == sampleSelection.Risk);

        if (sizeValue != null)
        {

            sampleSelection.AnnualSampleSize = sizeValue.Select(size => size.SizeValue).FirstOrDefault();
            sampleSelection.Frequency = sizeValue.Select(size => size.Frequency).FirstOrDefault();

            ListFrequency = new List<Frequency> {
                        new Frequency {
                                Freq = sampleSelection.Frequency,
                                IntValue = sampleSelection.AnnualSampleSize
                            }
                        };

        }


        this.StateHasChanged();
    }

    //set population for daily/weekly/monthly for round 1
    private void SetPopulation1()
    {
        if (StartDate1 != null && EndDate1 != null && version != "3" && sampleSelection.Frequency != null)
        {

            switch (sampleSelection.Frequency)
            {
                case "Daily":
                    sampleSelection.PopulationByRound1 = (int)(sampleSelection.Round1End - sampleSelection.Round1Start).Value.TotalDays + 1;
                    break;
                case "Weekly":
                    //sampleSelection.PopulationByRound1 = WeekDiff(sampleSelection.Round1Start.Value.DateTime, sampleSelection.Round1End.Value.DateTime, DayOfWeek.Monday) + 1;
                    sampleSelection.PopulationByRound1 = (int)Math.Round(((sampleSelection.Round1End - sampleSelection.Round1Start).Value.TotalDays) / 7, MidpointRounding.ToEven);
                    break;
                case "Monthly":
                    sampleSelection.PopulationByRound1 = (int)Math.Round(((sampleSelection.Round1End - sampleSelection.Round1Start).Value.TotalDays) / 30, MidpointRounding.ToEven);
                    break;
            }
        }

    }

    //set population for daily/weekly/monthly for round 2
    private void SetPopulation2()
    {
        if (StartDate2 != null && EndDate2 != null && version != "3" && sampleSelection.Frequency != null)
        {

            switch (sampleSelection.Frequency)
            {
                case "Daily":
                    sampleSelection.PopulationByRound2 = (int)(sampleSelection.Round2End - sampleSelection.Round2Start).Value.TotalDays + 1;
                    break;
                case "Weekly":
                    //sampleSelection.PopulationByRound1 = WeekDiff(sampleSelection.Round1Start.Value.DateTime, sampleSelection.Round1End.Value.DateTime, DayOfWeek.Monday) + 1;
                    sampleSelection.PopulationByRound2 = (int)Math.Round(((sampleSelection.Round2End - sampleSelection.Round2Start).Value.TotalDays) / 7, MidpointRounding.ToEven);
                    break;
                case "Monthly":
                    sampleSelection.PopulationByRound2 = (int)Math.Round(((sampleSelection.Round2End - sampleSelection.Round2Start).Value.TotalDays) / 30, MidpointRounding.ToEven);
                    break;
            }
        }

    }

    //set population for daily/weekly/monthly for round 3
    private void SetPopulation3()
    {
        if (StartDate3 != null && EndDate3 != null && version != "3" && sampleSelection.Frequency != null)
        {

            switch (sampleSelection.Frequency)
            {
                case "Daily":
                    sampleSelection.PopulationByRound3 = (int)(sampleSelection.Round3End - sampleSelection.Round3Start).Value.TotalDays + 1;
                    break;
                case "Weekly":
                    //sampleSelection.PopulationByRound1 = WeekDiff(sampleSelection.Round1Start.Value.DateTime, sampleSelection.Round1End.Value.DateTime, DayOfWeek.Monday) + 1;
                    sampleSelection.PopulationByRound3 = (int)Math.Round(((sampleSelection.Round3End - sampleSelection.Round3Start).Value.TotalDays) / 7, MidpointRounding.ToEven);
                    break;
                case "Monthly":
                    sampleSelection.PopulationByRound3 = (int)Math.Round(((sampleSelection.Round3End - sampleSelection.Round3Start).Value.TotalDays) / 30, MidpointRounding.ToEven);
                    break;
            }
        }

    }

    //set sample round 1
    private void SampleRound1()
    {
        if (listDropDown != null
            && sampleSelection.AnnualSampleSize != null
            && sampleSelection.CountSampleQ4R3 != null)
        {

            decimal totalRound1 = 0;
            decimal round1Percent = 0;
            int round1 = 0;

            var percentVal = listDropDown.Where(x => x.ExternalAuditor == sampleSelection.ExternalAuditor).Select(size => size.Percent).FirstOrDefault();
            decimal.TryParse(percentVal.ToString(), out round1Percent);

            //check first if Q4 is required
            if (sampleSelection.CountSampleQ4R3 > 0)
            {
                //Then we validate round 1 population if it is valid with round 3 population
                totalRound1 = (decimal.Parse(sampleSelection.AnnualSampleSize.ToString()) - sampleSelection.CountSampleQ4R3.Value) * (round1Percent / 100);
                sampleSelection.SamplesByRound3 = sampleSelection.CountSampleQ4R3.Value;
                round1 = (int)(totalRound1);
            }
            else
            {
                //get test round base on dropdown percent for round 1
                totalRound1 = decimal.Parse(sampleSelection.AnnualSampleSize.ToString()) * (round1Percent / 100);
                //round1 = random.Next(0, (int)(totalRound));
                round1 = (int)(totalRound1);
            }

            //sampleSelection.SamplesByRound1 = round1;
            sampleSelection.SamplesByRound1 = sampleSelection.IsWTSampleTested == "Yes" && roundName == "Round 1" ? round1 - sampleSelection.WTSampleTested : round1;
        }
    }

    //set sample round 2
    private void SampleRound2()
    {

        if (listDropDown != null
           && sampleSelection.AnnualSampleSize != null
           && sampleSelection.CountSampleQ4R3 != null)
        {
            decimal totalRound = 0;
            decimal round2Percent = 0;
            int round2 = 0;
            if (sampleSelection.CountSampleQ4R3 > 0)
            {
                sampleSelection.SamplesByRound3 = sampleSelection.CountSampleQ4R3.Value;
                //Then we validate round 1 population if it is valid with round 3 population
                round2 = sampleSelection.AnnualSampleSize.Value - (sampleSelection.SamplesByRound3 + sampleSelection.SamplesByRound1);
            }
            else
            {
                //get test round base on dropdown percent for round 1
                totalRound = decimal.Parse(sampleSelection.AnnualSampleSize.Value.ToString()) - sampleSelection.SamplesByRound1;

                var percentVal = listDropDown.Where(x => x.ExternalAuditor == sampleSelection.ExternalAuditor).Select(size => size.PercentRound2).FirstOrDefault();
                decimal.TryParse(percentVal.ToString(), out round2Percent);

                //Round 2 = (annual population - round 1) * 90%
                //round2 = (int)(totalRound * (decimal)(0.90));
                round2 = (int)(totalRound * (decimal)(round2Percent / 100));
            }

            sampleSelection.SamplesByRound2 = round2;
        }

    }

    //set sample round 3
    private void SampleRound3()
    {
        if (listDropDown != null
           && sampleSelection.AnnualSampleSize != null
           && sampleSelection.CountSampleQ4R3 != null)
        {
            decimal totalRound = 0;
            int round3 = 0;
            //check first if Q4 is required
            if (sampleSelection.CountSampleQ4R3 > 0)
            {
                //Then we validate round 1 population if it is valid with round 3 population
                sampleSelection.SamplesByRound3 = sampleSelection.CountSampleQ4R3.Value;
                round3 = sampleSelection.CountSampleQ4R3.Value;
            }
            else
            {
                //generate test round base on dropdown percent for round 1
                totalRound = decimal.Parse(sampleSelection.AnnualSampleSize.Value.ToString())
                    - sampleSelection.SamplesByRound1
                    - sampleSelection.SamplesByRound2;

                round3 = (int)totalRound;
            }

            sampleSelection.SamplesByRound3 = round3;
        }

    }

    //this function will remove value in list of testround
    private void RemoveTestRound(string roundName)
    {
        #region remove round if any in sample selection list test round
        if (sampleSelection.ListTestRound != null)
        {
            List<TestRound> listRound1 = new List<TestRound>();
            foreach (var item in sampleSelection.ListTestRound)
            {
                if (item.TestingRound == roundName)
                {
                    listRound1.Add(item);
                }
            }

            if (listRound1.Count > 0)
            {
                List<TestRound> newList = sampleSelection.ListTestRound.ToList();
                newList.RemoveAll(x => listRound1.Contains(x));
                sampleSelection.ListTestRound = newList;
                //sampleSelection.ListTestRound.RemoveAll(x => listRound1.Contains(x));
            }
        }

        #endregion

    }

    //generate random test round 1
    private void GenerateRound1(bool isSpecificRow, int index)
    {

        if (StartDate1 != null && sampleSelection.AnnualSampleSize != null)
        {
            Random random = new Random();

            if (!isSpecificRow)
                RemoveTestRound("Round 1");

            int workDaysRound1 = (int)GetWorkingDays(sampleSelection.Round1Start.Value.DateTime, sampleSelection.Round1End.Value.DateTime);

            if (version != "3" && workDaysRound1 > sampleSelection.SamplesByRound1)
            {
                #region Round 1 Random Daily/Weekly/Monthly
                int counterRound1 = isSpecificRow ? sampleSelection.SamplesByRound1 - 1 : 0;
                while (counterRound1 != sampleSelection.SamplesByRound1)
                {
                    System.Diagnostics.Debug.WriteLine($"{counterRound1} != {sampleSelection.SamplesByRound1}");

                    TimeSpan timeSpan = sampleSelection.Round1End.Value - sampleSelection.Round1Start.Value;
                    TimeSpan newSpan = new TimeSpan(0, random.Next(0, (int)timeSpan.TotalMinutes), 0);
                    DateTime newDate = sampleSelection.Round1Start.Value.DateTime + newSpan;

                    //Check if no duplicate date exists in list
                    //if (!sampleSelection.ListTestRound.Any(x => x.Date.Contains(newDate.ToString("MM/dd/yyyy")))
                    if (!sampleSelection.ListTestRound.Any(x => x.Date.Value.ToString("MM/dd/yyyy").Contains(newDate.ToString("MM/dd/yyyy")))
                    && newDate.DayOfWeek != DayOfWeek.Saturday
                    && newDate.DayOfWeek != DayOfWeek.Sunday)
                    {
                        counterRound1++;
                        TestRound testRound = new TestRound();
                        testRound.TestingRound = "Round 1";
                        testRound.A2Q2Samples = counterRound1.ToString();
                        testRound.Date = newDate;
                        testRound.MonthOnly = newDate.ToString("MMMM");
                        testRound.WeeklyOnly = newDate.AddDays(-(int)newDate.DayOfWeek + (int)DayOfWeek.Monday).ToString("MM/dd/yyyy");
                        testRound.Status = "Open";
                        //sampleSelection.ListTestRound.Add(testRound);
                        if (isSpecificRow)
                        {
                            var updateList = sampleSelection.ListTestRound.FirstOrDefault(x => x.A2Q2Samples.Equals(index.ToString()));
                            if (updateList != null)
                            {
                                updateList.Date = testRound.Date;
                                updateList.MonthOnly = testRound.MonthOnly;
                                updateList.WeeklyOnly = testRound.WeeklyOnly;
                            }
                        }
                        else
                            sampleSelection.ListTestRound.Add(testRound);
                        System.Diagnostics.Debug.WriteLine($"Added Test {testRound.TestingRound } = {testRound.Date}");

                    }

                }

                isGenerated = true;
                #endregion
            }

            else if (version == "3"
                && sampleSelection.PopulationByRound1 >= sampleSelection.SamplesByRound1
                && sampleSelection.AnnualPopulation != null
                && sampleSelection.AnnualSampleSize != null
                && sampleSelection.Frequency != string.Empty
                && listPopulationContent1 != null)
            {
                //System.Diagnostics.Debug.WriteLine($"if ({sampleSelection.PopulationByRound1} >= {sampleSelection.SamplesByRound1})");
                //System.Diagnostics.Debug.WriteLine($"Annual Population: {sampleSelection.AnnualPopulation}");
                //System.Diagnostics.Debug.WriteLine($"Annual SampleSize: {sampleSelection.AnnualSampleSize}");
                //System.Diagnostics.Debug.WriteLine($"Frequency: {sampleSelection.Frequency}");
                //System.Diagnostics.Debug.WriteLine($"isMateriality: {sampleSelection.IsMateriality}");

                #region Round 1 Random Transactional and Materiality

                int counterRound1 = isSpecificRow ? sampleSelection.SamplesByRound1 - 1 : 0;

                List<string> tempUnique = new List<string>();
                List<List<string>> tempListUniqueContent1 = new List<List<string>>();
                List<List<string>> tempSort = new List<List<string>>();
                List<List<string>> tempList = new List<List<string>>();
                if (indexConsiderMat[0] != -1)
                {
                    tempList = SelectionService.GetListPopulationContentAsync(listPopulationContent1);
                    tempSort = SortListDesc(tempList, indexConsiderMat[0]).ToList();
                    tempSort = SelectionService.GetListPopulationContentUnique2Async(tempSort);

                }
                else
                {
                    tempSort.AddRange(listPopulationContent1);
                }

                tempListUniqueContent1.AddRange(tempSort);

                if (tempListUniqueContent1 != null && tempListUniqueContent1.Count > 0)
                {
                    IEnumerable<List<string>> rawData;
                    if (sampleSelection.IsMateriality != "Yes")
                    {
                        //var rawData = tempListUniqueContent1.OrderBy(x => random.Next()).Take(sampleSelection.SamplesByRound1);

                        if (!isSpecificRow)
                        {
                            rawData = tempListUniqueContent1.OrderBy(x => random.Next()).Take(sampleSelection.SamplesByRound1);
                        }
                        else
                        {
                            rawData = tempListUniqueContent1.OrderBy(x => random.Next());
                        }

                        foreach (var retData in rawData)
                        {
                            retData.FirstOrDefault();
                            if (!tempUnique.Contains(retData[retData.Count - 2]))
                            {
                                counterRound1++;
                                TestRound testRound = new TestRound();
                                testRound.TestingRound = "Round 1";
                                testRound.A2Q2Samples = counterRound1.ToString();
                                testRound.Status = "Open";
                                WriteLog writelog = new WriteLog();
                                writelog.Display("test12345678");
                                //Display base on selected option
                                if (indexSelectedHeaderR1[0] >= 0)
                                {
                                    testRound.HeaderRoundDisplay1 = sampleSelection.DisplayHeaderR11;
                                    testRound.ContentDisplay1 = (retData[indexSelectedHeaderR1[0]] != null ? retData[indexSelectedHeaderR1[0]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[0]={indexSelectedHeaderR1[0]} | HeaderRoundDisplay1={sampleSelection.DisplayHeaderR11}");
                                }

                                if (indexSelectedHeaderR1[1] >= 0)
                                {
                                    testRound.HeaderRoundDisplay2 = sampleSelection.DisplayHeaderR12;
                                    testRound.ContentDisplay2 = (retData[indexSelectedHeaderR1[1]] != null ? retData[indexSelectedHeaderR1[1]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[1]={indexSelectedHeaderR1[1]} | HeaderRoundDisplay2={sampleSelection.DisplayHeaderR12}");
                                }

                                if (indexSelectedHeaderR1[2] >= 0)
                                {
                                    testRound.HeaderRoundDisplay3 = sampleSelection.DisplayHeaderR13;
                                    testRound.ContentDisplay3 = (retData[indexSelectedHeaderR1[2]] != null ? retData[indexSelectedHeaderR1[2]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[2]={indexSelectedHeaderR1[2]} | HeaderRoundDisplay3={sampleSelection.DisplayHeaderR13}");
                                }

                                if (indexSelectedHeaderR1[3] >= 0)
                                {
                                    testRound.HeaderRoundDisplay4 = sampleSelection.DisplayHeaderR14;
                                    testRound.ContentDisplay4 = (retData[indexSelectedHeaderR1[3]] != null ? retData[indexSelectedHeaderR1[3]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[3]={indexSelectedHeaderR1[3]} | HeaderRoundDisplay4={sampleSelection.DisplayHeaderR14}");
                                }

                                if (indexSelectedHeaderR1[4] >= 0)
                                {
                                    testRound.HeaderRoundDisplay5 = sampleSelection.DisplayHeaderR15;
                                    testRound.ContentDisplay5 = (retData[indexSelectedHeaderR1[4]] != null ? retData[indexSelectedHeaderR1[4]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[4]={indexSelectedHeaderR1[4]} | HeaderRoundDisplay5={sampleSelection.DisplayHeaderR15}");
                                }
                                if (indexSelectedHeaderR1[5] >= 0)
                                {
                                    testRound.HeaderRoundDisplay6 = sampleSelection.DisplayHeaderR16;
                                    testRound.ContentDisplay6 = (retData[indexSelectedHeaderR1[5]] != null ? retData[indexSelectedHeaderR1[5]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[5]={indexSelectedHeaderR1[5]} | HeaderRoundDisplay6={sampleSelection.DisplayHeaderR16}");
                                }
                                if (indexSelectedHeaderR1[6] >= 0)
                                {
                                    testRound.HeaderRoundDisplay7 = sampleSelection.DisplayHeaderR17;
                                    testRound.ContentDisplay7 = (retData[indexSelectedHeaderR1[6]] != null ? retData[indexSelectedHeaderR1[6]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[6]={indexSelectedHeaderR1[6]} | HeaderRoundDisplay7={sampleSelection.DisplayHeaderR17}");
                                }
                                if (indexSelectedHeaderR1[7] >= 0)
                                {
                                    testRound.HeaderRoundDisplay8 = sampleSelection.DisplayHeaderR18;
                                    testRound.ContentDisplay8 = (retData[indexSelectedHeaderR1[7]] != null ? retData[indexSelectedHeaderR1[7]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[7]={indexSelectedHeaderR1[7]} | HeaderRoundDisplay8={sampleSelection.DisplayHeaderR18}");
                                }
                                if (indexSelectedHeaderR1[8] >= 0)
                                {
                                    testRound.HeaderRoundDisplay9 = sampleSelection.DisplayHeaderR19;
                                    testRound.ContentDisplay9 = (retData[indexSelectedHeaderR1[8]] != null ? retData[indexSelectedHeaderR1[8]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[8]={indexSelectedHeaderR1[8]} | HeaderRoundDisplay9={sampleSelection.DisplayHeaderR19}");
                                }
                                if (indexSelectedHeaderR1[9] >= 0)
                                {
                                    testRound.HeaderRoundDisplay10 = sampleSelection.DisplayHeaderR110;
                                    testRound.ContentDisplay10 = (retData[indexSelectedHeaderR1[9]] != null ? retData[indexSelectedHeaderR1[9]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[9]={indexSelectedHeaderR1[9]} | HeaderRoundDisplay10={sampleSelection.DisplayHeaderR110}");
                                }
                                if (indexSelectedHeaderR1[10] >= 0)
                                {
                                    testRound.HeaderRoundDisplay11 = sampleSelection.DisplayHeaderR111;
                                    testRound.ContentDisplay11 = (retData[indexSelectedHeaderR1[10]] != null ? retData[indexSelectedHeaderR1[10]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[10]={indexSelectedHeaderR1[10]} | HeaderRoundDisplay11={sampleSelection.DisplayHeaderR111}");
                                }
                                if (indexSelectedHeaderR1[11] >= 0)
                                {
                                    testRound.HeaderRoundDisplay12 = sampleSelection.DisplayHeaderR112;
                                    testRound.ContentDisplay12 = (retData[indexSelectedHeaderR1[11]] != null ? retData[indexSelectedHeaderR1[11]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[11]={indexSelectedHeaderR1[11]} | HeaderRoundDisplay12={sampleSelection.DisplayHeaderR112}");
                                }
                                if (indexSelectedHeaderR1[12] >= 0)
                                {
                                    testRound.HeaderRoundDisplay13 = sampleSelection.DisplayHeaderR113;
                                    testRound.ContentDisplay13 = (retData[indexSelectedHeaderR1[12]] != null ? retData[indexSelectedHeaderR1[12]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[12]={indexSelectedHeaderR1[12]} | HeaderRoundDisplay13={sampleSelection.DisplayHeaderR113}");
                                }
                                if (indexSelectedHeaderR1[13] >= 0)
                                {
                                    testRound.HeaderRoundDisplay14 = sampleSelection.DisplayHeaderR114;
                                    testRound.ContentDisplay14 = (retData[indexSelectedHeaderR1[13]] != null ? retData[indexSelectedHeaderR1[13]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[13]={indexSelectedHeaderR1[13]} | HeaderRoundDisplay14={sampleSelection.DisplayHeaderR114}");
                                }
                                if (indexSelectedHeaderR1[14] >= 0)
                                {
                                    testRound.HeaderRoundDisplay15 = sampleSelection.DisplayHeaderR115;
                                    testRound.ContentDisplay15 = (retData[indexSelectedHeaderR1[14]] != null ? retData[indexSelectedHeaderR1[14]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[14]={indexSelectedHeaderR1[14]} | HeaderRoundDisplay15={sampleSelection.DisplayHeaderR115}");
                                }
                                if (indexSelectedHeaderR1[15] >= 0)
                                {
                                    testRound.HeaderRoundDisplay16 = sampleSelection.DisplayHeaderR116;
                                    testRound.ContentDisplay16 = (retData[indexSelectedHeaderR1[15]] != null ? retData[indexSelectedHeaderR1[15]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[15]={indexSelectedHeaderR1[15]} | HeaderRoundDisplay16={sampleSelection.DisplayHeaderR116}");
                                }
                                if (indexSelectedHeaderR1[16] >= 0)
                                {
                                    testRound.HeaderRoundDisplay17 = sampleSelection.DisplayHeaderR117;
                                    testRound.ContentDisplay17 = (retData[indexSelectedHeaderR1[16]] != null ? retData[indexSelectedHeaderR1[16]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[16]={indexSelectedHeaderR1[16]} | HeaderRoundDisplay17={sampleSelection.DisplayHeaderR117}");
                                }
                                if (indexSelectedHeaderR1[17] >= 0)
                                {
                                    testRound.HeaderRoundDisplay18 = sampleSelection.DisplayHeaderR118;
                                    testRound.ContentDisplay18 = (retData[indexSelectedHeaderR1[17]] != null ? retData[indexSelectedHeaderR1[17]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[17]={indexSelectedHeaderR1[17]} | HeaderRoundDisplay18={sampleSelection.DisplayHeaderR118}");
                                }
                                if (indexSelectedHeaderR1[18] >= 0)
                                {
                                    testRound.HeaderRoundDisplay19 = sampleSelection.DisplayHeaderR119;
                                    testRound.ContentDisplay19 = (retData[indexSelectedHeaderR1[18]] != null ? retData[indexSelectedHeaderR1[18]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[18]={indexSelectedHeaderR1[18]} | HeaderRoundDisplay19={sampleSelection.DisplayHeaderR119}");
                                }
                                if (indexSelectedHeaderR1[19] >= 0)
                                {
                                    testRound.HeaderRoundDisplay20 = sampleSelection.DisplayHeaderR120;
                                    testRound.ContentDisplay20 = (retData[indexSelectedHeaderR1[19]] != null ? retData[indexSelectedHeaderR1[19]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[19]={indexSelectedHeaderR1[19]} | HeaderRoundDisplay20={sampleSelection.DisplayHeaderR120}");
                                }


                                //sampleSelection.ListTestRound.Add(testRound);
                                //tempUnique.Add(retData[retData.Count - 2]);

                                if (isSpecificRow && testRound.ContentDisplay1 != null && testRound.ContentDisplay1 != string.Empty)
                                {
                                    var checkTestRoundExists = sampleSelection.ListTestRound.Where(x => x.ContentDisplay1.Equals(testRound.ContentDisplay1)).FirstOrDefault();
                                    if (checkTestRoundExists == null) //check if it exists in list of test round
                                    {
                                        var updateList = sampleSelection.ListTestRound.FirstOrDefault(x => x.A2Q2Samples.Equals(index.ToString()));
                                        if (updateList != null)
                                        {
                                            updateList.Date = testRound.Date;
                                            updateList.MonthOnly = testRound.MonthOnly;
                                            updateList.WeeklyOnly = testRound.WeeklyOnly;
                                            updateList.HeaderRoundDisplay1 = testRound.HeaderRoundDisplay1;
                                            updateList.ContentDisplay1 = testRound.ContentDisplay1;
                                            updateList.HeaderRoundDisplay2 = testRound.HeaderRoundDisplay2;
                                            updateList.ContentDisplay2 = testRound.ContentDisplay2;
                                            updateList.HeaderRoundDisplay3 = testRound.HeaderRoundDisplay3;
                                            updateList.ContentDisplay3 = testRound.ContentDisplay3;
                                            updateList.HeaderRoundDisplay4 = testRound.HeaderRoundDisplay4;
                                            updateList.ContentDisplay4 = testRound.ContentDisplay4;
                                            updateList.HeaderRoundDisplay5 = testRound.HeaderRoundDisplay5;
                                            updateList.ContentDisplay5 = testRound.ContentDisplay5;
                                            updateList.HeaderRoundDisplay6 = testRound.HeaderRoundDisplay6;
                                            updateList.ContentDisplay6 = testRound.ContentDisplay6;
                                            updateList.HeaderRoundDisplay7 = testRound.HeaderRoundDisplay7;
                                            updateList.ContentDisplay7 = testRound.ContentDisplay7;
                                            updateList.HeaderRoundDisplay8 = testRound.HeaderRoundDisplay8;
                                            updateList.ContentDisplay8 = testRound.ContentDisplay8;
                                            updateList.HeaderRoundDisplay9 = testRound.HeaderRoundDisplay9;
                                            updateList.ContentDisplay9 = testRound.ContentDisplay9;
                                            updateList.HeaderRoundDisplay10 = testRound.HeaderRoundDisplay10;
                                            updateList.ContentDisplay10 = testRound.ContentDisplay10;
                                            updateList.HeaderRoundDisplay11 = testRound.HeaderRoundDisplay11;
                                            updateList.ContentDisplay11 = testRound.ContentDisplay11;
                                            updateList.HeaderRoundDisplay12 = testRound.HeaderRoundDisplay12;
                                            updateList.ContentDisplay12 = testRound.ContentDisplay12;
                                            updateList.HeaderRoundDisplay13 = testRound.HeaderRoundDisplay13;
                                            updateList.ContentDisplay13 = testRound.ContentDisplay13;
                                            updateList.HeaderRoundDisplay14 = testRound.HeaderRoundDisplay14;
                                            updateList.ContentDisplay14 = testRound.ContentDisplay14;
                                            updateList.HeaderRoundDisplay15 = testRound.HeaderRoundDisplay15;
                                            updateList.ContentDisplay15 = testRound.ContentDisplay15;
                                            updateList.HeaderRoundDisplay16 = testRound.HeaderRoundDisplay16;
                                            updateList.ContentDisplay16 = testRound.ContentDisplay16;
                                            updateList.HeaderRoundDisplay17 = testRound.HeaderRoundDisplay17;
                                            updateList.ContentDisplay17 = testRound.ContentDisplay17;
                                            updateList.HeaderRoundDisplay18 = testRound.HeaderRoundDisplay18;
                                            updateList.ContentDisplay18 = testRound.ContentDisplay18;
                                            updateList.HeaderRoundDisplay19 = testRound.HeaderRoundDisplay19;
                                            updateList.ContentDisplay19 = testRound.ContentDisplay19;
                                            updateList.HeaderRoundDisplay20 = testRound.HeaderRoundDisplay20;
                                            updateList.ContentDisplay20 = testRound.ContentDisplay20;
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    sampleSelection.ListTestRound.Add(testRound);
                                    tempUnique.Add(retData[retData.Count - 2]);
                                }

                                System.Diagnostics.Debug.WriteLine($"Counter {counterRound1}: {sampleSelection.SamplesByRound1} | UniqueID: {retData[retData.Count - 2]}");

                            }
                            else
                            {
                                System.Diagnostics.Debug.WriteLine($"Temp Unique Exists Round 1: {retData[retData.Count - 2]}");
                            }
                        }
                    }
                    else
                    {
                        //we only get the first row in the list of unique content

                        //var rawData = tempListUniqueContent1.Take(sampleSelection.SamplesByRound1);

                        if (isSpecificRow)
                        {
                            tempListUniqueContent1.RemoveAt(index);
                            counterRound1 = 0;
                        }


                        rawData = tempListUniqueContent1;

                        foreach (var retData in rawData)
                        {
                            if (counterRound1 != sampleSelection.SamplesByRound1)
                            {
                                retData.FirstOrDefault();
                                if (!tempUnique.Contains(retData[retData.Count - 2]))
                                {
                                    counterRound1++;
                                    TestRound testRound = new TestRound();
                                    testRound.TestingRound = "Round 1";
                                    testRound.A2Q2Samples = counterRound1.ToString();
                                    testRound.Status = "Open";

                                    //Display base on selected option
                                    if (indexSelectedHeaderR1[0] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay1 = sampleSelection.DisplayHeaderR11;
                                        testRound.ContentDisplay1 = (retData[indexSelectedHeaderR1[0]] != null ? retData[indexSelectedHeaderR1[0]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR11={indexSelectedHeaderR1[0]}");
                                    }

                                    if (indexSelectedHeaderR1[1] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay2 = sampleSelection.DisplayHeaderR12;
                                        testRound.ContentDisplay2 = (retData[indexSelectedHeaderR1[1]] != null ? retData[indexSelectedHeaderR1[1]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR12={indexSelectedHeaderR1[1]}");
                                    }

                                    if (indexSelectedHeaderR1[2] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay3 = sampleSelection.DisplayHeaderR13;
                                        testRound.ContentDisplay3 = (retData[indexSelectedHeaderR1[2]] != null ? retData[indexSelectedHeaderR1[2]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR13={indexSelectedHeaderR1[2]}");
                                    }

                                    if (indexSelectedHeaderR1[3] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay4 = sampleSelection.DisplayHeaderR14;
                                        testRound.ContentDisplay4 = (retData[indexSelectedHeaderR1[3]] != null ? retData[indexSelectedHeaderR1[3]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR14={indexSelectedHeaderR1[3]}");
                                    }

                                    if (indexSelectedHeaderR1[4] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay5 = sampleSelection.DisplayHeaderR15;
                                        testRound.ContentDisplay5 = (retData[indexSelectedHeaderR1[4]] != null ? retData[indexSelectedHeaderR1[4]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR15={indexSelectedHeaderR1[4]}");
                                    }
                                    if (indexSelectedHeaderR1[5] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay6 = sampleSelection.DisplayHeaderR16;
                                        testRound.ContentDisplay6 = (retData[indexSelectedHeaderR1[5]] != null ? retData[indexSelectedHeaderR1[5]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[5]={indexSelectedHeaderR1[5]} | HeaderRoundDisplay6={sampleSelection.DisplayHeaderR16}");
                                    }
                                    if (indexSelectedHeaderR1[6] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay7 = sampleSelection.DisplayHeaderR17;
                                        testRound.ContentDisplay7 = (retData[indexSelectedHeaderR1[6]] != null ? retData[indexSelectedHeaderR1[6]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[6]={indexSelectedHeaderR1[6]} | HeaderRoundDisplay7={sampleSelection.DisplayHeaderR17}");
                                    }
                                    if (indexSelectedHeaderR1[7] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay8 = sampleSelection.DisplayHeaderR18;
                                        testRound.ContentDisplay8 = (retData[indexSelectedHeaderR1[7]] != null ? retData[indexSelectedHeaderR1[7]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[7]={indexSelectedHeaderR1[7]} | HeaderRoundDisplay8={sampleSelection.DisplayHeaderR18}");
                                    }
                                    if (indexSelectedHeaderR1[8] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay9 = sampleSelection.DisplayHeaderR19;
                                        testRound.ContentDisplay9 = (retData[indexSelectedHeaderR1[8]] != null ? retData[indexSelectedHeaderR1[8]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[8]={indexSelectedHeaderR1[8]} | HeaderRoundDisplay9={sampleSelection.DisplayHeaderR19}");
                                    }
                                    if (indexSelectedHeaderR1[9] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay10 = sampleSelection.DisplayHeaderR110;
                                        testRound.ContentDisplay10 = (retData[indexSelectedHeaderR1[9]] != null ? retData[indexSelectedHeaderR1[9]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[9]={indexSelectedHeaderR1[9]} | HeaderRoundDisplay10={sampleSelection.DisplayHeaderR110}");
                                    }
                                    if (indexSelectedHeaderR1[10] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay11 = sampleSelection.DisplayHeaderR111;
                                        testRound.ContentDisplay11 = (retData[indexSelectedHeaderR1[10]] != null ? retData[indexSelectedHeaderR1[10]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[10]={indexSelectedHeaderR1[10]} | HeaderRoundDisplay11={sampleSelection.DisplayHeaderR111}");
                                    }
                                    if (indexSelectedHeaderR1[11] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay12 = sampleSelection.DisplayHeaderR112;
                                        testRound.ContentDisplay12 = (retData[indexSelectedHeaderR1[11]] != null ? retData[indexSelectedHeaderR1[11]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[11]={indexSelectedHeaderR1[11]} | HeaderRoundDisplay12={sampleSelection.DisplayHeaderR112}");
                                    }
                                    if (indexSelectedHeaderR1[12] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay13 = sampleSelection.DisplayHeaderR113;
                                        testRound.ContentDisplay13 = (retData[indexSelectedHeaderR1[12]] != null ? retData[indexSelectedHeaderR1[12]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[12]={indexSelectedHeaderR1[12]} | HeaderRoundDisplay13={sampleSelection.DisplayHeaderR113}");
                                    }
                                    if (indexSelectedHeaderR1[13] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay14 = sampleSelection.DisplayHeaderR114;
                                        testRound.ContentDisplay14 = (retData[indexSelectedHeaderR1[13]] != null ? retData[indexSelectedHeaderR1[13]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[13]={indexSelectedHeaderR1[13]} | HeaderRoundDisplay14={sampleSelection.DisplayHeaderR114}");
                                    }
                                    if (indexSelectedHeaderR1[14] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay15 = sampleSelection.DisplayHeaderR115;
                                        testRound.ContentDisplay15 = (retData[indexSelectedHeaderR1[14]] != null ? retData[indexSelectedHeaderR1[14]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[14]={indexSelectedHeaderR1[14]} | HeaderRoundDisplay15={sampleSelection.DisplayHeaderR115}");
                                    }
                                    if (indexSelectedHeaderR1[15] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay16 = sampleSelection.DisplayHeaderR116;
                                        testRound.ContentDisplay16 = (retData[indexSelectedHeaderR1[15]] != null ? retData[indexSelectedHeaderR1[15]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[15]={indexSelectedHeaderR1[15]} | HeaderRoundDisplay16={sampleSelection.DisplayHeaderR116}");
                                    }
                                    if (indexSelectedHeaderR1[16] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay17 = sampleSelection.DisplayHeaderR117;
                                        testRound.ContentDisplay17 = (retData[indexSelectedHeaderR1[16]] != null ? retData[indexSelectedHeaderR1[16]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[16]={indexSelectedHeaderR1[16]} | HeaderRoundDisplay17={sampleSelection.DisplayHeaderR117}");
                                    }
                                    if (indexSelectedHeaderR1[17] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay18 = sampleSelection.DisplayHeaderR118;
                                        testRound.ContentDisplay18 = (retData[indexSelectedHeaderR1[17]] != null ? retData[indexSelectedHeaderR1[17]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[17]={indexSelectedHeaderR1[17]} | HeaderRoundDisplay18={sampleSelection.DisplayHeaderR118}");
                                    }
                                    if (indexSelectedHeaderR1[18] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay19 = sampleSelection.DisplayHeaderR119;
                                        testRound.ContentDisplay19 = (retData[indexSelectedHeaderR1[18]] != null ? retData[indexSelectedHeaderR1[18]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[18]={indexSelectedHeaderR1[18]} | HeaderRoundDisplay19={sampleSelection.DisplayHeaderR119}");
                                    }
                                    if (indexSelectedHeaderR1[19] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay20 = sampleSelection.DisplayHeaderR120;
                                        testRound.ContentDisplay20 = (retData[indexSelectedHeaderR1[19]] != null ? retData[indexSelectedHeaderR1[19]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 1: indexSelectedHeaderR1[19]={indexSelectedHeaderR1[19]} | HeaderRoundDisplay20={sampleSelection.DisplayHeaderR120}");
                                    }

                                    //sampleSelection.ListTestRound.Add(testRound);
                                    //tempUnique.Add(retData[retData.Count - 2]);

                                    if (isSpecificRow && testRound.ContentDisplay1 != null && testRound.ContentDisplay1 != string.Empty)
                                    {
                                        var checkTestRoundExists = sampleSelection.ListTestRound.Where(x => x.ContentDisplay1.Equals(testRound.ContentDisplay1)).FirstOrDefault();
                                        if (checkTestRoundExists == null) //check if it exists in list of test round
                                        {
                                            var updateList = sampleSelection.ListTestRound.FirstOrDefault(x => x.A2Q2Samples.Equals(index.ToString()));
                                            if (updateList != null)
                                            {
                                                updateList.Date = testRound.Date;
                                                updateList.MonthOnly = testRound.MonthOnly;
                                                updateList.WeeklyOnly = testRound.WeeklyOnly;
                                                updateList.HeaderRoundDisplay1 = testRound.HeaderRoundDisplay1;
                                                updateList.ContentDisplay1 = testRound.ContentDisplay1;
                                                updateList.HeaderRoundDisplay2 = testRound.HeaderRoundDisplay2;
                                                updateList.ContentDisplay2 = testRound.ContentDisplay2;
                                                updateList.HeaderRoundDisplay3 = testRound.HeaderRoundDisplay3;
                                                updateList.ContentDisplay3 = testRound.ContentDisplay3;
                                                updateList.HeaderRoundDisplay4 = testRound.HeaderRoundDisplay4;
                                                updateList.ContentDisplay4 = testRound.ContentDisplay4;
                                                updateList.HeaderRoundDisplay5 = testRound.HeaderRoundDisplay5;
                                                updateList.ContentDisplay5 = testRound.ContentDisplay5;
                                                updateList.HeaderRoundDisplay6 = testRound.HeaderRoundDisplay6;
                                                updateList.ContentDisplay6 = testRound.ContentDisplay6;
                                                updateList.HeaderRoundDisplay7 = testRound.HeaderRoundDisplay7;
                                                updateList.ContentDisplay7 = testRound.ContentDisplay7;
                                                updateList.HeaderRoundDisplay8 = testRound.HeaderRoundDisplay8;
                                                updateList.ContentDisplay8 = testRound.ContentDisplay8;
                                                updateList.HeaderRoundDisplay9 = testRound.HeaderRoundDisplay9;
                                                updateList.ContentDisplay9 = testRound.ContentDisplay9;
                                                updateList.HeaderRoundDisplay10 = testRound.HeaderRoundDisplay10;
                                                updateList.ContentDisplay10 = testRound.ContentDisplay10;
                                                updateList.HeaderRoundDisplay11 = testRound.HeaderRoundDisplay11;
                                                updateList.ContentDisplay11 = testRound.ContentDisplay11;
                                                updateList.HeaderRoundDisplay12 = testRound.HeaderRoundDisplay12;
                                                updateList.ContentDisplay12 = testRound.ContentDisplay12;
                                                updateList.HeaderRoundDisplay13 = testRound.HeaderRoundDisplay13;
                                                updateList.ContentDisplay13 = testRound.ContentDisplay13;
                                                updateList.HeaderRoundDisplay14 = testRound.HeaderRoundDisplay14;
                                                updateList.ContentDisplay14 = testRound.ContentDisplay14;
                                                updateList.HeaderRoundDisplay15 = testRound.HeaderRoundDisplay15;
                                                updateList.ContentDisplay15 = testRound.ContentDisplay15;
                                                updateList.HeaderRoundDisplay16 = testRound.HeaderRoundDisplay16;
                                                updateList.ContentDisplay16 = testRound.ContentDisplay16;
                                                updateList.HeaderRoundDisplay17 = testRound.HeaderRoundDisplay17;
                                                updateList.ContentDisplay17 = testRound.ContentDisplay17;
                                                updateList.HeaderRoundDisplay18 = testRound.HeaderRoundDisplay18;
                                                updateList.ContentDisplay18 = testRound.ContentDisplay18;
                                                updateList.HeaderRoundDisplay19 = testRound.HeaderRoundDisplay19;
                                                updateList.ContentDisplay19 = testRound.ContentDisplay19;
                                                updateList.HeaderRoundDisplay20 = testRound.HeaderRoundDisplay20;
                                                updateList.ContentDisplay20 = testRound.ContentDisplay20;
                                                break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sampleSelection.ListTestRound.Add(testRound);
                                        tempUnique.Add(retData[retData.Count - 2]);
                                    }

                                    System.Diagnostics.Debug.WriteLine($"Counter {counterRound1}: {sampleSelection.SamplesByRound1}");

                                    //if (tempListUniqueContent1.Count > 0)
                                    //    tempListUniqueContent1.RemoveAt(0);
                                }
                                else
                                {
                                    System.Diagnostics.Debug.WriteLine($"Temp Unique Exists Round 1: {retData[retData.Count - 2]}");
                                }
                            }
                            else
                            {
                                break;
                            }

                        }
                    }

                }




                isGenerated = true;
                #endregion



            }

            else
            {
                toastService.ShowError($"An error occurred in Generating Round 1");
            }


            SortTestRound();
            this.StateHasChanged();
        }

    }

    //generate random test round 2
    private void GenerateRound2(bool isSpecificRow, int index)
    {

        if (StartDate2 != null && sampleSelection.AnnualSampleSize != null)
        {

            //System.Diagnostics.Debug.WriteLine($"if ({sampleSelection.PopulationByRound1} >= {sampleSelection.SamplesByRound1})");
            //System.Diagnostics.Debug.WriteLine($"Annual Population: {sampleSelection.AnnualPopulation}");
            //System.Diagnostics.Debug.WriteLine($"Annual SampleSize: {sampleSelection.AnnualSampleSize}");
            //System.Diagnostics.Debug.WriteLine($"Frequency: {sampleSelection.Frequency}");
            //System.Diagnostics.Debug.WriteLine($"isMateriality: {sampleSelection.IsMateriality}");

            Random random = new Random();

            if (!isSpecificRow)
                RemoveTestRound("Round 2");

            int workDaysRound2 = (int)GetWorkingDays(sampleSelection.Round2Start.Value.DateTime, sampleSelection.Round2End.Value.DateTime);

            if (version != "3" && workDaysRound2 > sampleSelection.SamplesByRound2)
            {
                #region Round 2 Random
                int counterRound1 = sampleSelection.SamplesByRound1;
                int counterRound2 = isSpecificRow ? sampleSelection.SamplesByRound2 - 1 : 0;
                while (counterRound2 != sampleSelection.SamplesByRound2)
                {
                    TimeSpan timeSpan = sampleSelection.Round2End.Value - sampleSelection.Round2Start.Value;
                    TimeSpan newSpan = new TimeSpan(0, random.Next(0, (int)timeSpan.TotalMinutes), 0);
                    DateTime newDate = sampleSelection.Round2Start.Value.DateTime + newSpan;

                    //Check if no duplicate date exists in list
                    //if (!sampleSelection.ListTestRound.Any(x => x.Date.Contains(newDate.ToString("MM/dd/yyyy")))
                    if (!sampleSelection.ListTestRound.Any(x => x.Date.Value.ToString("MM/dd/yyyy").Contains(newDate.ToString("MM/dd/yyyy")))
                    && newDate.DayOfWeek != DayOfWeek.Saturday
                    && newDate.DayOfWeek != DayOfWeek.Sunday)
                    {
                        counterRound1++;
                        counterRound2++;
                        TestRound testRound = new TestRound();
                        testRound.TestingRound = "Round 2";
                        testRound.A2Q2Samples = counterRound1.ToString();
                        testRound.Date = newDate;
                        testRound.MonthOnly = newDate.ToString("MMMM");
                        testRound.WeeklyOnly = newDate.AddDays(-(int)newDate.DayOfWeek + (int)DayOfWeek.Monday).ToString("MM/dd/yyyy");
                        testRound.Status = "Open";
                        //sampleSelection.ListTestRound.Add(testRound);
                        if (isSpecificRow)
                        {
                            var updateList = sampleSelection.ListTestRound.FirstOrDefault(x => x.A2Q2Samples.Equals(index.ToString()));
                            if (updateList != null)
                            {
                                updateList.Date = testRound.Date;
                                updateList.MonthOnly = testRound.MonthOnly;
                                updateList.WeeklyOnly = testRound.WeeklyOnly;
                            }
                        }
                        else
                            sampleSelection.ListTestRound.Add(testRound);
                    }
                }

                isGenerated = true;
                #endregion
            }

            else if (version == "3"
                && sampleSelection.PopulationByRound2 >= sampleSelection.SamplesByRound2
                && sampleSelection.AnnualPopulation != null
                && sampleSelection.AnnualSampleSize != null
                && sampleSelection.Frequency != string.Empty
                && listPopulationContent2 != null)
            {

                //System.Diagnostics.Debug.WriteLine($"if ({sampleSelection.PopulationByRound2} >= {sampleSelection.SamplesByRound2})");
                //System.Diagnostics.Debug.WriteLine($"Annual Population: {sampleSelection.AnnualPopulation}");
                //System.Diagnostics.Debug.WriteLine($"Annual SampleSize: {sampleSelection.AnnualSampleSize}");
                //System.Diagnostics.Debug.WriteLine($"Frequency: {sampleSelection.Frequency}");
                //System.Diagnostics.Debug.WriteLine($"isMateriality: {sampleSelection.IsMateriality}");

                #region Round 2 Random Transactional and Materiality
                int counterRound1 = sampleSelection.SamplesByRound1;
                int counterRound2 = isSpecificRow ? sampleSelection.SamplesByRound2 - 1 : 0;

                List<string> tempUnique = new List<string>();
                List<List<string>> tempListUniqueContent2 = new List<List<string>>();
                List<List<string>> tempSort = new List<List<string>>();
                List<List<string>> tempList = new List<List<string>>();
                if (indexConsiderMat[1] != -1)
                {
                    //tempSort = SortListDesc(listPopulationContent2, indexConsiderMat[1]).ToList();
                    tempList = SelectionService.GetListPopulationContentAsync(listPopulationContent2);
                    tempSort = SortListDesc(tempList, indexConsiderMat[1]).ToList();
                    tempSort = SelectionService.GetListPopulationContentUnique2Async(tempSort);
                }
                else
                {
                    tempSort.AddRange(listPopulationContent2);
                }

                tempListUniqueContent2.AddRange(tempSort);

                if (tempListUniqueContent2 != null && tempListUniqueContent2.Count > 0)
                {
                    IEnumerable<List<string>> rawData;
                    if (sampleSelection.IsMateriality != "Yes")
                    {
                        //var rawData = tempListUniqueContent2.OrderBy(x => random.Next()).Take(sampleSelection.SamplesByRound2);

                        if (!isSpecificRow)
                        {
                            rawData = tempListUniqueContent2.OrderBy(x => random.Next()).Take(sampleSelection.SamplesByRound2);
                        }
                        else
                        {
                            rawData = tempListUniqueContent2.OrderBy(x => random.Next());
                        }


                        foreach (var retData in rawData)
                        {

                            retData.FirstOrDefault();
                            if (!tempUnique.Contains(retData[retData.Count - 2]))
                            {
                                counterRound1++;
                                counterRound2++;
                                TestRound testRound = new TestRound();
                                testRound.TestingRound = "Round 2";
                                testRound.A2Q2Samples = counterRound1.ToString();
                                testRound.Status = "Open";

                                //Display base on selected option
                                if (indexSelectedHeaderR2[0] >= 0)
                                {
                                    testRound.HeaderRoundDisplay1 = sampleSelection.DisplayHeaderR21;
                                    testRound.ContentDisplay1 = (retData[indexSelectedHeaderR2[0]] != null ? retData[indexSelectedHeaderR2[0]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[0]={indexSelectedHeaderR2[0]} | HeaderRoundDisplay1={sampleSelection.DisplayHeaderR21}");
                                }

                                if (indexSelectedHeaderR2[1] >= 0)
                                {
                                    testRound.HeaderRoundDisplay2 = sampleSelection.DisplayHeaderR22;
                                    testRound.ContentDisplay2 = (retData[indexSelectedHeaderR2[1]] != null ? retData[indexSelectedHeaderR2[1]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[1]={indexSelectedHeaderR2[1]} | HeaderRoundDisplay2={sampleSelection.DisplayHeaderR22}");
                                }

                                if (indexSelectedHeaderR2[2] >= 0)
                                {
                                    testRound.HeaderRoundDisplay3 = sampleSelection.DisplayHeaderR23;
                                    testRound.ContentDisplay3 = (retData[indexSelectedHeaderR2[2]] != null ? retData[indexSelectedHeaderR2[2]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[2]={indexSelectedHeaderR2[2]} | HeaderRoundDisplay3={sampleSelection.DisplayHeaderR23}");
                                }

                                if (indexSelectedHeaderR2[3] >= 0)
                                {
                                    testRound.HeaderRoundDisplay4 = sampleSelection.DisplayHeaderR24;
                                    testRound.ContentDisplay4 = (retData[indexSelectedHeaderR2[3]] != null ? retData[indexSelectedHeaderR2[3]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[3]={indexSelectedHeaderR2[3]} | HeaderRoundDisplay4={sampleSelection.DisplayHeaderR24}");
                                }

                                if (indexSelectedHeaderR2[4] >= 0)
                                {
                                    testRound.HeaderRoundDisplay5 = sampleSelection.DisplayHeaderR25;
                                    testRound.ContentDisplay5 = (retData[indexSelectedHeaderR2[4]] != null ? retData[indexSelectedHeaderR2[4]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[4]={indexSelectedHeaderR2[4]} | HeaderRoundDisplay5={sampleSelection.DisplayHeaderR25}");
                                }
                                if (indexSelectedHeaderR2[5] >= 0)
                                {
                                    testRound.HeaderRoundDisplay6 = sampleSelection.DisplayHeaderR26;
                                    testRound.ContentDisplay6 = (retData[indexSelectedHeaderR2[5]] != null ? retData[indexSelectedHeaderR2[5]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[5]={indexSelectedHeaderR2[5]} | HeaderRoundDisplay6={sampleSelection.DisplayHeaderR26}");
                                }
                                if (indexSelectedHeaderR2[6] >= 0)
                                {
                                    testRound.HeaderRoundDisplay7 = sampleSelection.DisplayHeaderR27;
                                    testRound.ContentDisplay7 = (retData[indexSelectedHeaderR2[6]] != null ? retData[indexSelectedHeaderR2[6]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[6]={indexSelectedHeaderR2[6]} | HeaderRoundDisplay7={sampleSelection.DisplayHeaderR27}");
                                }
                                if (indexSelectedHeaderR2[7] >= 0)
                                {
                                    testRound.HeaderRoundDisplay8 = sampleSelection.DisplayHeaderR28;
                                    testRound.ContentDisplay8 = (retData[indexSelectedHeaderR2[7]] != null ? retData[indexSelectedHeaderR2[7]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[7]={indexSelectedHeaderR2[7]} | HeaderRoundDisplay8={sampleSelection.DisplayHeaderR28}");
                                }
                                if (indexSelectedHeaderR2[8] >= 0)
                                {
                                    testRound.HeaderRoundDisplay9 = sampleSelection.DisplayHeaderR29;
                                    testRound.ContentDisplay9 = (retData[indexSelectedHeaderR2[8]] != null ? retData[indexSelectedHeaderR2[8]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[8]={indexSelectedHeaderR2[8]} | HeaderRoundDisplay9={sampleSelection.DisplayHeaderR29}");
                                }
                                if (indexSelectedHeaderR2[9] >= 0)
                                {
                                    testRound.HeaderRoundDisplay10 = sampleSelection.DisplayHeaderR210;
                                    testRound.ContentDisplay10 = (retData[indexSelectedHeaderR2[9]] != null ? retData[indexSelectedHeaderR2[9]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[9]={indexSelectedHeaderR2[9]} | HeaderRoundDisplay10={sampleSelection.DisplayHeaderR210}");
                                }
                                if (indexSelectedHeaderR2[10] >= 0)
                                {
                                    testRound.HeaderRoundDisplay11 = sampleSelection.DisplayHeaderR211;
                                    testRound.ContentDisplay11 = (retData[indexSelectedHeaderR2[10]] != null ? retData[indexSelectedHeaderR2[10]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[10]={indexSelectedHeaderR2[10]} | HeaderRoundDisplay11={sampleSelection.DisplayHeaderR211}");
                                }
                                if (indexSelectedHeaderR2[11] >= 0)
                                {
                                    testRound.HeaderRoundDisplay12 = sampleSelection.DisplayHeaderR212;
                                    testRound.ContentDisplay12 = (retData[indexSelectedHeaderR2[11]] != null ? retData[indexSelectedHeaderR2[11]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[11]={indexSelectedHeaderR2[11]} | HeaderRoundDisplay12={sampleSelection.DisplayHeaderR212}");
                                }
                                if (indexSelectedHeaderR2[12] >= 0)
                                {
                                    testRound.HeaderRoundDisplay13 = sampleSelection.DisplayHeaderR213;
                                    testRound.ContentDisplay13 = (retData[indexSelectedHeaderR2[12]] != null ? retData[indexSelectedHeaderR2[12]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[12]={indexSelectedHeaderR2[12]} | HeaderRoundDisplay13={sampleSelection.DisplayHeaderR213}");
                                }
                                if (indexSelectedHeaderR2[13] >= 0)
                                {
                                    testRound.HeaderRoundDisplay14 = sampleSelection.DisplayHeaderR214;
                                    testRound.ContentDisplay14 = (retData[indexSelectedHeaderR2[13]] != null ? retData[indexSelectedHeaderR2[13]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[13]={indexSelectedHeaderR2[13]} | HeaderRoundDisplay14={sampleSelection.DisplayHeaderR214}");
                                }
                                if (indexSelectedHeaderR2[14] >= 0)
                                {
                                    testRound.HeaderRoundDisplay15 = sampleSelection.DisplayHeaderR215;
                                    testRound.ContentDisplay15 = (retData[indexSelectedHeaderR2[14]] != null ? retData[indexSelectedHeaderR2[14]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[14]={indexSelectedHeaderR2[14]} | HeaderRoundDisplay15={sampleSelection.DisplayHeaderR215}");
                                }
                                if (indexSelectedHeaderR2[15] >= 0)
                                {
                                    testRound.HeaderRoundDisplay16 = sampleSelection.DisplayHeaderR216;
                                    testRound.ContentDisplay16 = (retData[indexSelectedHeaderR2[15]] != null ? retData[indexSelectedHeaderR2[15]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[15]={indexSelectedHeaderR2[15]} | HeaderRoundDisplay16={sampleSelection.DisplayHeaderR216}");
                                }
                                if (indexSelectedHeaderR2[16] >= 0)
                                {
                                    testRound.HeaderRoundDisplay17 = sampleSelection.DisplayHeaderR217;
                                    testRound.ContentDisplay17 = (retData[indexSelectedHeaderR2[16]] != null ? retData[indexSelectedHeaderR2[16]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[16]={indexSelectedHeaderR2[16]} | HeaderRoundDisplay17={sampleSelection.DisplayHeaderR217}");
                                }
                                if (indexSelectedHeaderR2[17] >= 0)
                                {
                                    testRound.HeaderRoundDisplay18 = sampleSelection.DisplayHeaderR218;
                                    testRound.ContentDisplay18 = (retData[indexSelectedHeaderR2[17]] != null ? retData[indexSelectedHeaderR2[17]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[17]={indexSelectedHeaderR2[17]} | HeaderRoundDisplay18={sampleSelection.DisplayHeaderR218}");
                                }
                                if (indexSelectedHeaderR2[18] >= 0)
                                {
                                    testRound.HeaderRoundDisplay19 = sampleSelection.DisplayHeaderR219;
                                    testRound.ContentDisplay19 = (retData[indexSelectedHeaderR2[18]] != null ? retData[indexSelectedHeaderR2[18]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[18]={indexSelectedHeaderR2[18]} | HeaderRoundDisplay19={sampleSelection.DisplayHeaderR219}");
                                }
                                if (indexSelectedHeaderR2[19] >= 0)
                                {
                                    testRound.HeaderRoundDisplay20 = sampleSelection.DisplayHeaderR220;
                                    testRound.ContentDisplay20 = (retData[indexSelectedHeaderR2[19]] != null ? retData[indexSelectedHeaderR2[19]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[19]={indexSelectedHeaderR2[19]} | HeaderRoundDisplay20={sampleSelection.DisplayHeaderR220}");
                                }


                                //sampleSelection.ListTestRound.Add(testRound);
                                //tempUnique.Add(retData[retData.Count - 2]);

                                if (isSpecificRow && testRound.ContentDisplay1 != null && testRound.ContentDisplay1 != string.Empty)
                                {
                                    var checkTestRoundExists = sampleSelection.ListTestRound.Where(x => x.ContentDisplay1.Equals(testRound.ContentDisplay1)).FirstOrDefault();
                                    if (checkTestRoundExists == null) //check if it exists in list of test round
                                    {
                                        var updateList = sampleSelection.ListTestRound.FirstOrDefault(x => x.A2Q2Samples.Equals(index.ToString()));
                                        if (updateList != null)
                                        {
                                            updateList.Date = testRound.Date;
                                            updateList.MonthOnly = testRound.MonthOnly;
                                            updateList.WeeklyOnly = testRound.WeeklyOnly;
                                            updateList.HeaderRoundDisplay1 = testRound.HeaderRoundDisplay1;
                                            updateList.ContentDisplay1 = testRound.ContentDisplay1;
                                            updateList.HeaderRoundDisplay2 = testRound.HeaderRoundDisplay2;
                                            updateList.ContentDisplay2 = testRound.ContentDisplay2;
                                            updateList.HeaderRoundDisplay3 = testRound.HeaderRoundDisplay3;
                                            updateList.ContentDisplay3 = testRound.ContentDisplay3;
                                            updateList.HeaderRoundDisplay4 = testRound.HeaderRoundDisplay4;
                                            updateList.ContentDisplay4 = testRound.ContentDisplay4;
                                            updateList.HeaderRoundDisplay5 = testRound.HeaderRoundDisplay5;
                                            updateList.ContentDisplay5 = testRound.ContentDisplay5;
                                            updateList.HeaderRoundDisplay6 = testRound.HeaderRoundDisplay6;
                                            updateList.ContentDisplay6 = testRound.ContentDisplay6;
                                            updateList.HeaderRoundDisplay7 = testRound.HeaderRoundDisplay7;
                                            updateList.ContentDisplay7 = testRound.ContentDisplay7;
                                            updateList.HeaderRoundDisplay8 = testRound.HeaderRoundDisplay8;
                                            updateList.ContentDisplay8 = testRound.ContentDisplay8;
                                            updateList.HeaderRoundDisplay9 = testRound.HeaderRoundDisplay9;
                                            updateList.ContentDisplay9 = testRound.ContentDisplay9;
                                            updateList.HeaderRoundDisplay10 = testRound.HeaderRoundDisplay10;
                                            updateList.ContentDisplay10 = testRound.ContentDisplay10;
                                            updateList.HeaderRoundDisplay11 = testRound.HeaderRoundDisplay11;
                                            updateList.ContentDisplay11 = testRound.ContentDisplay11;
                                            updateList.HeaderRoundDisplay12 = testRound.HeaderRoundDisplay12;
                                            updateList.ContentDisplay12 = testRound.ContentDisplay12;
                                            updateList.HeaderRoundDisplay13 = testRound.HeaderRoundDisplay13;
                                            updateList.ContentDisplay13 = testRound.ContentDisplay13;
                                            updateList.HeaderRoundDisplay14 = testRound.HeaderRoundDisplay14;
                                            updateList.ContentDisplay14 = testRound.ContentDisplay14;
                                            updateList.HeaderRoundDisplay15 = testRound.HeaderRoundDisplay15;
                                            updateList.ContentDisplay15 = testRound.ContentDisplay15;
                                            updateList.HeaderRoundDisplay16 = testRound.HeaderRoundDisplay16;
                                            updateList.ContentDisplay16 = testRound.ContentDisplay16;
                                            updateList.HeaderRoundDisplay17 = testRound.HeaderRoundDisplay17;
                                            updateList.ContentDisplay17 = testRound.ContentDisplay17;
                                            updateList.HeaderRoundDisplay18 = testRound.HeaderRoundDisplay18;
                                            updateList.ContentDisplay18 = testRound.ContentDisplay18;
                                            updateList.HeaderRoundDisplay19 = testRound.HeaderRoundDisplay19;
                                            updateList.ContentDisplay19 = testRound.ContentDisplay19;
                                            updateList.HeaderRoundDisplay20 = testRound.HeaderRoundDisplay20;
                                            updateList.ContentDisplay20 = testRound.ContentDisplay20;
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    sampleSelection.ListTestRound.Add(testRound);
                                    tempUnique.Add(retData[retData.Count - 2]);
                                }

                                System.Diagnostics.Debug.WriteLine($"Counter {counterRound1}: {sampleSelection.SamplesByRound2}");

                                //if (tempListUniqueContent1.Count > 0)
                                //    tempListUniqueContent1.RemoveAt(0);

                                //tempListUniqueContent1 = await SelectionService.RemoveItemListUnique(tempListUniqueContent1, index.Value);
                            }
                            else
                            {
                                System.Diagnostics.Debug.WriteLine($"Temp Unique Exists Round 2: {retData[retData.Count - 2]}");
                            }

                        }
                    }
                    else
                    {
                        //we only get the first row in the list of unique content
                        //var rawData = tempListUniqueContent2.Take(sampleSelection.SamplesByRound2);

                        if (isSpecificRow)
                        {
                            tempListUniqueContent2.RemoveAt(index);
                            counterRound2 = 0;
                        }

                        rawData = tempListUniqueContent2;

                        foreach (var retData in rawData)
                        {

                            if (counterRound2 != sampleSelection.SamplesByRound2)
                            {
                                retData.FirstOrDefault();
                                //Console.WriteLine($"Price: {retData[indexSelectedHeaderR2[2]]} | Index: {retData[retData.Count - 2]}");
                                if (!tempUnique.Contains(retData[retData.Count - 2]))
                                {
                                    counterRound1++;
                                    counterRound2++;
                                    TestRound testRound = new TestRound();
                                    testRound.TestingRound = "Round 2";
                                    testRound.A2Q2Samples = counterRound1.ToString();
                                    testRound.Status = "Open";

                                    //Display base on selected option
                                    if (indexSelectedHeaderR2[0] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay1 = sampleSelection.DisplayHeaderR21;
                                        testRound.ContentDisplay1 = (retData[indexSelectedHeaderR2[0]] != null ? retData[indexSelectedHeaderR2[0]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2={indexSelectedHeaderR2[0]} | ContentDisplay1: {testRound.ContentDisplay1}");
                                    }

                                    if (indexSelectedHeaderR2[1] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay2 = sampleSelection.DisplayHeaderR22;
                                        testRound.ContentDisplay2 = (retData[indexSelectedHeaderR2[1]] != null ? retData[indexSelectedHeaderR2[1]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2={indexSelectedHeaderR2[1]} | ContentDisplay2: {testRound.ContentDisplay2}");
                                    }

                                    if (indexSelectedHeaderR2[2] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay3 = sampleSelection.DisplayHeaderR23;
                                        testRound.ContentDisplay3 = (retData[indexSelectedHeaderR2[2]] != null ? retData[indexSelectedHeaderR2[2]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2={indexSelectedHeaderR2[2]} | ContentDisplay3: {testRound.ContentDisplay3}");
                                    }

                                    if (indexSelectedHeaderR2[3] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay4 = sampleSelection.DisplayHeaderR24;
                                        testRound.ContentDisplay4 = (retData[indexSelectedHeaderR2[3]] != null ? retData[indexSelectedHeaderR2[3]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2={indexSelectedHeaderR2[3]} | ContentDisplay4: {testRound.ContentDisplay4}");
                                    }

                                    if (indexSelectedHeaderR2[4] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay5 = sampleSelection.DisplayHeaderR25;
                                        testRound.ContentDisplay5 = (retData[indexSelectedHeaderR2[4]] != null ? retData[indexSelectedHeaderR2[4]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2={indexSelectedHeaderR2[4]} | ContentDisplay5: {testRound.ContentDisplay5}");
                                    }
                                    if (indexSelectedHeaderR2[5] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay6 = sampleSelection.DisplayHeaderR26;
                                        testRound.ContentDisplay6 = (retData[indexSelectedHeaderR2[5]] != null ? retData[indexSelectedHeaderR2[5]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[5]={indexSelectedHeaderR2[5]} | HeaderRoundDisplay6={sampleSelection.DisplayHeaderR26}");
                                    }
                                    if (indexSelectedHeaderR2[6] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay7 = sampleSelection.DisplayHeaderR27;
                                        testRound.ContentDisplay7 = (retData[indexSelectedHeaderR2[6]] != null ? retData[indexSelectedHeaderR2[6]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[6]={indexSelectedHeaderR2[6]} | HeaderRoundDisplay7={sampleSelection.DisplayHeaderR27}");
                                    }
                                    if (indexSelectedHeaderR2[7] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay8 = sampleSelection.DisplayHeaderR28;
                                        testRound.ContentDisplay8 = (retData[indexSelectedHeaderR2[7]] != null ? retData[indexSelectedHeaderR2[7]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[7]={indexSelectedHeaderR2[7]} | HeaderRoundDisplay8={sampleSelection.DisplayHeaderR28}");
                                    }
                                    if (indexSelectedHeaderR2[8] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay9 = sampleSelection.DisplayHeaderR29;
                                        testRound.ContentDisplay9 = (retData[indexSelectedHeaderR2[8]] != null ? retData[indexSelectedHeaderR2[8]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[8]={indexSelectedHeaderR2[8]} | HeaderRoundDisplay9={sampleSelection.DisplayHeaderR29}");
                                    }
                                    if (indexSelectedHeaderR2[9] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay10 = sampleSelection.DisplayHeaderR210;
                                        testRound.ContentDisplay10 = (retData[indexSelectedHeaderR2[9]] != null ? retData[indexSelectedHeaderR2[9]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[9]={indexSelectedHeaderR2[9]} | HeaderRoundDisplay10={sampleSelection.DisplayHeaderR210}");
                                    }
                                    if (indexSelectedHeaderR2[10] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay11 = sampleSelection.DisplayHeaderR211;
                                        testRound.ContentDisplay11 = (retData[indexSelectedHeaderR2[10]] != null ? retData[indexSelectedHeaderR2[10]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[10]={indexSelectedHeaderR2[10]} | HeaderRoundDisplay11={sampleSelection.DisplayHeaderR211}");
                                    }
                                    if (indexSelectedHeaderR2[11] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay12 = sampleSelection.DisplayHeaderR212;
                                        testRound.ContentDisplay12 = (retData[indexSelectedHeaderR2[11]] != null ? retData[indexSelectedHeaderR2[11]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[11]={indexSelectedHeaderR2[11]} | HeaderRoundDisplay12={sampleSelection.DisplayHeaderR212}");
                                    }
                                    if (indexSelectedHeaderR2[12] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay13 = sampleSelection.DisplayHeaderR213;
                                        testRound.ContentDisplay13 = (retData[indexSelectedHeaderR2[12]] != null ? retData[indexSelectedHeaderR2[12]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[12]={indexSelectedHeaderR2[12]} | HeaderRoundDisplay13={sampleSelection.DisplayHeaderR213}");
                                    }
                                    if (indexSelectedHeaderR2[13] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay14 = sampleSelection.DisplayHeaderR214;
                                        testRound.ContentDisplay14 = (retData[indexSelectedHeaderR2[13]] != null ? retData[indexSelectedHeaderR2[13]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[13]={indexSelectedHeaderR2[13]} | HeaderRoundDisplay14={sampleSelection.DisplayHeaderR214}");
                                    }
                                    if (indexSelectedHeaderR2[14] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay15 = sampleSelection.DisplayHeaderR215;
                                        testRound.ContentDisplay15 = (retData[indexSelectedHeaderR2[14]] != null ? retData[indexSelectedHeaderR2[14]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[14]={indexSelectedHeaderR2[14]} | HeaderRoundDisplay15={sampleSelection.DisplayHeaderR215}");
                                    }
                                    if (indexSelectedHeaderR2[15] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay16 = sampleSelection.DisplayHeaderR216;
                                        testRound.ContentDisplay16 = (retData[indexSelectedHeaderR2[15]] != null ? retData[indexSelectedHeaderR2[15]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[15]={indexSelectedHeaderR2[15]} | HeaderRoundDisplay16={sampleSelection.DisplayHeaderR216}");
                                    }
                                    if (indexSelectedHeaderR2[16] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay17 = sampleSelection.DisplayHeaderR217;
                                        testRound.ContentDisplay17 = (retData[indexSelectedHeaderR2[16]] != null ? retData[indexSelectedHeaderR2[16]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[16]={indexSelectedHeaderR2[16]} | HeaderRoundDisplay17={sampleSelection.DisplayHeaderR217}");
                                    }
                                    if (indexSelectedHeaderR2[17] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay18 = sampleSelection.DisplayHeaderR218;
                                        testRound.ContentDisplay18 = (retData[indexSelectedHeaderR2[17]] != null ? retData[indexSelectedHeaderR2[17]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[17]={indexSelectedHeaderR2[17]} | HeaderRoundDisplay18={sampleSelection.DisplayHeaderR218}");
                                    }
                                    if (indexSelectedHeaderR2[18] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay19 = sampleSelection.DisplayHeaderR219;
                                        testRound.ContentDisplay19 = (retData[indexSelectedHeaderR2[18]] != null ? retData[indexSelectedHeaderR2[18]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[18]={indexSelectedHeaderR2[18]} | HeaderRoundDisplay19={sampleSelection.DisplayHeaderR219}");
                                    }
                                    if (indexSelectedHeaderR2[19] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay20 = sampleSelection.DisplayHeaderR220;
                                        testRound.ContentDisplay20 = (retData[indexSelectedHeaderR2[19]] != null ? retData[indexSelectedHeaderR2[19]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR2[19]={indexSelectedHeaderR2[19]} | HeaderRoundDisplay20={sampleSelection.DisplayHeaderR220}");
                                    }


                                    //sampleSelection.ListTestRound.Add(testRound);
                                    //tempUnique.Add(retData[retData.Count - 2]);

                                    if (isSpecificRow && testRound.ContentDisplay1 != null && testRound.ContentDisplay1 != string.Empty)
                                    {
                                        var checkTestRoundExists = sampleSelection.ListTestRound.Where(x => x.ContentDisplay1.Equals(testRound.ContentDisplay1)).FirstOrDefault();
                                        if (checkTestRoundExists == null) //check if it exists in list of test round
                                        {
                                            var updateList = sampleSelection.ListTestRound.FirstOrDefault(x => x.A2Q2Samples.Equals(index.ToString()));
                                            if (updateList != null)
                                            {
                                                updateList.Date = testRound.Date;
                                                updateList.MonthOnly = testRound.MonthOnly;
                                                updateList.WeeklyOnly = testRound.WeeklyOnly;
                                                updateList.HeaderRoundDisplay1 = testRound.HeaderRoundDisplay1;
                                                updateList.ContentDisplay1 = testRound.ContentDisplay1;
                                                updateList.HeaderRoundDisplay2 = testRound.HeaderRoundDisplay2;
                                                updateList.ContentDisplay2 = testRound.ContentDisplay2;
                                                updateList.HeaderRoundDisplay3 = testRound.HeaderRoundDisplay3;
                                                updateList.ContentDisplay3 = testRound.ContentDisplay3;
                                                updateList.HeaderRoundDisplay4 = testRound.HeaderRoundDisplay4;
                                                updateList.ContentDisplay4 = testRound.ContentDisplay4;
                                                updateList.HeaderRoundDisplay5 = testRound.HeaderRoundDisplay5;
                                                updateList.ContentDisplay5 = testRound.ContentDisplay5;
                                                updateList.HeaderRoundDisplay6 = testRound.HeaderRoundDisplay6;
                                                updateList.ContentDisplay6 = testRound.ContentDisplay6;
                                                updateList.HeaderRoundDisplay7 = testRound.HeaderRoundDisplay7;
                                                updateList.ContentDisplay7 = testRound.ContentDisplay7;
                                                updateList.HeaderRoundDisplay8 = testRound.HeaderRoundDisplay8;
                                                updateList.ContentDisplay8 = testRound.ContentDisplay8;
                                                updateList.HeaderRoundDisplay9 = testRound.HeaderRoundDisplay9;
                                                updateList.ContentDisplay9 = testRound.ContentDisplay9;
                                                updateList.HeaderRoundDisplay10 = testRound.HeaderRoundDisplay10;
                                                updateList.ContentDisplay10 = testRound.ContentDisplay10;
                                                updateList.HeaderRoundDisplay11 = testRound.HeaderRoundDisplay11;
                                                updateList.ContentDisplay11 = testRound.ContentDisplay11;
                                                updateList.HeaderRoundDisplay12 = testRound.HeaderRoundDisplay12;
                                                updateList.ContentDisplay12 = testRound.ContentDisplay12;
                                                updateList.HeaderRoundDisplay13 = testRound.HeaderRoundDisplay13;
                                                updateList.ContentDisplay13 = testRound.ContentDisplay13;
                                                updateList.HeaderRoundDisplay14 = testRound.HeaderRoundDisplay14;
                                                updateList.ContentDisplay14 = testRound.ContentDisplay14;
                                                updateList.HeaderRoundDisplay15 = testRound.HeaderRoundDisplay15;
                                                updateList.ContentDisplay15 = testRound.ContentDisplay15;
                                                updateList.HeaderRoundDisplay16 = testRound.HeaderRoundDisplay16;
                                                updateList.ContentDisplay16 = testRound.ContentDisplay16;
                                                updateList.HeaderRoundDisplay17 = testRound.HeaderRoundDisplay17;
                                                updateList.ContentDisplay17 = testRound.ContentDisplay17;
                                                updateList.HeaderRoundDisplay18 = testRound.HeaderRoundDisplay18;
                                                updateList.ContentDisplay18 = testRound.ContentDisplay18;
                                                updateList.HeaderRoundDisplay19 = testRound.HeaderRoundDisplay19;
                                                updateList.ContentDisplay19 = testRound.ContentDisplay19;
                                                updateList.HeaderRoundDisplay20 = testRound.HeaderRoundDisplay20;
                                                updateList.ContentDisplay20 = testRound.ContentDisplay20;
                                                break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sampleSelection.ListTestRound.Add(testRound);
                                        tempUnique.Add(retData[retData.Count - 2]);
                                    }

                                    System.Diagnostics.Debug.WriteLine($"Counter {counterRound2}: {sampleSelection.SamplesByRound2}");

                                    //if (tempListUniqueContent1.Count > 0)
                                    //    tempListUniqueContent1.RemoveAt(0);
                                }
                                else
                                {
                                    System.Diagnostics.Debug.WriteLine($"Temp Unique Exists Round 2: {retData[retData.Count - 2]}");
                                }
                            }
                            else
                            {
                                break;
                            }


                        }
                    }

                }

                isGenerated = true;
                #endregion

            }
            else
            {
                toastService.ShowError($"An error occurred in Generating Round 2");
            }




            SortTestRound();
            this.StateHasChanged();
        }

    }

    //generate random test round 3
    private void GenerateRound3(bool isSpecificRow, int index)
    {
        if (StartDate3 != null && sampleSelection.AnnualSampleSize != null)
        {
            Random random = new Random();
            //decimal totalRound = 0;
            //int round3 = 0;

            if (!isSpecificRow)
                RemoveTestRound("Round 3");

            int workDaysRound3 = (int)GetWorkingDays(sampleSelection.Round3Start.Value.DateTime, sampleSelection.Round3End.Value.DateTime);

            if (version != "3" && workDaysRound3 > sampleSelection.SamplesByRound3)
            {
                #region Round 3 Random
                int counterRound1 = sampleSelection.SamplesByRound1 + sampleSelection.SamplesByRound2;
                int counterRound3 = isSpecificRow ? sampleSelection.SamplesByRound3 - 1 : 0;
                while (counterRound3 != sampleSelection.SamplesByRound3)
                {
                    TimeSpan timeSpan = sampleSelection.Round3End.Value - sampleSelection.Round3Start.Value;
                    TimeSpan newSpan = new TimeSpan(0, random.Next(0, (int)timeSpan.TotalMinutes), 0);
                    DateTime newDate = sampleSelection.Round3Start.Value.DateTime + newSpan;

                    //Check if no duplicate date exists in list
                    if (!sampleSelection.ListTestRound.Any(x => x.Date.Value.ToString("MM/dd/yyyy").Contains(newDate.ToString("MM/dd/yyyy")))
                        && newDate.DayOfWeek != DayOfWeek.Saturday
                        && newDate.DayOfWeek != DayOfWeek.Sunday)
                    {
                        counterRound1++;
                        counterRound3++;
                        TestRound testRound = new TestRound();
                        testRound.TestingRound = "Round 3";
                        testRound.A2Q2Samples = counterRound1.ToString();
                        testRound.Date = newDate;
                        testRound.MonthOnly = newDate.ToString("MMMM");
                        testRound.WeeklyOnly = newDate.AddDays(-(int)newDate.DayOfWeek + (int)DayOfWeek.Monday).ToString("MM/dd/yyyy");
                        testRound.Status = "Open";
                        //sampleSelection.ListTestRound.Add(testRound);
                        if (isSpecificRow)
                        {
                            var updateList = sampleSelection.ListTestRound.FirstOrDefault(x => x.A2Q2Samples.Equals(index.ToString()));
                            if (updateList != null)
                            {
                                updateList.Date = testRound.Date;
                                updateList.MonthOnly = testRound.MonthOnly;
                                updateList.WeeklyOnly = testRound.WeeklyOnly;
                            }
                        }
                        else
                            sampleSelection.ListTestRound.Add(testRound);
                    }
                }

                isGenerated = true;
                #endregion
            }

            else if (version == "3"
                && sampleSelection.PopulationByRound2 >= sampleSelection.SamplesByRound2
                && sampleSelection.AnnualPopulation != null
                && sampleSelection.AnnualSampleSize != null
                && sampleSelection.Frequency != string.Empty
                && listPopulationContent3 != null)
            {

                //System.Diagnostics.Debug.WriteLine($"if ({sampleSelection.PopulationByRound3} >= {sampleSelection.SamplesByRound3})");
                //System.Diagnostics.Debug.WriteLine($"Annual Population: {sampleSelection.AnnualPopulation}");
                //System.Diagnostics.Debug.WriteLine($"Annual SampleSize: {sampleSelection.AnnualSampleSize}");
                //System.Diagnostics.Debug.WriteLine($"Frequency: {sampleSelection.Frequency}");
                //System.Diagnostics.Debug.WriteLine($"isMateriality: {sampleSelection.IsMateriality}");

                #region Round 3 Random Transactional and Materiality
                int counterRound1 = sampleSelection.SamplesByRound1 + sampleSelection.SamplesByRound2;
                int counterRound3 = isSpecificRow ? sampleSelection.SamplesByRound3 - 1 : 0;

                List<string> tempUnique = new List<string>();
                List<List<string>> tempListUniqueContent3 = new List<List<string>>();
                List<List<string>> tempSort = new List<List<string>>();
                List<List<string>> tempList = new List<List<string>>();
                if (indexConsiderMat[2] != -1)
                {
                    //tempSort = SortListDesc(listPopulationContent3, indexConsiderMat[2]).ToList();
                    tempList = SelectionService.GetListPopulationContentAsync(listPopulationContent3);
                    tempSort = SortListDesc(tempList, indexConsiderMat[2]).ToList();
                    tempSort = SelectionService.GetListPopulationContentUnique2Async(tempSort);
                }
                else
                {
                    tempSort.AddRange(listPopulationContent3);
                }

                tempListUniqueContent3.AddRange(tempSort);

                if (tempListUniqueContent3 != null && tempListUniqueContent3.Count > 0)
                {
                    IEnumerable<List<string>> rawData;
                    if (sampleSelection.IsMateriality != "Yes")
                    {
                        //var rawData = tempListUniqueContent3.OrderBy(x => random.Next()).Take(sampleSelection.SamplesByRound3);

                        if (!isSpecificRow)
                        {
                            rawData = tempListUniqueContent3.OrderBy(x => random.Next()).Take(sampleSelection.SamplesByRound3);
                        }
                        else
                        {
                            rawData = tempListUniqueContent3.OrderBy(x => random.Next());
                        }

                        foreach (var retData in rawData)
                        {
                            retData.FirstOrDefault();
                            if (!tempUnique.Contains(retData[retData.Count - 2]))
                            {
                                counterRound1++;
                                counterRound3++;
                                TestRound testRound = new TestRound();
                                testRound.TestingRound = "Round 3";
                                testRound.A2Q2Samples = counterRound1.ToString();
                                testRound.Status = "Open";

                                //Display base on selected option
                                if (indexSelectedHeaderR3[0] >= 0)
                                {
                                    testRound.HeaderRoundDisplay1 = sampleSelection.DisplayHeaderR31;
                                    testRound.ContentDisplay1 = (retData[indexSelectedHeaderR3[0]] != null ? retData[indexSelectedHeaderR3[0]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR3[0]={indexSelectedHeaderR3[0]} | HeaderRoundDisplay1={sampleSelection.DisplayHeaderR31}");
                                }

                                if (indexSelectedHeaderR3[1] >= 0)
                                {
                                    testRound.HeaderRoundDisplay2 = sampleSelection.DisplayHeaderR32;
                                    testRound.ContentDisplay2 = (retData[indexSelectedHeaderR3[1]] != null ? retData[indexSelectedHeaderR3[1]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR3[1]={indexSelectedHeaderR3[1]} | HeaderRoundDisplay2={sampleSelection.DisplayHeaderR32}");
                                }

                                if (indexSelectedHeaderR3[2] >= 0)
                                {
                                    testRound.HeaderRoundDisplay3 = sampleSelection.DisplayHeaderR33;
                                    testRound.ContentDisplay3 = (retData[indexSelectedHeaderR3[2]] != null ? retData[indexSelectedHeaderR3[2]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR3[2]={indexSelectedHeaderR3[2]} | HeaderRoundDisplay3={sampleSelection.DisplayHeaderR33}");
                                }

                                if (indexSelectedHeaderR3[3] >= 0)
                                {
                                    testRound.HeaderRoundDisplay4 = sampleSelection.DisplayHeaderR34;
                                    testRound.ContentDisplay4 = (retData[indexSelectedHeaderR3[3]] != null ? retData[indexSelectedHeaderR3[3]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR3[3]={indexSelectedHeaderR3[3]} | HeaderRoundDisplay4={sampleSelection.DisplayHeaderR34}");
                                }

                                if (indexSelectedHeaderR3[4] >= 0)
                                {
                                    testRound.HeaderRoundDisplay5 = sampleSelection.DisplayHeaderR35;
                                    testRound.ContentDisplay5 = (retData[indexSelectedHeaderR3[4]] != null ? retData[indexSelectedHeaderR3[4]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR3[4]={indexSelectedHeaderR3[4]} | HeaderRoundDisplay5={sampleSelection.DisplayHeaderR35}");
                                }
                                if (indexSelectedHeaderR3[5] >= 0)
                                {
                                    testRound.HeaderRoundDisplay6 = sampleSelection.DisplayHeaderR36;
                                    testRound.ContentDisplay6 = (retData[indexSelectedHeaderR3[5]] != null ? retData[indexSelectedHeaderR3[5]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[5]={indexSelectedHeaderR3[5]} | HeaderRoundDisplay6={sampleSelection.DisplayHeaderR36}");
                                }
                                if (indexSelectedHeaderR3[6] >= 0)
                                {
                                    testRound.HeaderRoundDisplay7 = sampleSelection.DisplayHeaderR37;
                                    testRound.ContentDisplay7 = (retData[indexSelectedHeaderR3[6]] != null ? retData[indexSelectedHeaderR3[6]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[6]={indexSelectedHeaderR3[6]} | HeaderRoundDisplay7={sampleSelection.DisplayHeaderR37}");
                                }
                                if (indexSelectedHeaderR3[7] >= 0)
                                {
                                    testRound.HeaderRoundDisplay8 = sampleSelection.DisplayHeaderR38;
                                    testRound.ContentDisplay8 = (retData[indexSelectedHeaderR3[7]] != null ? retData[indexSelectedHeaderR3[7]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[7]={indexSelectedHeaderR3[7]} | HeaderRoundDisplay8={sampleSelection.DisplayHeaderR38}");
                                }
                                if (indexSelectedHeaderR3[8] >= 0)
                                {
                                    testRound.HeaderRoundDisplay9 = sampleSelection.DisplayHeaderR29;
                                    testRound.ContentDisplay9 = (retData[indexSelectedHeaderR3[8]] != null ? retData[indexSelectedHeaderR3[8]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR3[8]={indexSelectedHeaderR3[8]} | HeaderRoundDisplay9={sampleSelection.DisplayHeaderR39}");
                                }
                                if (indexSelectedHeaderR3[9] >= 0)
                                {
                                    testRound.HeaderRoundDisplay10 = sampleSelection.DisplayHeaderR310;
                                    testRound.ContentDisplay10 = (retData[indexSelectedHeaderR3[9]] != null ? retData[indexSelectedHeaderR3[9]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[9]={indexSelectedHeaderR3[9]} | HeaderRoundDisplay10={sampleSelection.DisplayHeaderR310}");
                                }
                                if (indexSelectedHeaderR3[10] >= 0)
                                {
                                    testRound.HeaderRoundDisplay11 = sampleSelection.DisplayHeaderR311;
                                    testRound.ContentDisplay11 = (retData[indexSelectedHeaderR3[10]] != null ? retData[indexSelectedHeaderR3[10]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[10]={indexSelectedHeaderR3[10]} | HeaderRoundDisplay11={sampleSelection.DisplayHeaderR311}");
                                }
                                if (indexSelectedHeaderR3[11] >= 0)
                                {
                                    testRound.HeaderRoundDisplay12 = sampleSelection.DisplayHeaderR312;
                                    testRound.ContentDisplay12 = (retData[indexSelectedHeaderR3[11]] != null ? retData[indexSelectedHeaderR3[11]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[11]={indexSelectedHeaderR3[11]} | HeaderRoundDisplay12={sampleSelection.DisplayHeaderR312}");
                                }
                                if (indexSelectedHeaderR3[12] >= 0)
                                {
                                    testRound.HeaderRoundDisplay13 = sampleSelection.DisplayHeaderR313;
                                    testRound.ContentDisplay13 = (retData[indexSelectedHeaderR3[12]] != null ? retData[indexSelectedHeaderR3[12]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[12]={indexSelectedHeaderR3[12]} | HeaderRoundDisplay13={sampleSelection.DisplayHeaderR313}");
                                }
                                if (indexSelectedHeaderR3[13] >= 0)
                                {
                                    testRound.HeaderRoundDisplay14 = sampleSelection.DisplayHeaderR314;
                                    testRound.ContentDisplay14 = (retData[indexSelectedHeaderR3[13]] != null ? retData[indexSelectedHeaderR3[13]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[13]={indexSelectedHeaderR3[13]} | HeaderRoundDisplay14={sampleSelection.DisplayHeaderR314}");
                                }
                                if (indexSelectedHeaderR3[14] >= 0)
                                {
                                    testRound.HeaderRoundDisplay15 = sampleSelection.DisplayHeaderR315;
                                    testRound.ContentDisplay15 = (retData[indexSelectedHeaderR3[14]] != null ? retData[indexSelectedHeaderR3[14]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[14]={indexSelectedHeaderR3[14]} | HeaderRoundDisplay15={sampleSelection.DisplayHeaderR315}");
                                }
                                if (indexSelectedHeaderR3[15] >= 0)
                                {
                                    testRound.HeaderRoundDisplay16 = sampleSelection.DisplayHeaderR316;
                                    testRound.ContentDisplay16 = (retData[indexSelectedHeaderR3[15]] != null ? retData[indexSelectedHeaderR3[15]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[15]={indexSelectedHeaderR3[15]} | HeaderRoundDisplay16={sampleSelection.DisplayHeaderR316}");
                                }
                                if (indexSelectedHeaderR3[16] >= 0)
                                {
                                    testRound.HeaderRoundDisplay17 = sampleSelection.DisplayHeaderR317;
                                    testRound.ContentDisplay17 = (retData[indexSelectedHeaderR3[16]] != null ? retData[indexSelectedHeaderR3[16]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[16]={indexSelectedHeaderR3[16]} | HeaderRoundDisplay17={sampleSelection.DisplayHeaderR317}");
                                }
                                if (indexSelectedHeaderR3[17] >= 0)
                                {
                                    testRound.HeaderRoundDisplay18 = sampleSelection.DisplayHeaderR318;
                                    testRound.ContentDisplay18 = (retData[indexSelectedHeaderR3[17]] != null ? retData[indexSelectedHeaderR3[17]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[17]={indexSelectedHeaderR3[17]} | HeaderRoundDisplay18={sampleSelection.DisplayHeaderR318}");
                                }
                                if (indexSelectedHeaderR3[18] >= 0)
                                {
                                    testRound.HeaderRoundDisplay19 = sampleSelection.DisplayHeaderR319;
                                    testRound.ContentDisplay19 = (retData[indexSelectedHeaderR3[18]] != null ? retData[indexSelectedHeaderR3[18]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[18]={indexSelectedHeaderR3[18]} | HeaderRoundDisplay19={sampleSelection.DisplayHeaderR319}");
                                }
                                if (indexSelectedHeaderR3[19] >= 0)
                                {
                                    testRound.HeaderRoundDisplay20 = sampleSelection.DisplayHeaderR320;
                                    testRound.ContentDisplay20 = (retData[indexSelectedHeaderR3[19]] != null ? retData[indexSelectedHeaderR3[19]] : string.Empty);
                                    System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[19]={indexSelectedHeaderR3[19]} | HeaderRoundDisplay20={sampleSelection.DisplayHeaderR320}");
                                }


                                //sampleSelection.ListTestRound.Add(testRound);
                                //tempUnique.Add(retData[retData.Count - 2]);

                                if (isSpecificRow && testRound.ContentDisplay1 != null && testRound.ContentDisplay1 != string.Empty)
                                {
                                    var checkTestRoundExists = sampleSelection.ListTestRound.Where(x => x.ContentDisplay1.Equals(testRound.ContentDisplay1)).FirstOrDefault();
                                    if (checkTestRoundExists == null) //check if it exists in list of test round
                                    {
                                        var updateList = sampleSelection.ListTestRound.FirstOrDefault(x => x.A2Q2Samples.Equals(index.ToString()));
                                        if (updateList != null)
                                        {
                                            updateList.Date = testRound.Date;
                                            updateList.MonthOnly = testRound.MonthOnly;
                                            updateList.WeeklyOnly = testRound.WeeklyOnly;
                                            updateList.HeaderRoundDisplay1 = testRound.HeaderRoundDisplay1;
                                            updateList.ContentDisplay1 = testRound.ContentDisplay1;
                                            updateList.HeaderRoundDisplay2 = testRound.HeaderRoundDisplay2;
                                            updateList.ContentDisplay2 = testRound.ContentDisplay2;
                                            updateList.HeaderRoundDisplay3 = testRound.HeaderRoundDisplay3;
                                            updateList.ContentDisplay3 = testRound.ContentDisplay3;
                                            updateList.HeaderRoundDisplay4 = testRound.HeaderRoundDisplay4;
                                            updateList.ContentDisplay4 = testRound.ContentDisplay4;
                                            updateList.HeaderRoundDisplay5 = testRound.HeaderRoundDisplay5;
                                            updateList.ContentDisplay5 = testRound.ContentDisplay5;
                                            updateList.HeaderRoundDisplay6 = testRound.HeaderRoundDisplay6;
                                            updateList.ContentDisplay6 = testRound.ContentDisplay6;
                                            updateList.HeaderRoundDisplay7 = testRound.HeaderRoundDisplay7;
                                            updateList.ContentDisplay7 = testRound.ContentDisplay7;
                                            updateList.HeaderRoundDisplay8 = testRound.HeaderRoundDisplay8;
                                            updateList.ContentDisplay8 = testRound.ContentDisplay8;
                                            updateList.HeaderRoundDisplay9 = testRound.HeaderRoundDisplay9;
                                            updateList.ContentDisplay9 = testRound.ContentDisplay9;
                                            updateList.HeaderRoundDisplay10 = testRound.HeaderRoundDisplay10;
                                            updateList.ContentDisplay10 = testRound.ContentDisplay10;
                                            updateList.HeaderRoundDisplay11 = testRound.HeaderRoundDisplay11;
                                            updateList.ContentDisplay11 = testRound.ContentDisplay11;
                                            updateList.HeaderRoundDisplay12 = testRound.HeaderRoundDisplay12;
                                            updateList.ContentDisplay12 = testRound.ContentDisplay12;
                                            updateList.HeaderRoundDisplay13 = testRound.HeaderRoundDisplay13;
                                            updateList.ContentDisplay13 = testRound.ContentDisplay13;
                                            updateList.HeaderRoundDisplay14 = testRound.HeaderRoundDisplay14;
                                            updateList.ContentDisplay14 = testRound.ContentDisplay14;
                                            updateList.HeaderRoundDisplay15 = testRound.HeaderRoundDisplay15;
                                            updateList.ContentDisplay15 = testRound.ContentDisplay15;
                                            updateList.HeaderRoundDisplay16 = testRound.HeaderRoundDisplay16;
                                            updateList.ContentDisplay16 = testRound.ContentDisplay16;
                                            updateList.HeaderRoundDisplay17 = testRound.HeaderRoundDisplay17;
                                            updateList.ContentDisplay17 = testRound.ContentDisplay17;
                                            updateList.HeaderRoundDisplay18 = testRound.HeaderRoundDisplay18;
                                            updateList.ContentDisplay18 = testRound.ContentDisplay18;
                                            updateList.HeaderRoundDisplay19 = testRound.HeaderRoundDisplay19;
                                            updateList.ContentDisplay19 = testRound.ContentDisplay19;
                                            updateList.HeaderRoundDisplay20 = testRound.HeaderRoundDisplay20;
                                            updateList.ContentDisplay20 = testRound.ContentDisplay20;
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    sampleSelection.ListTestRound.Add(testRound);
                                    tempUnique.Add(retData[retData.Count - 2]);
                                }

                                System.Diagnostics.Debug.WriteLine($"Counter {counterRound3}: {sampleSelection.SamplesByRound3}");

                                //if (tempListUniqueContent1.Count > 0)
                                //    tempListUniqueContent1.RemoveAt(0);

                                //tempListUniqueContent1 = await SelectionService.RemoveItemListUnique(tempListUniqueContent1, index.Value);
                            }
                            else
                            {
                                System.Diagnostics.Debug.WriteLine($"Temp Unique Exists Round 2: {retData[retData.Count - 2]}");
                            }
                        }
                    }
                    else
                    {
                        //we only get the first row in the list of unique content
                        //var rawData = tempListUniqueContent3.Take(sampleSelection.SamplesByRound3);
                        //var rawData = tempListUniqueContent3;

                        if (isSpecificRow)
                        {
                            tempListUniqueContent3.RemoveAt(index);
                            counterRound3 = 0;
                        }

                        rawData = tempListUniqueContent3;

                        foreach (var retData in rawData)
                        {
                            if (counterRound3 != sampleSelection.SamplesByRound3)
                            {
                                retData.FirstOrDefault();
                                if (!tempUnique.Contains(retData[retData.Count - 2]))
                                {
                                    counterRound1++;
                                    counterRound3++;
                                    TestRound testRound = new TestRound();
                                    testRound.TestingRound = "Round 3";
                                    testRound.A2Q2Samples = counterRound1.ToString();
                                    testRound.Status = "Open";

                                    //Display base on selected option
                                    if (indexSelectedHeaderR3[0] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay1 = sampleSelection.DisplayHeaderR31;
                                        testRound.ContentDisplay1 = (retData[indexSelectedHeaderR3[0]] != null ? retData[indexSelectedHeaderR3[0]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR3={indexSelectedHeaderR3[0]}");
                                    }

                                    if (indexSelectedHeaderR3[1] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay2 = sampleSelection.DisplayHeaderR32;
                                        testRound.ContentDisplay2 = (retData[indexSelectedHeaderR3[1]] != null ? retData[indexSelectedHeaderR3[1]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3={indexSelectedHeaderR3[1]}");
                                    }

                                    if (indexSelectedHeaderR3[2] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay3 = sampleSelection.DisplayHeaderR33;
                                        testRound.ContentDisplay3 = (retData[indexSelectedHeaderR3[2]] != null ? retData[indexSelectedHeaderR3[2]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3={indexSelectedHeaderR3[2]}");
                                    }

                                    if (indexSelectedHeaderR3[3] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay4 = sampleSelection.DisplayHeaderR34;
                                        testRound.ContentDisplay4 = (retData[indexSelectedHeaderR3[3]] != null ? retData[indexSelectedHeaderR3[3]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3={indexSelectedHeaderR3[3]}");
                                    }

                                    if (indexSelectedHeaderR3[4] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay5 = sampleSelection.DisplayHeaderR35;
                                        testRound.ContentDisplay5 = (retData[indexSelectedHeaderR3[4]] != null ? retData[indexSelectedHeaderR3[4]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3={indexSelectedHeaderR3[4]}");
                                    }
                                    if (indexSelectedHeaderR3[5] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay6 = sampleSelection.DisplayHeaderR36;
                                        testRound.ContentDisplay6 = (retData[indexSelectedHeaderR3[5]] != null ? retData[indexSelectedHeaderR3[5]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[5]={indexSelectedHeaderR3[5]} | HeaderRoundDisplay6={sampleSelection.DisplayHeaderR36}");
                                    }
                                    if (indexSelectedHeaderR3[6] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay7 = sampleSelection.DisplayHeaderR37;
                                        testRound.ContentDisplay7 = (retData[indexSelectedHeaderR3[6]] != null ? retData[indexSelectedHeaderR3[6]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[6]={indexSelectedHeaderR3[6]} | HeaderRoundDisplay7={sampleSelection.DisplayHeaderR37}");
                                    }
                                    if (indexSelectedHeaderR3[7] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay8 = sampleSelection.DisplayHeaderR38;
                                        testRound.ContentDisplay8 = (retData[indexSelectedHeaderR3[7]] != null ? retData[indexSelectedHeaderR3[7]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[7]={indexSelectedHeaderR3[7]} | HeaderRoundDisplay8={sampleSelection.DisplayHeaderR38}");
                                    }
                                    if (indexSelectedHeaderR3[8] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay9 = sampleSelection.DisplayHeaderR29;
                                        testRound.ContentDisplay9 = (retData[indexSelectedHeaderR3[8]] != null ? retData[indexSelectedHeaderR3[8]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 2: indexSelectedHeaderR3[8]={indexSelectedHeaderR3[8]} | HeaderRoundDisplay9={sampleSelection.DisplayHeaderR39}");
                                    }
                                    if (indexSelectedHeaderR3[9] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay10 = sampleSelection.DisplayHeaderR310;
                                        testRound.ContentDisplay10 = (retData[indexSelectedHeaderR3[9]] != null ? retData[indexSelectedHeaderR3[9]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[9]={indexSelectedHeaderR3[9]} | HeaderRoundDisplay10={sampleSelection.DisplayHeaderR310}");
                                    }
                                    if (indexSelectedHeaderR3[10] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay11 = sampleSelection.DisplayHeaderR311;
                                        testRound.ContentDisplay11 = (retData[indexSelectedHeaderR3[10]] != null ? retData[indexSelectedHeaderR3[10]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[10]={indexSelectedHeaderR3[10]} | HeaderRoundDisplay11={sampleSelection.DisplayHeaderR311}");
                                    }
                                    if (indexSelectedHeaderR3[11] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay12 = sampleSelection.DisplayHeaderR312;
                                        testRound.ContentDisplay12 = (retData[indexSelectedHeaderR3[11]] != null ? retData[indexSelectedHeaderR3[11]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[11]={indexSelectedHeaderR3[11]} | HeaderRoundDisplay12={sampleSelection.DisplayHeaderR312}");
                                    }
                                    if (indexSelectedHeaderR3[12] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay13 = sampleSelection.DisplayHeaderR313;
                                        testRound.ContentDisplay13 = (retData[indexSelectedHeaderR3[12]] != null ? retData[indexSelectedHeaderR3[12]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[12]={indexSelectedHeaderR3[12]} | HeaderRoundDisplay13={sampleSelection.DisplayHeaderR313}");
                                    }
                                    if (indexSelectedHeaderR3[13] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay14 = sampleSelection.DisplayHeaderR314;
                                        testRound.ContentDisplay14 = (retData[indexSelectedHeaderR3[13]] != null ? retData[indexSelectedHeaderR3[13]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[13]={indexSelectedHeaderR3[13]} | HeaderRoundDisplay14={sampleSelection.DisplayHeaderR314}");
                                    }
                                    if (indexSelectedHeaderR3[14] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay15 = sampleSelection.DisplayHeaderR315;
                                        testRound.ContentDisplay15 = (retData[indexSelectedHeaderR3[14]] != null ? retData[indexSelectedHeaderR3[14]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[14]={indexSelectedHeaderR3[14]} | HeaderRoundDisplay15={sampleSelection.DisplayHeaderR315}");
                                    }
                                    if (indexSelectedHeaderR3[15] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay16 = sampleSelection.DisplayHeaderR316;
                                        testRound.ContentDisplay16 = (retData[indexSelectedHeaderR3[15]] != null ? retData[indexSelectedHeaderR3[15]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[15]={indexSelectedHeaderR3[15]} | HeaderRoundDisplay16={sampleSelection.DisplayHeaderR316}");
                                    }
                                    if (indexSelectedHeaderR3[16] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay17 = sampleSelection.DisplayHeaderR317;
                                        testRound.ContentDisplay17 = (retData[indexSelectedHeaderR3[16]] != null ? retData[indexSelectedHeaderR3[16]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[16]={indexSelectedHeaderR3[16]} | HeaderRoundDisplay17={sampleSelection.DisplayHeaderR317}");
                                    }
                                    if (indexSelectedHeaderR3[17] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay18 = sampleSelection.DisplayHeaderR318;
                                        testRound.ContentDisplay18 = (retData[indexSelectedHeaderR3[17]] != null ? retData[indexSelectedHeaderR3[17]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[17]={indexSelectedHeaderR3[17]} | HeaderRoundDisplay18={sampleSelection.DisplayHeaderR318}");
                                    }
                                    if (indexSelectedHeaderR3[18] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay19 = sampleSelection.DisplayHeaderR319;
                                        testRound.ContentDisplay19 = (retData[indexSelectedHeaderR3[18]] != null ? retData[indexSelectedHeaderR3[18]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[18]={indexSelectedHeaderR3[18]} | HeaderRoundDisplay19={sampleSelection.DisplayHeaderR319}");
                                    }
                                    if (indexSelectedHeaderR3[19] >= 0)
                                    {
                                        testRound.HeaderRoundDisplay20 = sampleSelection.DisplayHeaderR320;
                                        testRound.ContentDisplay20 = (retData[indexSelectedHeaderR3[19]] != null ? retData[indexSelectedHeaderR3[19]] : string.Empty);
                                        System.Diagnostics.Debug.WriteLine($"GenerateRound 3: indexSelectedHeaderR3[19]={indexSelectedHeaderR3[19]} | HeaderRoundDisplay20={sampleSelection.DisplayHeaderR320}");
                                    }


                                    //sampleSelection.ListTestRound.Add(testRound);
                                    //tempUnique.Add(retData[retData.Count - 2]);

                                    if (isSpecificRow && testRound.ContentDisplay1 != null && testRound.ContentDisplay1 != string.Empty)
                                    {
                                        var checkTestRoundExists = sampleSelection.ListTestRound.Where(x => x.ContentDisplay1.Equals(testRound.ContentDisplay1)).FirstOrDefault();
                                        if (checkTestRoundExists == null) //check if it exists in list of test round
                                        {
                                            var updateList = sampleSelection.ListTestRound.FirstOrDefault(x => x.A2Q2Samples.Equals(index.ToString()));
                                            if (updateList != null)
                                            {
                                                updateList.Date = testRound.Date;
                                                updateList.MonthOnly = testRound.MonthOnly;
                                                updateList.WeeklyOnly = testRound.WeeklyOnly;
                                                updateList.HeaderRoundDisplay1 = testRound.HeaderRoundDisplay1;
                                                updateList.ContentDisplay1 = testRound.ContentDisplay1;
                                                updateList.HeaderRoundDisplay2 = testRound.HeaderRoundDisplay2;
                                                updateList.ContentDisplay2 = testRound.ContentDisplay2;
                                                updateList.HeaderRoundDisplay3 = testRound.HeaderRoundDisplay3;
                                                updateList.ContentDisplay3 = testRound.ContentDisplay3;
                                                updateList.HeaderRoundDisplay4 = testRound.HeaderRoundDisplay4;
                                                updateList.ContentDisplay4 = testRound.ContentDisplay4;
                                                updateList.HeaderRoundDisplay5 = testRound.HeaderRoundDisplay5;
                                                updateList.ContentDisplay5 = testRound.ContentDisplay5;
                                                updateList.HeaderRoundDisplay6 = testRound.HeaderRoundDisplay6;
                                                updateList.ContentDisplay6 = testRound.ContentDisplay6;
                                                updateList.HeaderRoundDisplay7 = testRound.HeaderRoundDisplay7;
                                                updateList.ContentDisplay7 = testRound.ContentDisplay7;
                                                updateList.HeaderRoundDisplay8 = testRound.HeaderRoundDisplay8;
                                                updateList.ContentDisplay8 = testRound.ContentDisplay8;
                                                updateList.HeaderRoundDisplay9 = testRound.HeaderRoundDisplay9;
                                                updateList.ContentDisplay9 = testRound.ContentDisplay9;
                                                updateList.HeaderRoundDisplay10 = testRound.HeaderRoundDisplay10;
                                                updateList.ContentDisplay10 = testRound.ContentDisplay10;
                                                updateList.HeaderRoundDisplay11 = testRound.HeaderRoundDisplay11;
                                                updateList.ContentDisplay11 = testRound.ContentDisplay11;
                                                updateList.HeaderRoundDisplay12 = testRound.HeaderRoundDisplay12;
                                                updateList.ContentDisplay12 = testRound.ContentDisplay12;
                                                updateList.HeaderRoundDisplay13 = testRound.HeaderRoundDisplay13;
                                                updateList.ContentDisplay13 = testRound.ContentDisplay13;
                                                updateList.HeaderRoundDisplay14 = testRound.HeaderRoundDisplay14;
                                                updateList.ContentDisplay14 = testRound.ContentDisplay14;
                                                updateList.HeaderRoundDisplay15 = testRound.HeaderRoundDisplay15;
                                                updateList.ContentDisplay15 = testRound.ContentDisplay15;
                                                updateList.HeaderRoundDisplay16 = testRound.HeaderRoundDisplay16;
                                                updateList.ContentDisplay16 = testRound.ContentDisplay16;
                                                updateList.HeaderRoundDisplay17 = testRound.HeaderRoundDisplay17;
                                                updateList.ContentDisplay17 = testRound.ContentDisplay17;
                                                updateList.HeaderRoundDisplay18 = testRound.HeaderRoundDisplay18;
                                                updateList.ContentDisplay18 = testRound.ContentDisplay18;
                                                updateList.HeaderRoundDisplay19 = testRound.HeaderRoundDisplay19;
                                                updateList.ContentDisplay19 = testRound.ContentDisplay19;
                                                updateList.HeaderRoundDisplay20 = testRound.HeaderRoundDisplay20;
                                                updateList.ContentDisplay20 = testRound.ContentDisplay20;
                                                break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sampleSelection.ListTestRound.Add(testRound);
                                        tempUnique.Add(retData[retData.Count - 2]);
                                    }

                                    System.Diagnostics.Debug.WriteLine($"Counter {counterRound3}: {sampleSelection.SamplesByRound2}");

                                    //if (tempListUniqueContent1.Count > 0)
                                    //    tempListUniqueContent1.RemoveAt(0);
                                }
                                else
                                {
                                    System.Diagnostics.Debug.WriteLine($"Temp Unique Exists Round 2: {retData[retData.Count - 2]}");
                                }
                            }
                            else
                            {
                                break;
                            }


                        }

                    }

                }

                isGenerated = true;
                #endregion

            }
            else
            {
                toastService.ShowError($"An error occurred in Generating Round 3");
            }

            SortTestRound();
            this.StateHasChanged();
        }


    }

    private void NewData()
    {
        JSRuntime.InvokeAsync<object>("SampleSelectionReset");
        //sampleSelection = new SampleSelection();
        sampleSelection.ListRefId = new List<TestRoundSampleSelectionReference>();
        sampleSelection.ListTestRound = new List<TestRound>();

        randomValue = string.Empty;
        fileName = string.Empty;
        isGenerated = false;

        indexConsiderMat = new int[] { -1, -1, -1 };
        indexSelectedHeaderR1 = new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        indexSelectedHeaderR2 = new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        indexSelectedHeaderR3 = new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };

        StartDate1 = null;
        StartDate2 = null;
        StartDate3 = null;
        EndDate1 = null;
        EndDate2 = null;
        EndDate3 = null;

        listPopulation1 = new List<List<string>>();
        listDropdownPop1 = new List<string>();
        listDropdownPop2 = new List<string>();
        listPopulation2 = new List<List<string>>();
        listDropdownPop3 = new List<string>();
        listPopulation3 = new List<List<string>>();

        isDisableMateriality = true;
        activeMateriality = 0;

        this.StateHasChanged();
    }

    private void ResetTM()
    {
        JSRuntime.InvokeAsync<object>("SampleSelectionResetFile");
        indexConsiderMat = new int[] { -1, -1, -1 };
        indexSelectedHeaderR1 = new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        indexSelectedHeaderR2 = new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        indexSelectedHeaderR3 = new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        listPopulation1 = new List<List<string>>();
        listDropdownPop1 = new List<string>();
        listDropdownPop2 = new List<string>();
        listPopulation2 = new List<List<string>>();
        listDropdownPop3 = new List<string>();
        listPopulation3 = new List<List<string>>();
        activeMateriality = 0;
    }

    //sort test round list
    private void SortTestRound()
    {
        if (sampleSelection.ListTestRound.Count > 0)
        {
            sampleSelection.ListTestRound = sampleSelection.ListTestRound.OrderBy(x => x.TestingRound).ToList();
            sampleSelection.PopulationByRoundTot = sampleSelection.PopulationByRound1
                + sampleSelection.PopulationByRound2
                + sampleSelection.PopulationByRound3;
            sampleSelection.SamplesByRoundTot = sampleSelection.SamplesByRound1
               + sampleSelection.SamplesByRound2
               + sampleSelection.SamplesByRound3;
            System.Diagnostics.Debug.WriteLine($"Test Round List Sorted: true");
        }
    }

    private void DownloadExcelFile()
    {

        try
        {
            if (fileName != string.Empty)
            {
                //ClientSettings settings = new ClientSettings();
                JSRuntime.InvokeAsync<object>("DownloadFile", $"api/SampleSelection/download/" + fileName);
            }
        }
        catch (Exception ex)
        {
            randomValue = ex.ToString();
            //throw;
        }

    }

    private string DownloadExcelFile2(string fileName)
    {
        return $"{NavigationManager.BaseUri}api/SampleSelection/download/{fileName}";
    }

    //this function will create excel file and save data in podio
    private async void SaveData()
    {
        if (sampleSelection.PodioItemId == 0)
        {

            //WriteLog writeLog = new WriteLog();
            //writeLog.Display(sampleSelection);

            randomValue = "Creating Excel";
            sampleSelection.Version = version;

            #region Create Excel
            //create excel file and set download link
            var excelResponse = await SelectionService.CreateExcelAsync(sampleSelection, Http);
            //var excelResponse = await SelectionService.SampleSelectionTest(sampleSelection);

            if (excelResponse.StatusCode.ToString() == "OK")
            {
                fileName = excelResponse.Content.ReadAsStringAsync().Result.ToString();
                randomValue = fileName;
                //Console.WriteLine("error:" + fileName);

            }
            else
            {
                randomValue = "Failed to create excel output";
                toastService.ShowError("Failed to create excel output");
            }

            //manually refresh UI
            this.StateHasChanged();
            #endregion

            #region Podio Save
            //Create podio test round

            var podioRoundResponse = await SelectionService.CreatePodioTestRoundAsync(sampleSelection, Http);
            if (podioRoundResponse.StatusCode.ToString() == "OK")
            {
                //fileName = excelResponse.Content.ReadAsStringAsync().Result.ToString();
                //randomValue = fileName;
                string result = podioRoundResponse.Content.ReadAsStringAsync().Result.ToString();
                sampleSelection.ListTestRound = JsonConvert.DeserializeObject<List<TestRound>>(result);

                StringBuilder createdItemId = new StringBuilder();
                foreach (var item in sampleSelection.ListTestRound)
                {
                    createdItemId.Append($"{item.PodioItemId},");
                    //sampleSelection.ListTestRound
                    //    .Where(x => x.PodioItemId == 0 && x.A2Q2Samples == item)
                    //    .Select(i => { i.PodioItemId = item.PodioItemID; return i; })
                    //    .FirstOrDefault();
                }

                randomValue = $"Testing Rounds Id: {createdItemId.ToString()}";

                //manually refresh UI
                this.StateHasChanged();

                if (sampleSelection.ListTestRound != null)
                {
                    //Crete podio sample selection and add test round as reference app
                    var podioSampleResponse = await SelectionService.CreatePodioSampleSelectionAsync(sampleSelection, Http);
                    if (podioSampleResponse.StatusCode.ToString() == "OK")
                    {
                        List<string> itemId = JsonConvert.DeserializeObject<List<string>>(podioSampleResponse.Content.ReadAsStringAsync().Result.ToString());
                        randomValue = "Sample Selection Id: " + string.Join(",", itemId.ToArray());
                        int.TryParse(itemId.FirstOrDefault(), out int sampleSelectionItemId);
                        sampleSelection.PodioItemId = sampleSelectionItemId;

                        #region Database Save
                        ////Save to databse
                        //if (sampleSelection.PodioItemId > 0)
                        //{
                        //    var dataResponse = await SelectionService.SaveSampleSelectionAsync(sampleSelection, Http);
                        //    if (dataResponse.StatusCode.ToString() == "OK")
                        //    {
                        //        toastService.ShowSuccess("Successfully save to database");

                        //    }
                        //    else
                        //    {
                        //        toastService.ShowError("Failed saving to database");

                        //    }
                        //}

                        ////randomValue = Newtonsoft.Json.JsonConvert.SerializeObject(sampleSelection);
                        ////manually refresh UI
                        //this.StateHasChanged();
                        #endregion

                    }
                    else
                    {
                        //randomValue = "Failed to create podio sample selection";
                        randomValue = Newtonsoft.Json.JsonConvert.SerializeObject(sampleSelection);
                    }
                    //manually refresh UI
                    this.StateHasChanged();

                }

            }
            else
            {
                randomValue = "Failed to create podio test rounds";
                toastService.ShowError("Failed to create podio test rounds");
            }
            //manually refresh UI
            this.StateHasChanged();
            #endregion

        }
        else
        {
            toastService.ShowInfo($"Sample selection is already save, please create new sample selection");
        }

    }

    private void BackToQuestionnaire(SampleSelection sampleSelection)
    {
        //NavigationManager.NavigateTo($"questionnairegenerate/{sampleSelection.RcmPodioItemId}/{sampleSelection.PodioItemId}/{testingPhase}");
        ReturnSampleSelection.InvokeAsync(sampleSelection);
        Close();
    }

    /// <summary> Get working days between two dates (Excluding a list of dates - Holidays) </summary>
    /// <param name="startD">Current date time</param>
    /// <param name="endD">Finish date time</param>
    private double GetWorkingDays(DateTime startD, DateTime endD)
    {
        double calcBusinessDays =
        1 + ((endD - startD).TotalDays * 5 -
        (startD.DayOfWeek - endD.DayOfWeek) * 2) / 7;

        if (endD.DayOfWeek == DayOfWeek.Saturday) calcBusinessDays--;
        if (startD.DayOfWeek == DayOfWeek.Sunday) calcBusinessDays--;

        return calcBusinessDays;
    }

    private decimal Mod(decimal number, decimal divisor)
    {
        //= number - (INT(number / divisor) * divisor)
        return (number - ((int)(number / divisor) * divisor));
    }

    private IOrderedEnumerable<List<string>> SortListDesc(List<List<string>> listContent, int index)
    {
        IOrderedEnumerable<List<string>> listSortedContent;

        List<string> number = new List<string>();


        //listSortedContent = listContent.OrderByDescending(x => x[index]);
        int maxlen = listContent.Max(x => x[index].Length);
        System.Diagnostics.Debug.WriteLine($"MaxLen = {maxlen}");
        listSortedContent = listContent.OrderByDescending(x => x[index].PadLeft(maxlen, '0')).ThenBy(c => c[index]);

        //listSortedContent = listSortedContent.OrderByDescending(x => x[index].PadLeft(maxlen, '0'));

        //Console.WriteLine($"====================AFTER====================");
        //row = 0;
        //foreach (var item in listSortedContent)
        //{
        //    column = 0;
        //    StringBuilder sb;
        //    foreach (var innerItem in item)
        //    {
        //        sb = new StringBuilder();
        //        if (column == 14)
        //        {
        //            sb.Append(innerItem + " | ");
        //        }
        //        else if (column == 27)
        //        {
        //            sb.Append(innerItem);
        //            Console.WriteLine($"{sb.ToString()}");
        //        }
        //        column++;
        //    }
        //    row++;
        //}

        return listSortedContent;


    }

    private IOrderedEnumerable<List<string>> SortListDesc2(List<List<string>> listContent, int index)
    {
        IOrderedEnumerable<List<string>> listSortedContent;

        //listSortedContent = listContent.OrderByDescending(x => x[index]);
        int maxlen = listContent.Max(x => x[index].Length);
        System.Diagnostics.Debug.WriteLine($"MaxLen = {maxlen}");
        listSortedContent = listContent.OrderByDescending(x => x[index].PadLeft(maxlen, '0')).ThenBy(c => c[index]);


        System.Diagnostics.Debug.WriteLine($"====================AFTER====================");
        //int row = 0;
        foreach (var item in listSortedContent)
        {

            System.Diagnostics.Debug.WriteLine($"[{item[27]}] : {item[12]}");

            //int column = 0;
            //StringBuilder sb = new StringBuilder();
            //foreach (var innerItem in item)
            //{
            //    if (column == 14)
            //    {
            //        sb.Append($"{innerItem} |");
            //    }
            //    else if (column == 27)
            //    {
            //        sb.Append($"{innerItem}");
            //    }
            //    column++;
            //}
            //Console.WriteLine($"{sb.ToString()}");
            //row++;
        }

        return listSortedContent;


    }

    private async void Initialize()
    {
        try
        {
            //settings = await _getSettings;
            //RcmService = new RcmService(settings);
            //SelectionService = new SampleSelectionService(settings);
            //set isgenerated toggle to false
            isGenerated = false;
            isDisableMateriality = true;

            //switch (roundName)
            //{
            //    case "Round 1":
            //        sampleSelection = sampleSelection1;
            //        sampleSelection.Version = version;
            //        break;
            //    case "Round 2":
            //        sampleSelection = sampleSelection2;
            //        sampleSelection.Version = version;
            //        break;
            //    case "Round 3":
            //        sampleSelection = sampleSelection3;
            //        sampleSelection.Version = version;

            //        break;
            //}

            //get samplesize value(s) and save in list
            listSampleSize = await SelectionService.SetSampleSizeAsync(Http);

            //get dropdown value(s) and save in list
            listDropDown = await SelectionService.SetDropDownAsync(Http);

            ////get client and save in list
            ListClient = await SelectionService.SetClientAsync(Http);

            ////get frequency and save in list
            ///ListFrequency = new List<Frequency>();
            ListFrequency = await SelectionService.SetFrequencyAsync(Http);

            ////get risk and save in list
            ListRisk = await SelectionService.SetRiskAsync(Http);

            //get Q4R3 and save in list (Yes or No)
            ListQ4R3 = await SelectionService.SetQ4R3Async(Http);

            listPopulation1 = new List<List<string>>();
            listPopulation2 = new List<List<string>>();
            listPopulation3 = new List<List<string>>();

            SetTitle();

            if (rcm != null)
            {
                sampleSelection.ClientName = rcm.ClientName;
                //sampleSelection.Risk = rcm.RiskLvl;
                //sampleSelection.Frequency = rcm.ControlFrequency;
                sampleSelection.Risk = selectedRisk;
                sampleSelection.Frequency = selectedFrequency2;
            }

            if (sampleSelection != null)
            {
                sampleSelection.RcmPodioItemId = rcm.PodioItemId;
                sampleSelection.IsMateriality = string.Empty;

                ////initialize test round
                //sampleSelection.ListTestRound = new List<TestRound>();

                if (sampleSelection.ClientName != null && sampleSelection.ClientName != string.Empty)
                {
                    System.Diagnostics.Debug.WriteLine($"SetClient: {sampleSelection.ClientName}");
                    if (ListClient != null && ListClient.Any())
                    {
                        //var clientTemp = ListClient.Where(x => x.ClientName.Equals(sampleSelection.ClientName)).FirstOrDefault();
                        var clientTemp = ListClient.Where(client => client.ClientName == sampleSelection.ClientName).FirstOrDefault();
                        if (clientTemp != null)
                        {
                            await JSRuntime.InvokeAsync<object>($"SetClient", sampleSelection.ClientName);
                            ChangeEventArgs clientEventArgs = new ChangeEventArgs();
                            clientEventArgs.Value = sampleSelection.ClientName;
                            SetCategoryClient(clientEventArgs);
                        }

                        //this.StateHasChanged();
                    }

                }

                if (sampleSelection.Risk != null && sampleSelection.Risk != string.Empty)
                {
                    if (ListRisk != null && ListRisk.Contains(sampleSelection.Risk))
                    {
                        await JSRuntime.InvokeAsync<object>($"SetRisk", sampleSelection.Risk);
                        ChangeEventArgs riskEventArgs = new ChangeEventArgs();
                        riskEventArgs.Value = sampleSelection.Risk;
                        SetRisk(riskEventArgs);
                        this.StateHasChanged();
                    }
                }

                if (sampleSelection.Frequency != null && sampleSelection.Frequency != string.Empty)
                {
                    if (ListFrequency != null && ListFrequency.FirstOrDefault(x => x.Freq.Equals(sampleSelection.Frequency)) != null)
                    {
                        await JSRuntime.InvokeAsync<object>($"SetFrequency", sampleSelection.Frequency);
                        ChangeEventArgs frequencyEventArgs = new ChangeEventArgs();
                        frequencyEventArgs.Value = sampleSelection.Frequency;
                        SetCategoryFrequency(frequencyEventArgs);
                        this.StateHasChanged();
                    }
                }

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{ex}");
            //throw;
        }


        this.StateHasChanged();
    }

    private void ReturnRegenData(RegenerateData generate)
    {
        if (generate != null) //verify if not null
        {
            //regenerate all data
            if (generate.IsAll)
            {
                ComputeRound(false, 0);
            }
            //regenerate specific index
            else
            {
                ComputeRound(true, generate.Index);
            }
        }
    }


    private bool display = false;

    public void Show()
    {
        this.display = true;
        Initialize();
        this.StateHasChanged();
    }

    public void Close()
    {
        this.display = false;
        this.StateHasChanged();
    }

    private void GetDate(DateRangeSelected dtSelected, int round)
    {
        if (dtSelected != null)
        {
            switch (round)
            {
                case 1:

                    if (dtSelected.startDate.HasValue)
                    {
                        StartDate1 = dtSelected.startDate.Value;
                        sampleSelection.Round1Start = dtSelected.startDate.Value;
                    }

                    if (dtSelected.endDate.HasValue)
                    {
                        EndDate1 = dtSelected.endDate.Value;
                        sampleSelection.Round1End = dtSelected.endDate.Value;
                    }

                    if (sampleSelection.Round1Start != null && sampleSelection.Round1End != null)
                    {
                        roundSelected = 1;
                        ComputeRound(false, 0);
                    }
                    break;
                case 2:
                    if (dtSelected.startDate.HasValue)
                    {
                        StartDate2 = dtSelected.startDate.Value;
                        sampleSelection.Round2Start = dtSelected.startDate.Value;
                    }

                    if (dtSelected.endDate.HasValue)
                    {
                        EndDate2 = dtSelected.endDate.Value;
                        sampleSelection.Round2End = dtSelected.endDate.Value;
                    }

                    if (sampleSelection.Round2Start != null && sampleSelection.Round2End != null)
                    {
                        roundSelected = 2;
                        ComputeRound(false, 0);
                    }
                    break;
                case 3:
                    if (dtSelected.startDate.HasValue)
                    {
                        StartDate3 = dtSelected.startDate.Value;
                        sampleSelection.Round3Start = dtSelected.startDate.Value;
                    }

                    if (dtSelected.endDate.HasValue)
                    {
                        EndDate3 = dtSelected.endDate.Value;
                        sampleSelection.Round3End = dtSelected.endDate.Value;
                    }

                    if (sampleSelection.Round3Start != null && sampleSelection.Round3End != null)
                    {
                        roundSelected = 3;
                        ComputeRound(false, 0);
                    }
                    break;
            }
            System.Diagnostics.Debug.WriteLine($"Return Start Date: {dtSelected.startDate.Value.ToString()}");
            System.Diagnostics.Debug.WriteLine($"Return End Date: {dtSelected.endDate.Value.ToString()}");
        }

        this.StateHasChanged();
    }

}
