@using BlazorDateRangePicker
@using A2B_App.Client.Services
@using A2B_App.Shared.Podio
@using A2B_App.Shared.Sox 
@inject IToastService toastService
@inject Task<ClientSettings> _getSettings
@inject HttpClient Http
@using A2B_App.Shared.User 


@if (display && email != string.Empty)
{
    <div class="modal is-active">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">@title</p>
                <button class="delete" aria-label="close" @onclick="SetReturnValue"></button>
            </header>
            <section class="modal-card-body">

                <div class="@messageClass">
                    <button class="delete" @onclick="HideNotification"></button>
                    @message
                </div>

                <div class="simple-form">

                    <article class="message @hideClass">
                        <div class="message-body">
                            Do you wish to delete user with email <strong>@email</strong>.
                        </div>
                    </article>

                </div>

            </section>
            <footer class="modal-card-foot">
                <button class="button is-danger @hideClass" @onclick="DeleteUser">Delete User</button>
                <button class="button" c>@cancelBtnLabel</button>
            </footer>
        </div>
    </div>

    

}




@code {

    //[Parameter] public EventCallback<AppUser> ReturnValue { get; set; }
    [Parameter] public string title { get; set; }
    [Parameter] public string email { get; set; }
    [Parameter] public EventCallback<bool> ReturnValue { get; set; }


    private AdminService adminService;
    private ClientSettings settings;
    private HttpResponseMessage httpResponseMessage { get; set; }
    public AppUser appUser { get; set; }
    private DateTimeOffset? startDate { get; set; } = null;
    private DateTimeOffset? endDate { get; set; } = null;
    //private string confirmPassword = null;
    private string message { get; set; }
    private string messageClass { get; set; }
    private string hideClass { get; set; }
    private string cancelBtnLabel { get; set; }
    private bool isSuccess { get; set; }

    protected override Task OnParametersSetAsync()
    {
        Initialize();
        return base.OnParametersSetAsync();
    }

    protected override Task OnInitializedAsync()
    {
        Initialize();
        return base.OnInitializedAsync();
    }

    private async void Initialize()
    {
        cancelBtnLabel = "Cancel";

        if (title != null && email != string.Empty)
        {
            appUser = new AppUser();
            appUser.Email = email;
            //Set default password
            appUser.Password = "123Qwe!!";
            appUser.ConfirmPassword = appUser.Password;
            hideClass = string.Empty;
        }
        HideNotification();
        settings = await _getSettings;
        adminService = new AdminService(settings);

    }

    private void SetReturnValue()
    {
        ReturnValue.InvokeAsync(isSuccess);
        Close();
    }

    private async void DeleteUser()
    {
        var result = await adminService.UserManagement(appUser, Http, title);
        var httpResponse = result.Item1;
        if (httpResponse.StatusCode.ToString() == "OK")
        {
            try
            {
                hideClass = "is-hidden";
                cancelBtnLabel = "Close";
                ShowSuccessNotification("Sucessfully deleted User");

            }
            catch (Exception ex)
            {
                ShowErrorNotification($"Error deleting user {ex.ToString()}");
            }

        }
        else
        {
            ShowErrorNotification("Error deleting user");
        }
        this.StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        System.Diagnostics.Debug.WriteLine("OnValidSubmit");
        DeleteUser();
        this.StateHasChanged();
    }


    private async void ShowSuccessNotification(string notifMessage)
    {
        messageClass = "notification is-success";
        message = notifMessage;
        this.StateHasChanged();
        await Task.Delay(3000);
        isSuccess = true;
        SetReturnValue();
    }

    private async void ShowErrorNotification(string notifMessage)
    {
        messageClass = "notification is-danger";
        message = notifMessage;
        this.StateHasChanged();
        await Task.Delay(3000);
        HideNotification();
    }

    private void HideNotification()
    {
        messageClass = "is-hidden";
        this.StateHasChanged();
    }

    private bool display = false;

    public void Show()
    {
        this.display = true;
        this.StateHasChanged();
    }

    public void Close()
    {
        this.display = false;
        this.StateHasChanged();
    }

}
