@using BlazorInputFile
@using A2B_App.Shared.Sox

<div class="row">
    <div class="col-12">
        <div class="dropzone @dropClass rounded">
            <InputFile id="fileInput" multiple title=""
                       OnChange="HandleFileInputChange"
                       accept="image/png,image/gif,image/jpeg"
                       @ondragenter="HandleDragEnter"
                       @ondragleave="HandleDragLeave" />
            Upload image
        </div>
        @if ((fileTypeError || fileSizeError))
        {
            <ul class="validation-errors mb-0">
                @if (fileTypeError)
                {
                    <li class="validation-message">Only image files are accepted.</li>
                }
                @if (fileSizeError)
                {
                    <li class="validation-message">The max file size is @MaxFileSizeMB MB.</li>
                }
            </ul>
        }
        @if (selectedFiles != null)
        {
            @*<div class="col-12">
                <ul>
                    @foreach (var file in selectedFiles)
                    {
                        <li>
                            @file.Name
                            <button class="btn btn-link text-danger p-0 pl-1" type="button"
                                    @onclick="@(e => RemoveFile(file))">
                                <small class="align-text-bottom">Remove</small>
                            </button>
                        </li>
                    }

                    <li>
                        @selectedFiles.Name
                        <button class="btn btn-link text-danger p-0 pl-1" type="button"
                                @onclick="@(e => RemoveFile(selectedFiles))">
                            <small class="align-text-bottom">Remove</small>
                        </button>
                    </li>

                </ul>
            </div>*@
        }
    </div>
</div>

@code {
    const int MaxFileSizeMB = 5;
    const int MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB
    private string dropClass = "";
    private bool fileSizeError = false;
    private bool fileTypeError = false;
    //private List<IFileListEntry> selectedFiles = new List<IFileListEntry>();
    private IFileListEntry selectedFiles;
    [Parameter] public EventCallback<FileUpload> ReturnFiles { get; set; }
    [Parameter] public int position { get; set; }
    [Parameter] public bool enable { get; set; }

    private void HandleDragEnter()
    {
        dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        dropClass = string.Empty;
    }

    private void HandleFileInputChange(IFileListEntry[] files)
    {
        if(enable)
        {
            dropClass = string.Empty;
            fileSizeError = false;
            fileTypeError = false;
            List<string> acceptedFileTypes = new List<string>() { "image/png", "image/jpeg", "image/gif" };
            if (files != null)
            {
                foreach (var file in files)
                {
                    bool error = false;
                    if (file.Size > MaxFileSize)
                    {
                        error = true;
                        fileSizeError = true;
                    }

                    if (!acceptedFileTypes.Contains(file.Type))
                    {
                        error = true;
                        fileTypeError = true;
                    }

                    //keep the good files
                    if (!error)
                    {
                        //selectedFiles.Add(file);
                        selectedFiles = file;
                        ReturnFileUpload(selectedFiles);
                    }
                }
            }
        }

    }

    private void RemoveFile(IFileListEntry file)
    {
        //selectedFiles.Remove(file);
        selectedFiles = null;
    }

    private void ReturnFileUpload(IFileListEntry file)
    {
        if (file != null)
        {
            FileUpload fileUpload = new FileUpload();
            fileUpload.IFileEntry = file;
            fileUpload.Position = position;
            ReturnFiles.InvokeAsync(fileUpload);
        }
    }



}