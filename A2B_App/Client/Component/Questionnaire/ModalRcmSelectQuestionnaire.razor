
@using BlazorDateRangePicker
@using A2B_App.Client.Services
@using A2B_App.Shared.Sox
@inject IJSRuntime JSRuntime
@inject Task<ClientSettings> _getSettings

@if (display && ListClient != null)
{
    <div class="modal is-active">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Filter Client</p>
                <button class="delete" aria-label="close" @onclick="Close"></button>
            </header>
            <section class="modal-card-body">
                <div class="simple-form">
                    <EditForm Model="RcmFilter">

                        @*<div class="form-group">
                                <label for="client-name">Client Name</label>
                                <input @bind="RcmFilter.ClientName" type="text" class="form-control" id="client-name" placeholder="Client Name" />
                            </div>*@

                        <div class="form-group">
                            <label for="client">Client Name</label>
                            <select id="client" @bind="ClientNameSelected" class="form-control">

                                @foreach (var item in ListClient)
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="controlName">Control Name</label>
                            <select id="controlName" @bind="ControlNameSelected" class="form-control">

                                @foreach (var item in ListControlName)
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                        </div>


                        <div class="form-group">
                            <label for="round1Range">Created Date Range</label>
                            <DateRangePicker OnRangeSelect="OnRangeSelect1" @bind-StartDate="StartDate1" @bind-EndDate="EndDate1" id="round1range" class="form-control bg-white" />
                        </div>

                    </EditForm>
                </div>
            </section>
            <footer class="modal-card-foot">
                <button class="button is-success" @onclick="@(() => { SetReturnValue(RcmFilter); })">Save changes</button>
                <button class="button" @onclick="Close">Cancel</button>
            </footer>
        </div>
    </div>

}


@code {

    [Parameter] public RcmItemFilter RcmFilter { get; set; }
    [Parameter] public List<string> ListClient { get; set; }
    [Parameter] public List<string> ListControlName { get; set; }
    [Parameter] public EventCallback<RcmItemFilter> ReturnValue { get; set; }

    DateTimeOffset? StartDate1 { get; set; } = null;
    DateTimeOffset? EndDate1 { get; set; } = null;
    private bool displayDate { get; set; } = false;
    //public List<string> ListClient { get; set; }

    private RcmService RcmService;
    private ClientSettings settings;
    private int CountListClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        settings = await _getSettings;
        RcmService = new RcmService(settings);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (RcmFilter.ClientName != null && display)
        {
            //System.Diagnostics.Debug.WriteLine($"RcmFilter.ClientName: {RcmFilter.ClientName}");
            //await JSRuntime.InvokeAsync<object>("SetCategoryElementById2", "client", RcmFilter.ClientName);
            //SetCategoryClientName();
            //System.Diagnostics.Debug.WriteLine($"RcmFilter.ClientName: {RcmFilter.ClientName}");


            //ChangeEventArgs clientEventArgs = new ChangeEventArgs();
            //clientEventArgs.Value = value;
            //SetCategoryClientName(clientEventArgs);
            //await JSRuntime.InvokeAsync<object>("SetModalClient", RcmFilter.ClientName);
            this.StateHasChanged();
        }

    }

    private bool display = false;

    public void Show()
    {
        this.display = true;
        this.StateHasChanged();
    }

    public void Close()
    {
        this.display = false;
        this.StateHasChanged();
    }

    private void SetReturnValue(RcmItemFilter RcmFilter)
    {
        ReturnValue.InvokeAsync(RcmFilter);
        Close();
    }

    public void OnRangeSelect1(DateRange range)
    {
        //Use range.Start and range.End here
        //events.Add($"Range {range.Start} - {range.End} selected");
        RcmFilter.StartDate = range.Start.Date;
        RcmFilter.EndDate = range.End.Date;
    }

    private void EventCategoryClientName(ChangeEventArgs e)
    {

        if (e.Value.ToString() != string.Empty)
        {
            System.Diagnostics.Debug.WriteLine($"Selected ClientName: {e.Value}");
            RcmFilter.ClientName = e.Value.ToString();
        }

    }

    private void EventControlName(ChangeEventArgs e)
    {

        if (e.Value.ToString() != string.Empty)
        {
            System.Diagnostics.Debug.WriteLine($"Selected ControlName: {e.Value}");
            RcmFilter.ControlName = e.Value.ToString();
        }

    }

    private string ClientNameSelected
    {
        get
        {
            return RcmFilter.ClientName;
        }
        set
        {

            ChangeEventArgs clientEventArgs = new ChangeEventArgs();
            clientEventArgs.Value = value;
            EventCategoryClientName(clientEventArgs);
            //RcmFilter.ClientName = value;
        }
    }

    private string ControlNameSelected
    {
        get
        {
            return RcmFilter.ControlName;
        }
        set
        {

            ChangeEventArgs controlEventArgs = new ChangeEventArgs();
            controlEventArgs.Value = value;
            EventControlName(controlEventArgs);
            //RcmFilter.ClientName = value;
        }
    }


}
