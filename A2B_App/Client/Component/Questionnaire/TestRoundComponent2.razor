@using System.Text
@using A2B_App.Shared.Sox
@using System
@using System.IO
@using System.Net.Http.Headers
@using A2B_App.Client.Services
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (listRoundQA != null && listRoundQA.Count > 0)
{

    //table for testing attributes
    <table class="table table-active table-sm table-hover small">

        <thead>
            @if (listRoundQA != null)
            {
                <tr class="table-info">
                    <td class="align-top"><p class="has-text-weight-semibold">Sample #</p></td>

                    @foreach (var item in listRoundQA)
                    {
                        <td class="align-top">

                            @switch (item.Position)
                            {
                                case "1":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer1">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>

                                    break;

                                case "2":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer2">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>

                                    break;

                                case "3":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer3">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>

                                    break;

                                case "4":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer4">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>

                                    break;

                                case "5":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer5">
                                        <option value=""></option>
                                        @foreach (var itemchoices in SeventeenList)
                                        {
                                            <option value="@itemchoices">@itemchoices</option>
                                        }
                                    </select>

                                    break;

                                case "6":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer6">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>

                                    break;

                                case "7":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer7">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>

                                    break;

                                case "8":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer8">
                                        <option value=""></option>
                                        @foreach (var itemchoices in SeventeenList)
                                        {
                                            <option value="@itemchoices">@itemchoices</option>
                                        }
                                    </select>

                                    break;

                                case "9":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer9">
                                        <option value=""></option>
                                        @foreach (var itemchoices in SeventeenList)
                                        {
                                            <option value="@itemchoices">@itemchoices</option>
                                        }
                                    </select>

                                    break;

                                case "10":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer10">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>

                                    break;

                                case "11":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer11">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>

                                    break;

                                case "12":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer12">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>

                                    break;

                                case "13":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer13">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>


                                    break;

                                case "14":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer14">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>

                                    break;
                                case "15":

                                    <select class="form-control d-flex" @onchange="@OnChangedAnswer15">
                                        @if (listUserInput != null && listQuestion != null)
                                        {
                                            @foreach (var item2 in listQuestion)
                                            {
                                                @if (item2.QuestionString.Contains("16."))
                                                {
                                                    <option value=""></option>
                                                    @foreach (var itemchoices in SeventeenList)
                                                    {
                                                        <option value="@itemchoices">@itemchoices</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>

                                    break;
                            }

                            <p class="has-text-weight-semibold">@RemoveRT(item.Question)</p>
                            <input type="text" class="text-danger text-align-center input-inner-position-header input is-primary is-small" maxlength="8"
                                   @onchange="@((e) => {
                                                                                    OnChangeHeaderNoteEventHander(e, listHeaderNote, int.Parse(item.Position) - 1);
                                                                                })">
                        </td>

                    }
                </tr>

            }

        </thead>

        <tbody>


            @*-------------------------------------------*@
            @*Round 1*@
            @*-------------------------------------------*@
            <tr class="table-secondary">

                @if (totalCol != 0)
                {
                    //Round 1 Testing Attributes
                    <td colspan="@(totalCol)">Round 1</td>
                    <td>
                        <div class="is-pulled-right">
                            <button class="button is-link is-small" @onclick="@(() => { AddRow(1); })">
                                <span class="oi oi-plus is-small"></span>
                            </button>
                            <button class="button is-danger is-small" @onclick="@(() => { AddRow(-1); })">
                                <span class="oi oi-minus is-small"></span>
                            </button>
                        </div>
                    </td>
                }

            </tr>
            @if (listRoundItem1 != null && listRoundItem1.Count > 0)
            {
                a2q2Samples = 0;
                foreach (var item in listRoundItem1)
                {
                    a2q2Samples++;
                    item.A2Q2Samples = a2q2Samples.ToString();

                    <tr class="table-light">

                        <td style="text-align: center;">@item.A2Q2Samples</td>

                        @foreach (var roundQA in listRoundQA)
                        {
                            switch (roundQA.Position)
                            {
                                case "1":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer1 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer1 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer1 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer1;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 1); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer1"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer1"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer1"></textarea>
                                                break;
                                        }

                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note1"
                                               @onblur="UpdateNotes">

                                    </td>
                                    break;
                                case "2":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer2"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer2 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer2 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer2 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer2;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 2); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer2"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer2"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer2"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note2"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "3":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer3"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer3 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer3 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer3 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer3;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 3); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer3"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer3"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer3"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note3"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "4":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer4"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer4 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer4 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer4 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer4;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 4); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer4"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer4"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer4"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note4"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "5":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer5"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer5 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer5 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer5 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer5;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 5); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer5"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer5"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer5"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note5"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "6":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer6 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer6 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer6 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer6;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 6); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer6"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer6"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer6"></textarea>
                                                break;
                                        }

                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note6"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "7":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer7"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer7 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer7 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer7 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer7;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 7); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer7"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer7"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer7"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note7"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "8":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer8" @onblur="CheckApprovalDate"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer8 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer8 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer8 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer8;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 8); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer8"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer8"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer8"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note8"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "9":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer9"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer9 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer9 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer9 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer9;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 9); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer9"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer9"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer9"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note9"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "10":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer10" @onblur="CheckApprovalDate"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer10 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer10 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer10 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer10;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 10); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer10"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer10"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer10"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note10"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "11":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer11"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer11 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer11 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer11 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer11;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 11); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer11"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer11"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer11"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note11"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "12":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer12"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer12 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer12 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer12 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer12;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 12); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer12"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer13"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer12"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note12"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "13":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer13"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer13 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer13 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer13 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer13;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 13); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer13"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer13"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer13"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note13"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "14":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer14"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer14 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer14 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer14 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer14;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 14); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer14"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer14"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer14"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note14"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "15":
                                    <td style="">
                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer15"></textarea>*@
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem1[int.Parse(item.Position) - 1].Answer15 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem1[int.Parse(item.Position) - 1].Answer15 != string.Empty && listRoundItem1[int.Parse(item.Position) - 1].Answer15 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem1[int.Parse(item.Position) - 1].Answer15;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>
                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 1, 15); })"
                                                                                 answer1="@listRoundItem1[int.Parse(item.Position) - 1].Answer15"
                                                                                 answer2="@listRoundItem1[int.Parse(item.Position) - 1].OtherAnswer15"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem1[int.Parse(item.Position) - 1].Answer15"></textarea>
                                                break;
                                        }
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem1[int.Parse(item.Position) - 1].Note15"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                            }
                        }



                    </tr>

                }

                <tr>
                    <td></td>
                    @foreach (var item in listRoundQA)
                    {
                        <td style="">
                            <div class="form-group">
                                <DragDrop ReturnFiles="@((e) => { ReturnFiles(e); })" />
                            </div>
                        </td>

                    }
                </tr>
            }



            @*-------------------------------------------*@
            @*Round 2*@
            @*-------------------------------------------*@
            <tr class="table-secondary">

                @if (totalCol != 0)
                {
                    //Round 2 Testing Attributes
                    <td colspan="@(totalCol)">Round 2</td>
                    <td>
                        <div class="is-pulled-right">
                            <button class="button is-link is-small" @onclick="@(() => { AddRow(2); })">
                                <span class="oi oi-plus is-small"></span>
                            </button>
                            <button class="button is-danger is-small" @onclick="@(() => { AddRow(-2); })">
                                <span class="oi oi-minus is-small"></span>
                            </button>
                        </div>
                    </td>
                }
            </tr>
            @if (listRoundItem2 != null && listRoundItem2.Count > 0)
            {
                a2q2Samples = 0;
                foreach (var item in listRoundItem2)
                {
                    a2q2Samples++;
                    item.A2Q2Samples = a2q2Samples.ToString();

                    <tr class="table-light">

                        <td style="text-align: center;">@item.A2Q2Samples</td>

                        @foreach (var roundQA in listRoundQA)
                        {
                            switch (roundQA.Position)
                            {
                                case "1":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer1 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer1 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer1 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer1;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 1); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer1"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer1"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer1"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer1"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note1"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "2":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer2 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer2 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer2 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer2;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 2); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer2"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer2"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer2"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer2"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note2"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "3":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer3 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer3 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer3 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer3;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 3); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer3"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer3"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer3"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer3"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note3"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "4":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer4 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer4 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer4 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer4;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 4); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer4"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer4"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer4"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer4"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note4"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "5":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer5 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer5 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer5 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer5;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 5); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer5"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer5"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer5"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer5"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note5"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "6":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer6 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer6 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer6 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer6;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 6); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer6"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer6"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer6"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer6"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note6"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "7":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer7 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer7 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer7 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer7;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 7); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer7"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer7"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer7"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer7"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note7"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "8":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer8 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer8 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer8 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer8;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 8); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer8"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer8"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer8"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer8" @onblur="CheckApprovalDate"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note8"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "9":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer9 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer9 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer9 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer9;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 9); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer9"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer9"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer9"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer9"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note9"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "10":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer10 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer10 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer10 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer10;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 10); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer10"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer10"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer10"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer10" @onblur="CheckApprovalDate"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note10"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "11":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer11 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer11 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer11 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer11;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 11); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer11"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer11"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer11"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer11"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note11"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "12":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer12 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer12 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer12 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer12;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 12); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer12"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer12"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer12"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer12"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note12"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "13":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer13 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer13 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer13 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer13;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 13); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer13"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer13"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer13"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer13"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note13"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "14":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer14 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer14 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer14 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer14;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 14); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer14"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer14"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer14"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer14"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note14"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "15":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem2[int.Parse(item.Position) - 1].Answer15 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem2[int.Parse(item.Position) - 1].Answer15 != string.Empty && listRoundItem2[int.Parse(item.Position) - 1].Answer15 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem2[int.Parse(item.Position) - 1].Answer15;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 2, 15); })"
                                                                                 answer1="@listRoundItem2[int.Parse(item.Position) - 1].Answer15"
                                                                                 answer2="@listRoundItem2[int.Parse(item.Position) - 1].OtherAnswer15"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer15"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem2[int.Parse(item.Position) - 1].Answer15"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem2[int.Parse(item.Position) - 1].Note15"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                            }
                        }


                    </tr>

                }
                <tr>
                    <td></td>
                    @foreach (var item in listRoundQA)
                    {
                        <td style="">
                            <div class="form-group">
                                <DragDrop ReturnFiles="@((e) => { ReturnFiles(e); })" />
                            </div>
                        </td>

                    }
                </tr>

            }



            @*-------------------------------------------*@
            @*Round 3*@
            @*-------------------------------------------*@
            <tr class="table-secondary">

                @if (totalCol != 0)
                {
                    //Round 3 Testing Attributes
                    <td colspan="@(totalCol)">Round 3</td>
                    <td>
                        <div class="is-pulled-right">
                            <button class="button is-link is-small" @onclick="@(() => { AddRow(3); })">
                                <span class="oi oi-plus is-small"></span>
                            </button>
                            <button class="button is-danger is-small" @onclick="@(() => { AddRow(-3); })">
                                <span class="oi oi-minus is-small"></span>
                            </button>
                        </div>
                    </td>
                }
            </tr>
            @if (listRoundItem3 != null && listRoundItem3.Count > 0)
            {
                a2q2Samples = 0;
                foreach (var item in listRoundItem3)
                {
                    a2q2Samples++;
                    item.A2Q2Samples = a2q2Samples.ToString();

                    <tr class="table-light">

                        <td style="text-align: center;">@item.A2Q2Samples</td>

                        @foreach (var roundQA in listRoundQA)
                        {
                            switch (roundQA.Position)
                            {
                                case "1":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer1 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer1 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer1 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer1;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 1); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer1"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer1"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer1"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer1"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note1"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "2":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer2 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer2 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer2 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer2;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 2); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer2"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer2"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer2"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer2"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note2"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "3":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer3 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer3 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer3 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer3;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 3); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer3"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer3"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer3"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer3"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note3"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "4":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer4 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer4 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer4 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer4;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 4); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer4"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer4"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer4"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer4"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note4"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "5":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer5 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer5 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer5 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer5;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 5); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer5"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer5"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer5"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer5"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note5"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "6":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer6 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer6 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer6 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer6;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 6); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer6"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer6"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer6"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer6"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note6"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "7":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer7 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer7 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer7 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer7;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 7); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer7"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer7"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer7"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer7"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note7"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "8":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer8 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer8 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer8 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer8;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 8); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer8"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer8"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer8"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer8" @onblur="CheckApprovalDate"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note8"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "9":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer9 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer9 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer9 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer9;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 9); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer9"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer9"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer9"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer9"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note9"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "10":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer10 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer10 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer10 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer10;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 10); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer10"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer10"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer10"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer10" @onblur="CheckApprovalDate"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note10"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "11":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer11 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer11 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer11 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer11;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 11); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer11"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer11"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer11"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer11"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note11"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "12":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer12 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer12 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer12 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer12;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 12); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer12"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer12"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer12"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer12"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note12"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "13":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer13 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer13 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer13 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer13;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 13); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer13"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer13"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer13"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer13"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note13"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "14":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer14 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer14 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer14 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer14;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 14); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer14"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer14"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer14"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer14"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note14"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                                case "15":
                                    <td style="">
                                        @switch (roundQA.Type)
                                        {
                                            case "category":
                                                <select class="form-control" id="@TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}")"
                                                        @onchange="@((e) => {
                                                                            if (e.Value.ToString() != string.Empty)
                                                                            {
                                                                                listRoundItem3[int.Parse(item.Position) - 1].Answer15 = e.Value.ToString();
                                                                                this.StateHasChanged();
                                                                            }
                                                                        })">
                                                    @if (roundQA.Options.Count > 0)
                                                    {
                                                        <option value="">Select Option</option>
                                                        foreach (var option in roundQA.Options)
                                                        {
                                                            <option value="@(option.OptionName)">@(option.OptionName)</option>
                                                        }
                                                        @if (listRoundItem3[int.Parse(item.Position) - 1].Answer15 != string.Empty && listRoundItem3[int.Parse(item.Position) - 1].Answer15 != null)
                                                        {
                                                            UpdateElement updateElement = new UpdateElement();
                                                            updateElement.elementId = TrimElementId($"{item.RoundName}{int.Parse(item.Position) - 1}{item.A2Q2Samples}");
                                                            updateElement.elementValue = listRoundItem3[int.Parse(item.Position) - 1].Answer15;
                                                            UpdateCategoryValue(updateElement);
                                                        }
                                                    }
                                                </select>

                                                break;
                                            case "date":
                                                <QuestionnaireDateFieldComponent position="@(int.Parse(item.Position)-1)"
                                                                                 OnDateChanged="@((e) => { GetDate(e, 3, 15); })"
                                                                                 answer1="@listRoundItem3[int.Parse(item.Position) - 1].Answer15"
                                                                                 answer2="@listRoundItem3[int.Parse(item.Position) - 1].OtherAnswer15"
                                                                                 isDateRange="@(roundQA.DtEndRequire == "enabled" ? false : true)">
                                                </QuestionnaireDateFieldComponent>
                                                break;
                                            default:
                                                <textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer15"></textarea>
                                                break;
                                        }

                                        @*<textarea rows="3" class="form-control" @bind="@listRoundItem3[int.Parse(item.Position) - 1].Answer15"></textarea>*@
                                        <input type="text" class="text-danger text-align-center input-inner-position" maxlength="3"
                                               @bind-value="@listRoundItem3[int.Parse(item.Position) - 1].Note15"
                                               @onblur="UpdateNotes">
                                    </td>
                                    break;
                            }
                        }


                    </tr>

                }
                <tr>
                    <td></td>
                    @foreach (var item in listRoundQA)
                    {
                        <td style="">
                            <div class="form-group">
                                <DragDrop ReturnFiles="@((e) => { ReturnFiles(e); })" />
                            </div>
                        </td>

                    }
                </tr>
            }



        </tbody>

    </table>

    <div class="row">
        <div class="col">
            <div class="form-group">
                <GeneralNotesComponent generalNote="@generalNote" ReturnGenNote="ReturnGeneralNotesValue"></GeneralNotesComponent>

                @if (listIPENote != null && listIPENote.ListNotes != null)
                {
                    foreach (var item in listIPENote.ListNotes)
                    {
                        <button class="btn @(item.Display ? btnDanger : btnPrimary)" @onclick="@(()=> { DisplayIPE(item); })">@($"Add {item.Name}")</button>
                    }
                }

            </div>
        </div>
    </div>

    <UniqueNotes listUniqueNotes="@listUniqueNotes"></UniqueNotes>

    @*<UniqueNotes listUniqueNotes="@listUniqueNotes"
                     generalNote="@generalNote"
                     listIPENote="@listIPENote">

        </UniqueNotes>*@

}

@code {



    [Parameter] public List<NotesItem> listUniqueNotes { get; set; }
    [Parameter] public List<RoundItem> listRoundItem1 { get; set; }
    [Parameter] public List<RoundItem> listRoundItem2 { get; set; }
    [Parameter] public List<RoundItem> listRoundItem3 { get; set; }

    [Parameter] public List<RoundQA> listRoundQA { get; set; }
    [Parameter] public List<QuestionnaireUserAnswer> listUserInput { get; set; }
    [Parameter] public List<QuestionnaireQuestion> listQuestion { get; set; }

    [Parameter] public GeneralNote generalNote { get; set; }
    [Parameter] public ListIPENote listIPENote { get; set; }
    [Parameter] public List<HeaderNote> listHeaderNote { get; set; }
    [Parameter] public EventCallback<string> ReturnAddRound { get; set; }
    [Parameter] public EventCallback<FinalListUniqueNotes> ReturnNotesItem { get; set; }
    [Parameter] public EventCallback<GeneralNote> ReturnGenNotes { get; set; }
    [Parameter] public string controlId { get; set; }

    [Parameter] public string Answer1 { get; set; }
    [Parameter] public string Answer2 { get; set; }
    [Parameter] public string Answer3 { get; set; }
    [Parameter] public string Answer4 { get; set; }
    [Parameter] public string Answer5 { get; set; }
    [Parameter] public string Answer6 { get; set; }
    [Parameter] public string Answer7 { get; set; }
    [Parameter] public string Answer8 { get; set; }
    [Parameter] public string Answer9 { get; set; }
    [Parameter] public string Answer10 { get; set; }
    [Parameter] public string Answer11 { get; set; }
    [Parameter] public string Answer12 { get; set; }
    [Parameter] public string Answer13 { get; set; }
    [Parameter] public string Answer14 { get; set; }
    [Parameter] public string Answer15 { get; set; }
    [Parameter] public List<string> SeventeenList { get; set; }



    [Parameter] public EventCallback<string> Answer1Changed { get; set; }
    [Parameter] public EventCallback<string> Answer2Changed { get; set; }
    [Parameter] public EventCallback<string> Answer3Changed { get; set; }
    [Parameter] public EventCallback<string> Answer4Changed { get; set; }
    [Parameter] public EventCallback<string> Answer5Changed { get; set; }
    [Parameter] public EventCallback<string> Answer6Changed { get; set; }
    [Parameter] public EventCallback<string> Answer7Changed { get; set; }
    [Parameter] public EventCallback<string> Answer8Changed { get; set; }
    [Parameter] public EventCallback<string> Answer9Changed { get; set; }
    [Parameter] public EventCallback<string> Answer10Changed { get; set; }
    [Parameter] public EventCallback<string> Answer11Changed { get; set; }
    [Parameter] public EventCallback<string> Answer12Changed { get; set; }
    [Parameter] public EventCallback<string> Answer13Changed { get; set; }
    [Parameter] public EventCallback<string> Answer14Changed { get; set; }
    [Parameter] public EventCallback<string> Answer15Changed { get; set; }
    FileService fileService = new FileService();
    private string SeventeenA { get; set; }
    private string SeventeenB { get; set; }
    private string SeventeenC { get; set; }

    private Task OnChangedAnswer1(ChangeEventArgs e)
    {
        Answer1 = e.Value.ToString();
        return Answer1Changed.InvokeAsync(Answer1);
    }
    private Task OnChangedAnswer2(ChangeEventArgs e)
    {
        Answer2 = e.Value.ToString();
        return Answer2Changed.InvokeAsync(Answer2);
    }
    private Task OnChangedAnswer3(ChangeEventArgs e)
    {
        Answer3 = e.Value.ToString();
        return Answer3Changed.InvokeAsync(Answer3);
    }
    private Task OnChangedAnswer4(ChangeEventArgs e)
    {
        Answer4 = e.Value.ToString();
        return Answer4Changed.InvokeAsync(Answer4);
    }
    private Task OnChangedAnswer5(ChangeEventArgs e)
    {
        Answer5 = e.Value.ToString();
        return Answer5Changed.InvokeAsync(Answer5);
    }
    private Task OnChangedAnswer6(ChangeEventArgs e)
    {
        Answer6 = e.Value.ToString();
        return Answer6Changed.InvokeAsync(Answer6);
    }
    private Task OnChangedAnswer7(ChangeEventArgs e)
    {
        Answer7 = e.Value.ToString();
        return Answer7Changed.InvokeAsync(Answer7);
    }
    private Task OnChangedAnswer8(ChangeEventArgs e)
    {
        Answer8 = e.Value.ToString();
        return Answer8Changed.InvokeAsync(Answer8);
    }
    private Task OnChangedAnswer9(ChangeEventArgs e)
    {
        Answer9 = e.Value.ToString();
        return Answer9Changed.InvokeAsync(Answer9);
    }
    private Task OnChangedAnswer10(ChangeEventArgs e)
    {
        Answer10 = e.Value.ToString();
        return Answer10Changed.InvokeAsync(Answer10);
    }
    private Task OnChangedAnswer11(ChangeEventArgs e)
    {
        Answer11 = e.Value.ToString();
        return Answer11Changed.InvokeAsync(Answer11);
    }
    private Task OnChangedAnswer12(ChangeEventArgs e)
    {
        Answer12 = e.Value.ToString();
        return Answer12Changed.InvokeAsync(Answer12);
    }
    private Task OnChangedAnswer13(ChangeEventArgs e)
    {
        Answer13 = e.Value.ToString();
        return Answer13Changed.InvokeAsync(Answer13);
    }
    private Task OnChangedAnswer14(ChangeEventArgs e)
    {
        Answer14 = e.Value.ToString();
        return Answer14Changed.InvokeAsync(Answer14);
    }
    private Task OnChangedAnswer15(ChangeEventArgs e)
    {
        Answer15 = e.Value.ToString();
        return Answer15Changed.InvokeAsync(Answer15);
    }

    private int totalCol = 0;
    private int a2q2Samples { get; set; }
    private bool otherNotes { get; set; }

    private string btnDanger { get; set; } = "btn-danger";
    private string btnPrimary { get; set; } = "btn-primary";

    protected override void OnParametersSet()
    {
        Initialize();

        this.StateHasChanged();
        base.OnParametersSet();
    }
    private async void ReturnFiles(FileUpload fileUpload)
    {
        //fileUpload.IFileEntry = _file;
        if (fileUpload.IFileEntry != null)
        {
            var ms = new MemoryStream();
            await fileUpload.IFileEntry.Data.CopyToAsync(ms);

            //upload file and get response
            var response = await fileService.UploadFileAsync(ms, fileUpload.IFileEntry.Name, Http);

            if (response.StatusCode.ToString() == "OK")
            {
                listUserInput[fileUpload.Position - 1].StrAnswer = response.Content.ReadAsStringAsync().Result.ToString();
                //file = response.Content.ReadAsStringAsync().Result.ToString();
                this.StateHasChanged();
            }

        }
    }
    private void Initialize()
    {
        if (listRoundQA != null)
        {
            totalCol = listRoundQA.Count;

        }

        if (listUserInput != null && listQuestion != null)
        {
            foreach (var item2 in listQuestion)
            {
                if (item2.QuestionString.Contains("16."))
                {
                    string stringSentence = listUserInput[item2.Position - 1].StrAnswer;

                    string[] array = stringSentence.Split("B.");
                    foreach (string value in array)
                    {
                        //Console.WriteLine($"Part: {value}");
                        SeventeenA = value;
                        break;
                    }


                    string[] array2 = stringSentence.Split("B.");
                    foreach (string value in array2)
                    {
                        //Console.WriteLine($"Part: {value}");
                        if (value.Contains("A."))
                        {

                        }
                        else
                        {
                            string GetThatB = value;
                            string[] arrayNiGetThatB = GetThatB.Split("C.");
                            foreach (string value2 in arrayNiGetThatB)
                            {
                                SeventeenB = "B. " + value2;
                                break;
                            }

                        }
                    }


                    string[] arrayForC = stringSentence.Split("C.");
                    foreach (string value in arrayForC)
                    {
                        if (value.Contains("A."))
                        {

                        }
                        else
                        {
                            SeventeenC = "C. " + value;
                            break;
                        }

                    }



                }
            }
        }

    }

    private void SetUniqueNotes()
    {

        this.StateHasChanged();

    }

    private void UpdateNotes()
    {

        List<string> tempNotes = new List<string>();
        List<string> tempNotes2 = new List<string>();
        List<string> tempNotes3 = new List<string>();
        List<string> allTempNotes = new List<string>();
        List<NotesItem> tempListNotes = new List<NotesItem>();
        List<NotesItem> filterListNotes = new List<NotesItem>();

        //listUniqueNotes.Clear();
        if (listRoundItem1 != null && listRoundItem1.Count > 0)
            tempNotes = GetUniqueNotesRoundItem(listRoundItem1);
        if (listRoundItem2 != null && listRoundItem2.Count > 0)
            tempNotes2 = GetUniqueNotesRoundItem(listRoundItem2);
        if (listRoundItem3 != null && listRoundItem3.Count > 0)
            tempNotes3 = GetUniqueNotesRoundItem(listRoundItem3);

        allTempNotes = tempNotes.Concat(tempNotes2).Concat(tempNotes3).Distinct().ToList();

        //add header notes in tempListNotes
        if (listHeaderNote != null && listHeaderNote.Count > 0)
        {
            foreach (var item in listHeaderNote)
            {
                if (item.HeaderNoteText != string.Empty && item.HeaderNoteText != null)
                {
                    tempListNotes.Add(new NotesItem { Notes = item.HeaderNoteText, Description = item.Description });
                }
            }
        }

        //add tempNotes, tempNotes2, tempNotes3 in tempListNotes
        if (allTempNotes.Count > 0)
        {
            foreach (var item in allTempNotes)
            {
                if (item != string.Empty && item != null)
                {
                    tempListNotes.Add(new NotesItem { Notes = item, Description = string.Empty });
                }
            }
        }

        //add general notes directly to filterlistnotes
        if (generalNote.Display)
        {
            string genNoteDesc = listUniqueNotes.Where(x => x.Notes.ToLower().Contains("general note")).Select(x => x.Description).FirstOrDefault();
            filterListNotes.Add(new NotesItem { Notes = generalNote.GeneralNoteText, Description = genNoteDesc });
        }

        otherNotes = false;
        if (listIPENote != null && listIPENote.ListNotes != null)
        {
            foreach (var item in listIPENote.ListNotes)
            {
                if (item.Display)
                {
                    filterListNotes.Add(new NotesItem { Notes = item.Note, Description = item.Description });
                    otherNotes = true;
                }
            }
        }

        //update tempListNotes description if found in old listUniqueNotes
        foreach (var item in tempListNotes)
        {
            var update = listUniqueNotes.FirstOrDefault(x => x.Notes.Equals(item.Notes));
            if (update != null)
            {
                item.Description = update.Description;
            }
        }

        if (tempListNotes.Count > 0)
        {

            //Remove Duplicate notes
            tempListNotes = tempListNotes
                .OrderByDescending(y => y.Description)
                .ThenBy(x => x.Notes)
                .GroupBy(x => x.Notes)
                .Select(x => x.First())
                .ToList();

            //then add templistnotes
            foreach (var item in tempListNotes)
            {
                filterListNotes.Add(item);
            }

        }

        listUniqueNotes.Clear();
        if (tempListNotes.Count > 0 || generalNote.Display || otherNotes)
        {
            listUniqueNotes.AddRange(filterListNotes);
        }

        FinalListUniqueNotes finalListUniqueNotes = new FinalListUniqueNotes();
        finalListUniqueNotes.Item = listUniqueNotes;
        ReturnNotesItem.InvokeAsync(finalListUniqueNotes);

        //if(controlId == "PTP 1.1")
        //{
        //    CheckApprovalDate();
        //}

        this.StateHasChanged();
    }

    private List<string> GetUniqueNotesRoundItem(List<RoundItem> listRoundItem)
    {
        List<string> tempNotes = new List<string>();
        if (listRoundItem != null)
        {
            foreach (var item in listRoundItem)
            {
                if (item.Note1 != string.Empty)
                    tempNotes.Add(item.Note1);
                if (item.Note2 != string.Empty)
                    tempNotes.Add(item.Note2);
                if (item.Note3 != string.Empty)
                    tempNotes.Add(item.Note3);
                if (item.Note4 != string.Empty)
                    tempNotes.Add(item.Note4);
                if (item.Note5 != string.Empty)
                    tempNotes.Add(item.Note5);
                if (item.Note6 != string.Empty)
                    tempNotes.Add(item.Note6);
                if (item.Note7 != string.Empty)
                    tempNotes.Add(item.Note7);
                if (item.Note8 != string.Empty)
                    tempNotes.Add(item.Note8);
                if (item.Note9 != string.Empty)
                    tempNotes.Add(item.Note9);
                if (item.Note10 != string.Empty)
                    tempNotes.Add(item.Note10);
                if (item.Note11 != string.Empty)
                    tempNotes.Add(item.Note11);
                if (item.Note12 != string.Empty)
                    tempNotes.Add(item.Note12);
                if (item.Note13 != string.Empty)
                    tempNotes.Add(item.Note13);
                if (item.Note14 != string.Empty)
                    tempNotes.Add(item.Note14);
                if (item.Note15 != string.Empty)
                    tempNotes.Add(item.Note15);
            }
        }
        return tempNotes;
    }

    private void OnChangeEventHander(ChangeEventArgs e, List<RoundItem> listRoundItem, int position, int noteNumber)
    {

        @*@onchange="@((e)=> {
                OnChangeEventHander(e, listRoundItem1, int.Parse(item.Position) - 1, 1);

            })"*@

    switch (noteNumber)
    {
        case 1:
            listRoundItem[position].Note1 = e.Value.ToString();
            break;
        case 2:
            listRoundItem[position].Note2 = e.Value.ToString();
            break;
        case 3:
            listRoundItem[position].Note3 = e.Value.ToString();
            break;
        case 4:
            listRoundItem[position].Note4 = e.Value.ToString();
            break;
        case 5:
            listRoundItem[position].Note5 = e.Value.ToString();
            break;
        case 6:
            listRoundItem[position].Note6 = e.Value.ToString();
            break;
        case 7:
            listRoundItem[position].Note7 = e.Value.ToString();
            break;
        case 8:
            listRoundItem[position].Note8 = e.Value.ToString();
            break;
        case 9:
            listRoundItem[position].Note9 = e.Value.ToString();
            break;
        case 10:
            listRoundItem[position].Note10 = e.Value.ToString();
            break;
        case 11:
            listRoundItem[position].Note11 = e.Value.ToString();
            break;
        case 12:
            listRoundItem[position].Note12 = e.Value.ToString();
            break;
        case 13:
            listRoundItem[position].Note13 = e.Value.ToString();
            break;
        case 14:
            listRoundItem[position].Note14 = e.Value.ToString();
            break;
        case 15:
            listRoundItem[position].Note15 = e.Value.ToString();
            break;
    }

    UpdateNotes();
}

    private void OnChangeHeaderNoteEventHander(ChangeEventArgs e, List<HeaderNote> listHeaderNote, int position)
    {
        listHeaderNote[position].HeaderNoteText = e.Value.ToString();
        UpdateNotes();
    }

    private void AddRow(int i)
    {
        ReturnAddRound.InvokeAsync($"{i}");
        UpdateNotes();
    }

    private string RemoveRT(string s)
    {
        StringBuilder sb = new StringBuilder(s);

        sb.Replace("(RT)", "");
        sb.Replace("(RT2)", "");
        sb.Replace("(RT3)", "");

        return sb.ToString();
    }

    private void ReturnGeneralNotesValue(GeneralNote genNote)
    {
        if (genNote != null)
        {
            generalNote = genNote;
            UpdateNotes();
        }
    }

    private void CheckApprovalDate()
    {

        if (controlId == "PTP 1.1")
        {
            if (listRoundItem1 != null && listRoundItem1.Any())
            {
                foreach (var item in listRoundItem1)
                {

                    if (DateTime.TryParse(item.Answer8, out DateTime dateFrom) && DateTime.TryParse(item.Answer10, out DateTime dateTo))
                    {
                        if (dateTo >= dateFrom)
                        {
                            item.Answer12 = "Yes";
                        }
                        else
                        {
                            item.Answer12 = "No";
                        }
                    }
                    else
                    {
                        item.Answer12 = "No";
                    }
                }
            }

            if (listRoundItem2 != null && listRoundItem2.Any())
            {
                foreach (var item in listRoundItem2)
                {

                    if (DateTime.TryParse(item.Answer8, out DateTime dateFrom) && DateTime.TryParse(item.Answer10, out DateTime dateTo))
                    {
                        if (dateTo >= dateFrom)
                        {
                            item.Answer12 = "Yes";
                        }
                        else
                        {
                            item.Answer12 = "No";
                        }
                    }
                    else
                    {
                        item.Answer12 = "No";
                    }
                }

            }

            if (listRoundItem3 != null && listRoundItem3.Any())
            {
                foreach (var item in listRoundItem3)
                {

                    if (DateTime.TryParse(item.Answer8, out DateTime dateFrom) && DateTime.TryParse(item.Answer10, out DateTime dateTo))
                    {
                        if (dateTo >= dateFrom)
                        {
                            item.Answer12 = "Yes";
                        }
                        else
                        {
                            item.Answer12 = "No";
                        }
                    }
                    else
                    {
                        item.Answer12 = "No";
                    }
                }

            }
        }



    }

    private bool ValidateDateTime(string date)
    {
        if (DateTime.TryParse(date, out DateTime dtValue))
        {
            return true;
        }
        return false;
    }

    private void GetDate(DtQuestionnaire dtQuestionnaire, int round, int indexAnswer)
    {
        switch (round)
        {
            case 1:
                if (listRoundItem1 != null && listRoundItem1.Count > 0)
                {
                    if (dtQuestionnaire != null && dtQuestionnaire.startDate.HasValue)
                    {
                        //System.Diagnostics.Debug.WriteLine($"Return Start Date: {dtQuestionnaire.startDate.Value.ToString()}");
                        //System.Diagnostics.Debug.WriteLine($"Return Position: {dtQuestionnaire.position.ToString()}");
                        switch (indexAnswer)
                        {
                            case 1:
                                listRoundItem1[dtQuestionnaire.position].Answer1 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 2:
                                listRoundItem1[dtQuestionnaire.position].Answer2 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 3:
                                listRoundItem1[dtQuestionnaire.position].Answer3 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 4:
                                listRoundItem1[dtQuestionnaire.position].Answer4 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 5:
                                listRoundItem1[dtQuestionnaire.position].Answer5 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 6:
                                listRoundItem1[dtQuestionnaire.position].Answer6 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 7:
                                listRoundItem1[dtQuestionnaire.position].Answer7 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 8:
                                listRoundItem1[dtQuestionnaire.position].Answer8 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 9:
                                listRoundItem1[dtQuestionnaire.position].Answer9 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 10:
                                listRoundItem1[dtQuestionnaire.position].Answer10 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 11:
                                listRoundItem1[dtQuestionnaire.position].Answer11 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 12:
                                listRoundItem1[dtQuestionnaire.position].Answer12 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 13:
                                listRoundItem1[dtQuestionnaire.position].Answer13 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 14:
                                listRoundItem1[dtQuestionnaire.position].Answer14 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 15:
                                listRoundItem1[dtQuestionnaire.position].Answer15 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                        }
                    }
                    if (dtQuestionnaire != null && dtQuestionnaire.endDate.HasValue)
                    {
                        //System.Diagnostics.Debug.WriteLine($"Return End Date: {dtQuestionnaire.endDate.Value.ToString()}");
                        //System.Diagnostics.Debug.WriteLine($"Return Position: {dtQuestionnaire.position.ToString()}");
                        switch (indexAnswer)
                        {
                            case 1:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer1 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 2:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer2 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 3:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer3 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 4:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer4 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 5:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer5 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 6:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer6 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 7:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer7 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 8:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer8 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 9:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer9 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 10:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer10 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 11:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer11 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 12:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer12 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 13:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer13 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 14:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer14 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 15:
                                listRoundItem1[dtQuestionnaire.position].OtherAnswer15 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                        }
                    }
                }
                break;
            case 2:
                if (listRoundItem2 != null && listRoundItem2.Count > 0)
                {
                    if (dtQuestionnaire != null && dtQuestionnaire.startDate.HasValue)
                    {
                        //System.Diagnostics.Debug.WriteLine($"Return Start Date: {dtQuestionnaire.startDate.Value.ToString()}");
                        //System.Diagnostics.Debug.WriteLine($"Return Position: {dtQuestionnaire.position.ToString()}");
                        switch (indexAnswer)
                        {
                            case 1:
                                listRoundItem2[dtQuestionnaire.position].Answer1 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 2:
                                listRoundItem2[dtQuestionnaire.position].Answer3 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 4:
                                listRoundItem2[dtQuestionnaire.position].Answer4 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 5:
                                listRoundItem2[dtQuestionnaire.position].Answer5 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 6:
                                listRoundItem2[dtQuestionnaire.position].Answer6 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 7:
                                listRoundItem2[dtQuestionnaire.position].Answer7 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 8:
                                listRoundItem2[dtQuestionnaire.position].Answer8 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 9:
                                listRoundItem2[dtQuestionnaire.position].Answer9 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 10:
                                listRoundItem2[dtQuestionnaire.position].Answer10 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 11:
                                listRoundItem2[dtQuestionnaire.position].Answer11 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 12:
                                listRoundItem2[dtQuestionnaire.position].Answer12 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 13:
                                listRoundItem2[dtQuestionnaire.position].Answer13 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 14:
                                listRoundItem2[dtQuestionnaire.position].Answer14 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 15:
                                listRoundItem2[dtQuestionnaire.position].Answer15 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                        }
                    }
                    if (dtQuestionnaire != null && dtQuestionnaire.endDate.HasValue)
                    {
                        //System.Diagnostics.Debug.WriteLine($"Return End Date: {dtQuestionnaire.endDate.Value.ToString()}");
                        //System.Diagnostics.Debug.WriteLine($"Return Position: {dtQuestionnaire.position.ToString()}");
                        switch (indexAnswer)
                        {
                            case 1:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer1 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 2:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer2 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 3:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer3 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 4:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer4 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 5:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer5 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 6:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer6 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 7:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer7 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 8:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer8 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 9:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer9 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 10:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer10 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 11:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer11 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 12:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer12 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 13:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer13 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 14:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer14 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 15:
                                listRoundItem2[dtQuestionnaire.position].OtherAnswer15 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                        }
                    }
                }
                break;
            case 3:
                if (listRoundItem3 != null && listRoundItem3.Count > 0)
                {
                    if (dtQuestionnaire != null && dtQuestionnaire.startDate.HasValue)
                    {
                        //System.Diagnostics.Debug.WriteLine($"Return Start Date: {dtQuestionnaire.startDate.Value.ToString()}");
                        //System.Diagnostics.Debug.WriteLine($"Return Position: {dtQuestionnaire.position.ToString()}");
                        switch (indexAnswer)
                        {
                            case 1:
                                listRoundItem3[dtQuestionnaire.position].Answer1 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 2:
                                listRoundItem3[dtQuestionnaire.position].Answer3 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 4:
                                listRoundItem3[dtQuestionnaire.position].Answer4 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 5:
                                listRoundItem3[dtQuestionnaire.position].Answer5 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 6:
                                listRoundItem3[dtQuestionnaire.position].Answer6 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 7:
                                listRoundItem3[dtQuestionnaire.position].Answer7 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 8:
                                listRoundItem3[dtQuestionnaire.position].Answer8 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 9:
                                listRoundItem3[dtQuestionnaire.position].Answer9 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 10:
                                listRoundItem3[dtQuestionnaire.position].Answer10 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 11:
                                listRoundItem3[dtQuestionnaire.position].Answer11 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 12:
                                listRoundItem3[dtQuestionnaire.position].Answer12 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 13:
                                listRoundItem3[dtQuestionnaire.position].Answer13 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 14:
                                listRoundItem3[dtQuestionnaire.position].Answer14 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                            case 15:
                                listRoundItem3[dtQuestionnaire.position].Answer15 = dtQuestionnaire.startDate.Value.DateTime.ToString();
                                break;
                        }
                    }
                    if (dtQuestionnaire != null && dtQuestionnaire.endDate.HasValue)
                    {
                        //System.Diagnostics.Debug.WriteLine($"Return End Date: {dtQuestionnaire.endDate.Value.ToString()}");
                        //System.Diagnostics.Debug.WriteLine($"Return Position: {dtQuestionnaire.position.ToString()}");
                        switch (indexAnswer)
                        {
                            case 1:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer1 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 2:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer2 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 3:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer3 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 4:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer4 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 5:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer5 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 6:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer6 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 7:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer7 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 8:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer8 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 9:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer9 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 10:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer10 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 11:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer11 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 12:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer12 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 13:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer13 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 14:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer14 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                            case 15:
                                listRoundItem3[dtQuestionnaire.position].OtherAnswer15 = dtQuestionnaire.endDate.Value.DateTime.ToString();
                                break;
                        }
                    }
                }
                break;
        }


        this.StateHasChanged();
    }

    private string TrimElementId(string elementId)
    {
        StringBuilder sb = new StringBuilder(elementId);
        sb.Replace(" ", "-");
        return sb.ToString();
    }

    private async void UpdateCategoryValue(UpdateElement updateElement)
    {
        await JSRuntime.InvokeAsync<object>($"SetElement", updateElement.elementId, updateElement.elementValue);
    }

    private void DisplayIPE(IPENote item)
    {
        item.Display = !item.Display;
        UpdateNotes();
    }

}