@using A2B_App.Shared.Sox
@using A2B_App.Client.Component.SampleSelection
@using System.Text
@using System.IO
@using System.Net.Http.Headers
@using A2B_App.Client.Services
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject Task<ClientSettings> _getSettings
@inject NavigationManager NavManager

@if (listUserInput != null && listQuestion != null)
{
    var lastElementIndex = listQuestion.LastOrDefault();
    @foreach (var item in listQuestion)
    {
        switch (item.Type)
        {
            case "text":

                <div class="row">
                    <div class="col-10">
                        <div class="form-group">
                            <label for="@($"{roundName}{item.Id}{item.AppId}")">@item.QuestionString.Replace("(RO)", string.Empty)</label>
                            <div class="field">
                                <div class="control is-expanded">
                                    @if (item.DtEndRequire != "large")
                                    {
                                        @if (item.QuestionString.ToLower().Contains("how many iuc system generated?"))
                                        {
                                            <input type="tel" class="input" id="@($"{roundName}{item.Id}{item.AppId}")" @bind-value="UpdateIucSysGenText" >
                                        }
                                        else if (item.QuestionString.ToLower().Contains("how many iuc non system generated?"))
                                        {
                                            <input type="tel" class="input" id="@($"{roundName}{item.Id}{item.AppId}")" @bind-value="UpdateIucNonSysGenText">
                                        }
                                        else
                                        {
                                            //if not multiline then we set as input field
                                            <input type="text" class="input" id="@($"{roundName}{item.Id}{item.AppId}")" @bind-value="listUserInput[item.Position - 1].StrAnswer" disabled="@listUserInput[item.Position - 1].IsDisabled">
                                        }
                                    }
                                    else
                                    {
                                        //if multi line then we set as textarea
                                        <textarea rows="4" class="textarea" id="@($"{roundName}{item.Id}{item.AppId}")" @bind="listUserInput[item.Position - 1].StrAnswer" disabled="@listUserInput[item.Position - 1].IsDisabled"></textarea>
                                    }
                                </div>
                                @if (item.Description != null && item.Description != string.Empty)
                                {
                                    <p class="is-size-7 has-text-left has-text-grey-light">@listUserInput[item.Position - 1].Description</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                break;

            case "date":

                <div class="row">
                    <div class="col-10">
                        <div class="form-group">
                            <label>@(item.QuestionString.Replace("(RO)", string.Empty))</label>
                            @*<label class="label">@(item.QuestionString)</label>*@
                            <QuestionnaireDateFieldComponent position="@(item.Position - 1)"
                                                             OnDateChanged="GetDate"
                                                             answer1="@listUserInput[item.Position - 1].StrAnswer"
                                                             answer2="@listUserInput[item.Position - 1].StrAnswer2"
                                                             isDateRange="@(item.DtEndRequire == "enabled" ? false : true)"
                                                             isDisabled="listUserInput[item.Position - 1].IsDisabled">

                            </QuestionnaireDateFieldComponent>

                            @if (item.Description != null && item.Description != string.Empty)
                            {
                                <p class="is-size-7 has-text-left has-text-grey-light">@listUserInput[item.Position - 1].Description</p>
                            }
                        </div>
                    </div>
                </div>

                break;

            case "category":

                switch (item.QuestionString.ToLower())
                {

                    default:
                        <div class="row">
                            <div class="col-10">
                                <div class="form-group">
                                    <label for="@(TrimElementId($"{roundName}{item.Id}{item.AppId}"))">@(item.QuestionString.Replace("(RO)", string.Empty))</label>
                                    @* <select class="form-control" id="testPhase" @onchange="@((e) => SetCategory(e, "TestingPhase"))">*@
                                    @*<select class="form-control" id="@(TrimElementId($"{roundName}{item.Id}{item.AppId}"))"
                                            @onchange="@((e) => {
                                            if(e.Value.ToString() != string.Empty)
                                            {
                                                listUserInput[item.Position - 1].StrAnswer = e.Value.ToString();
                                                this.StateHasChanged();
                                            }
                                        })">*@
                                    <select class="form-control" id="@(TrimElementId($"{roundName}{item.Id}{item.AppId}"))"
                                            @bind="@listUserInput[item.Position - 1].StrAnswer" disabled="@listUserInput[item.Position - 1].IsDisabled">
                                        @if (item.Options.Count > 0)
                                        {
                                            <option value="">Select Option</option>
                                            foreach (var option in item.Options)
                                            {
                                                <option value="@(option.OptionName)">@(option.OptionName)</option>
                                            }
                                        }
                                    </select>
                                    @if (item.Description != null && item.Description != string.Empty)
                                    {
                                        <p class="is-size-7 has-text-left has-text-grey-light">@listUserInput[item.Position - 1].Description</p>
                                    }

                                    @if (listUserInput[item.Position - 1].StrAnswer != string.Empty && listUserInput[item.Position - 1].StrAnswer != null)
                                    {
                                        //UpdateElement updateElement = new UpdateElement();
                                        //updateElement.elementId = TrimElementId($"{roundName}{item.Id}{item.AppId}");
                                        //updateElement.elementValue = listUserInput[item.Position - 1].StrAnswer;
                                        //UpdateCategoryValue(updateElement);
                                    }

                                </div>
                            </div>
                        </div>
                        break;


                }

                break;

            case "image":
                System.Diagnostics.Debug.WriteLine($"item.Question: {item.QuestionString}");
                System.Diagnostics.Debug.WriteLine($"item.Position: {item.Position}");

                <div class="row">

                    <div class="col-4">
                        <div class="form-group">
                            <DragDrop ReturnFiles="@((e) => { ReturnFiles(e); })" position="@item.Position" enable="true" />
                        </div>
                    </div>

                    @if (listUserInput[item.Position - 1].StrAnswer != null && listUserInput[item.Position - 1].StrAnswer != string.Empty)
                    {
                        <div class="row">
                            <div class="col-10">
                                <div class="form-group">
                                    <div class="is-overlay">
                                        <a class="delete is-large is-pulled-right has-background-danger" @onclick="@(() => { RemoveImage(item.Position); })"></a>
                                    </div>
                                    <img src="@($"{NavManager.BaseUri}include/upload/image/" + listUserInput[item.Position - 1].StrAnswer)" />
                                </div>
                            </div>
                        </div>
                    }

                </div>

                break;
        }

    }

}


@code {

    [Parameter] public string roundName { get; set; }
    [Parameter] public List<QuestionnaireUserAnswer> listUserInput { get; set; }
    [Parameter] public List<QuestionnaireQuestion> listQuestion { get; set; }
    [Parameter] public EventCallback<IUCSystemGenCount> ReturnCountIUCSystemGen { get; set; }
    [Parameter] public EventCallback<IUCNonSystemGenCount> ReturnCountIUCNonSystemGen { get; set; }
    FileService fileService = new FileService();
    private int countIUCSystemGen { get; set; }
    private int countIUCNonSystemGen { get; set; }

    private int iucSysGenIndex = 0, iucNonSysGenIndex = 0;
    private string iucSysGen, iucNonSysGen;
    //private bool isRenderComplete = false;

    protected override Task OnInitializedAsync()
    {
        //GetIndex();
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        GetIndex();
        this.StateHasChanged();
        return base.OnParametersSetAsync();
    }

    private void GetDate(DtQuestionnaire dtQuestionnaire)
    {
        if (listUserInput != null && listUserInput.Count > 0)
        {
            if (dtQuestionnaire != null && dtQuestionnaire.startDate.HasValue)
            {
                System.Diagnostics.Debug.WriteLine($"Return Start Date: {dtQuestionnaire.startDate.Value.ToString()}");
                System.Diagnostics.Debug.WriteLine($"Return Position: {dtQuestionnaire.position.ToString()}");
                listUserInput[dtQuestionnaire.position].StrAnswer = dtQuestionnaire.startDate.Value.DateTime.ToString();

            }
            if (dtQuestionnaire != null && dtQuestionnaire.endDate.HasValue)
            {
                System.Diagnostics.Debug.WriteLine($"Return End Date: {dtQuestionnaire.endDate.Value.ToString()}");
                System.Diagnostics.Debug.WriteLine($"Return Position: {dtQuestionnaire.position.ToString()}");
                listUserInput[dtQuestionnaire.position].StrAnswer2 = dtQuestionnaire.endDate.Value.DateTime.ToString();
            }
        }

        this.StateHasChanged();
    }

    private void GetIndex()
    {
        if (listUserInput != null)
        {
            var tempIucSystemGen = listUserInput.Where(x => x.StrQuestion.ToLower().Contains("how many iuc system generated?")).FirstOrDefault();
            if (tempIucSystemGen != null)
            {
                iucSysGenIndex = tempIucSystemGen.Position;
                iucSysGen = tempIucSystemGen.StrAnswer;
                //ChangeEventArgs iucSysGenEventArgs = new ChangeEventArgs();
                //iucSysGenEventArgs.Value = tempIucSystemGen.StrAnswer;
                //OnChangeEventHanderIUCSysGen(iucSysGenEventArgs, "IUCSysGen");
            }

            var tempIucNonSystemGen = listUserInput.Where(x => x.StrQuestion.ToLower().Contains("how many iuc non system generated?")).FirstOrDefault();
            if (tempIucNonSystemGen != null)
            {
                iucNonSysGenIndex = tempIucNonSystemGen.Position;
                iucNonSysGen = tempIucNonSystemGen.StrAnswer;
                //ChangeEventArgs iucSysGenEventArgs = new ChangeEventArgs();
                //iucSysGenEventArgs.Value = tempIucSystemGen.StrAnswer;
                //OnChangeEventHanderIUCSysGen(iucSysGenEventArgs, "IUCNonSysGen");
            }
        }

    }

    private void ReturnIUCNonSystemGenCount()
    {
        IUCNonSystemGenCount uICNonSystemGenCount = new IUCNonSystemGenCount();
        uICNonSystemGenCount.roundName = roundName;
        uICNonSystemGenCount.count = countIUCNonSystemGen;
        ReturnCountIUCNonSystemGen.InvokeAsync(uICNonSystemGenCount);
        this.StateHasChanged();
    }

    private void ReturnIUCSystemGenCount()
    {
        IUCSystemGenCount uICSystemGenCount = new IUCSystemGenCount();
        uICSystemGenCount.roundName = roundName;
        uICSystemGenCount.count = countIUCSystemGen;
        ReturnCountIUCSystemGen.InvokeAsync(uICSystemGenCount);
        this.StateHasChanged();
    }

    private string UpdateIucSysGenText
    {
        get
        {
            return iucSysGen;
        }
        set
        {

            ChangeEventArgs iucSysGenEventArgs = new ChangeEventArgs();
            iucSysGenEventArgs.Value = value;
            OnChangeEventHanderIUCSysGen(iucSysGenEventArgs, "IUCSysGen");

        }
    }

    private string UpdateIucNonSysGenText
    {
        get
        {
            return iucNonSysGen;
        }
        set
        {

            ChangeEventArgs iucNonSysGenEventArgs = new ChangeEventArgs();
            iucNonSysGenEventArgs.Value = value;
            OnChangeEventHanderIUCSysGen(iucNonSysGenEventArgs, "IUCNonSysGen");

        }
    }

    private void OnChangeEventHanderIUCSysGen(ChangeEventArgs e, string item)
    {
        switch (item)
        {
            case "IUCSysGen":
                listUserInput[iucSysGenIndex - 1].StrAnswer = iucSysGen = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"iucSysGen ANSWER: {e.Value.ToString()}");
                //var isSuccessIuc = int.TryParse(e.Value.ToString(), out int temptIUCSystemGen);
                if (int.TryParse(e.Value.ToString(), out int temptIUCSystemGen))
                {
                    countIUCSystemGen = temptIUCSystemGen;
                    ReturnIUCSystemGenCount();
                }
                break;
            case "IUCNonSysGen":
                listUserInput[iucNonSysGenIndex - 1].StrAnswer = iucNonSysGen = e.Value.ToString();
                System.Diagnostics.Debug.WriteLine($"iucNonSysGen ANSWER: {e.Value.ToString()}");
                //var isSuccessIucNon = int.TryParse(e.Value.ToString(), out int temptIUCNonSystemGen);
                if (int.TryParse(e.Value.ToString(), out int temptIUCNonSystemGen))
                {
                    countIUCNonSystemGen = temptIUCNonSystemGen;
                    ReturnIUCNonSystemGenCount();
                }
                break;
        }

        this.StateHasChanged();

    }

    private string TrimElementId(string elementId)
    {
        StringBuilder sb = new StringBuilder(elementId);
        sb.Replace(" ", "-");
        return sb.ToString();
    }

    private async void UpdateCategoryValue(UpdateElement updateElement)
    {
        await JSRuntime.InvokeAsync<object>($"SetElement", updateElement.elementId, updateElement.elementValue);
    }


    private async void ReturnFiles(FileUpload fileUpload)
    {
        //fileUpload.IFileEntry = _file;
        if (fileUpload.IFileEntry != null)
        {
            var ms = new MemoryStream();
            await fileUpload.IFileEntry.Data.CopyToAsync(ms);

            //upload file and get response
            var response = await fileService.UploadFileAsync(ms, fileUpload.IFileEntry.Name, Http);

            if (response.StatusCode.ToString() == "OK")
            {
                listUserInput[fileUpload.Position - 1].StrAnswer = response.Content.ReadAsStringAsync().Result.ToString();
                //file = response.Content.ReadAsStringAsync().Result.ToString();
                this.StateHasChanged();
            }

        }
    }

    private void RemoveImage(int position)
    {
        if (listUserInput[position - 1].StrAnswer != string.Empty)
        {
            listUserInput[position - 1].StrAnswer = string.Empty;
            this.StateHasChanged();
        }

    }

    //public async Task<HttpResponseMessage> UploadFileAsync(MemoryStream ms, string fileName, HttpClient Http)
    //{

    //    var content = new MultipartFormDataContent();
    //    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
    //    content.Add(new ByteArrayContent(ms.GetBuffer()), "file", fileName);

    //    var response = await Http.PostAsync($"api/fileupload/image", content);
    //    System.Diagnostics.Debug.WriteLine(response.Content.ReadAsStringAsync().Result);
    //    System.Diagnostics.Debug.WriteLine(response.StatusCode.ToString());

    //    return response;

    //}


}
